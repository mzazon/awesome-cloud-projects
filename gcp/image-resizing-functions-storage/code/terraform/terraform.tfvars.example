# Example Terraform variables file for GCP Image Resizing Solution
# Copy this file to terraform.tfvars and customize for your environment

# Required: Your GCP project ID
project_id = "your-gcp-project-id-here"

# Required: GCP region for resources
region = "us-central1"

# Optional: Environment designation
environment = "dev"

# Optional: Custom function name
function_name = "resize-image-function"

# Optional: Custom bucket names (if not provided, will be auto-generated)
# bucket_names = {
#   original = "my-original-images-bucket"
#   resized  = "my-resized-images-bucket"  
# }

# Optional: Function configuration
function_config = {
  memory_mb       = 512      # 128-8192 MB
  timeout_seconds = 120      # 1-540 seconds  
  max_instances   = 10       # Maximum concurrent executions
  min_instances   = 0        # Minimum warm instances (0 = scale to zero)
  runtime         = "python311"
  entry_point     = "resize_image"
}

# Optional: Thumbnail sizes to generate
thumbnail_sizes = [
  { width = 150, height = 150 },   # Small thumbnail
  { width = 300, height = 300 },   # Medium thumbnail  
  { width = 600, height = 600 },   # Large thumbnail
]

# Optional: Supported image formats
supported_image_formats = ["jpg", "jpeg", "png", "bmp", "tiff"]

# Optional: Storage class for buckets
storage_class = "STANDARD"  # Options: STANDARD, NEARLINE, COLDLINE, ARCHIVE

# Optional: Labels for resource management and cost tracking
labels = {
  purpose     = "image-processing"
  solution    = "serverless-resize" 
  managed_by  = "terraform"
  team        = "engineering"
  cost_center = "development"
}

# Optional: Enable required APIs (set to false if APIs are already enabled)
enable_apis = true

# Optional: Enable uniform bucket-level access for enhanced security
enable_uniform_bucket_level_access = true