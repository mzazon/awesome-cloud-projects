# Infrastructure Manager Configuration for Automatic Image Resizing
# This configuration deploys a complete serverless image processing solution
# using Cloud Functions, Cloud Storage, and Eventarc integration

# Import required resource types and modules
imports:
  - path: https://www.googleapis.com/compute/v1/
    name: compute_v1
  - path: https://www.googleapis.com/storage/v1/
    name: storage_v1
  - path: https://www.googleapis.com/cloudfunctions/v2/
    name: cloudfunctions_v2
  - path: https://www.googleapis.com/eventarc/v1/
    name: eventarc_v1
  - path: https://www.googleapis.com/iam/v1/
    name: iam_v1

# Template variables for customization
variables:
  # Project and deployment configuration
  project_id:
    type: string
    description: "GCP Project ID for resource deployment"
    default: ""
  
  region:
    type: string
    description: "GCP region for function and trigger deployment"
    default: "us-central1"
  
  deployment_name:
    type: string
    description: "Base name for all deployed resources"
    default: "image-resize"
  
  # Storage configuration
  original_bucket_name:
    type: string
    description: "Name for the original images bucket"
    default: ""
  
  resized_bucket_name:
    type: string
    description: "Name for the resized images bucket"
    default: ""
  
  storage_class:
    type: string
    description: "Storage class for buckets"
    default: "STANDARD"
    enum:
      - "STANDARD"
      - "NEARLINE"
      - "COLDLINE"
      - "ARCHIVE"
  
  # Function configuration
  function_memory:
    type: string
    description: "Memory allocation for Cloud Function"
    default: "512Mi"
    enum:
      - "128Mi"
      - "256Mi"
      - "512Mi"
      - "1Gi"
      - "2Gi"
      - "4Gi"
  
  function_timeout:
    type: string
    description: "Timeout for Cloud Function execution"
    default: "120s"
  
  max_instances:
    type: integer
    description: "Maximum number of function instances"
    default: 10
    minimum: 1
    maximum: 100

# Resource definitions
resources:
  # Cloud Storage bucket for original images
  original-images-bucket:
    type: storage_v1.bucket
    properties:
      name: ${original_bucket_name}
      project: ${project_id}
      location: ${region}
      storageClass: ${storage_class}
      # Enable uniform bucket-level access for consistent security
      iamConfiguration:
        uniformBucketLevelAccess:
          enabled: true
      # Lifecycle management to optimize costs
      lifecycle:
        rule:
          - action:
              type: "Delete"
            condition:
              age: 365
              matchesStorageClass:
                - "STANDARD"
      # Versioning for data protection
      versioning:
        enabled: false
      # Public access prevention
      publicAccessPrevention: "enforced"
    metadata:
      description: "Storage bucket for original uploaded images"
      labels:
        purpose: "image-processing"
        component: "storage"
        environment: "production"

  # Cloud Storage bucket for resized/processed images
  resized-images-bucket:
    type: storage_v1.bucket
    properties:
      name: ${resized_bucket_name}
      project: ${project_id}
      location: ${region}
      storageClass: ${storage_class}
      # Enable uniform bucket-level access for consistent security
      iamConfiguration:
        uniformBucketLevelAccess:
          enabled: true
      # Lifecycle management to optimize costs for processed images
      lifecycle:
        rule:
          - action:
              type: "SetStorageClass"
              storageClass: "NEARLINE"
            condition:
              age: 30
              matchesStorageClass:
                - "STANDARD"
          - action:
              type: "Delete"
            condition:
              age: 365
      # Versioning disabled for processed images to save costs
      versioning:
        enabled: false
      # Public access prevention
      publicAccessPrevention: "enforced"
    metadata:
      description: "Storage bucket for resized and processed images"
      labels:
        purpose: "image-processing"
        component: "storage"
        environment: "production"

  # Service account for Cloud Function execution
  function-service-account:
    type: iam_v1.serviceAccount
    properties:
      accountId: ${deployment_name}-function-sa
      project: ${project_id}
      displayName: "Image Resize Function Service Account"
      description: "Service account for image processing Cloud Function with minimal required permissions"
    metadata:
      description: "Dedicated service account following principle of least privilege"

  # IAM binding for function service account - original bucket read access
  original-bucket-iam-binding:
    type: storage_v1.bucketIamBinding
    properties:
      bucket: ${original_bucket_name}
      role: "roles/storage.objectViewer"
      members:
        - serviceAccount:$(ref.function-service-account.email)
    dependsOn:
      - original-images-bucket
      - function-service-account
    metadata:
      description: "Grant read access to original images bucket"

  # IAM binding for function service account - resized bucket write access
  resized-bucket-iam-binding:
    type: storage_v1.bucketIamBinding
    properties:
      bucket: ${resized_bucket_name}
      role: "roles/storage.objectAdmin"
      members:
        - serviceAccount:$(ref.function-service-account.email)
    dependsOn:
      - resized-images-bucket
      - function-service-account
    metadata:
      description: "Grant write access to resized images bucket"

  # Cloud Function for image processing
  image-resize-function:
    type: cloudfunctions_v2.function
    properties:
      name: ${deployment_name}-function
      location: ${region}
      project: ${project_id}
      description: "Serverless function to automatically resize uploaded images"
      # Function configuration
      buildConfig:
        runtime: "python311"
        entryPoint: "resize_image"
        source:
          storageSource:
            # Note: In production, source code should be uploaded to Cloud Storage
            # For this template, we're using inline source code
            bucket: ""
            object: ""
        # Environment variables for build process
        environmentVariables:
          GOOGLE_FUNCTION_TARGET: "resize_image"
      
      serviceConfig:
        # Resource allocation
        availableMemory: ${function_memory}
        timeoutSeconds: ${function_timeout}
        maxInstanceCount: ${max_instances}
        minInstanceCount: 0
        # Service account configuration
        serviceAccountEmail: $(ref.function-service-account.email)
        # Environment variables for runtime
        environmentVariables:
          RESIZED_BUCKET: ${resized_bucket_name}
          ORIGINAL_BUCKET: ${original_bucket_name}
          THUMBNAIL_SIZES: "150x150,300x300,600x600"
        # VPC configuration (optional - remove if not needed)
        # vpcConnector: ""
        # Security settings
        ingressSettings: "ALLOW_INTERNAL_ONLY"
        # Scaling configuration
        availableCpu: "1"
        # Concurrency per instance
        maxInstanceRequestConcurrency: 1
    
    dependsOn:
      - function-service-account
      - original-bucket-iam-binding
      - resized-bucket-iam-binding
    
    metadata:
      description: "Cloud Function implementing image resize logic with PIL/Pillow"
      labels:
        purpose: "image-processing"
        component: "compute"
        environment: "production"

  # Eventarc trigger for Cloud Storage events
  storage-trigger:
    type: eventarc_v1.trigger
    properties:
      name: ${deployment_name}-storage-trigger
      location: ${region}
      project: ${project_id}
      # Event matching criteria
      eventFilters:
        - attribute: "type"
          value: "google.cloud.storage.object.v1.finalized"
        - attribute: "bucket"
          value: ${original_bucket_name}
      # Function destination
      destination:
        cloudRun:
          service: $(ref.image-resize-function.serviceConfig.service)
          region: ${region}
      # Service account for trigger execution
      serviceAccount: $(ref.function-service-account.email)
      # Transport configuration
      transport:
        pubsub:
          topic: ""
    
    dependsOn:
      - image-resize-function
      - original-images-bucket
    
    metadata:
      description: "Eventarc trigger for automatic function invocation on image upload"
      labels:
        purpose: "image-processing"
        component: "event-trigger"
        environment: "production"

  # IAM binding for Eventarc service account
  eventarc-service-account-binding:
    type: iam_v1.projectIamBinding
    properties:
      project: ${project_id}
      role: "roles/eventarc.eventReceiver"
      members:
        - serviceAccount:$(ref.function-service-account.email)
    dependsOn:
      - function-service-account
    metadata:
      description: "Grant Eventarc permissions to function service account"

  # Cloud Run invoker permission for Eventarc
  cloud-run-invoker-binding:
    type: iam_v1.projectIamBinding
    properties:
      project: ${project_id}
      role: "roles/run.invoker"
      members:
        - serviceAccount:$(ref.function-service-account.email)
    dependsOn:
      - function-service-account
    metadata:
      description: "Grant Cloud Run invoke permissions to function service account"

# Outputs for validation and integration
outputs:
  # Storage bucket information
  original_bucket_name:
    description: "Name of the original images storage bucket"
    value: $(ref.original-images-bucket.name)
  
  original_bucket_url:
    description: "GCS URL of the original images bucket"
    value: gs://$(ref.original-images-bucket.name)
  
  resized_bucket_name:
    description: "Name of the resized images storage bucket"
    value: $(ref.resized-images-bucket.name)
  
  resized_bucket_url:
    description: "GCS URL of the resized images bucket"
    value: gs://$(ref.resized-images-bucket.name)
  
  # Function information
  function_name:
    description: "Name of the deployed Cloud Function"
    value: $(ref.image-resize-function.name)
  
  function_url:
    description: "URL of the deployed Cloud Function"
    value: $(ref.image-resize-function.serviceConfig.uri)
  
  # Service account information
  service_account_email:
    description: "Email of the function service account"
    value: $(ref.function-service-account.email)
  
  # Trigger information
  trigger_name:
    description: "Name of the Eventarc trigger"
    value: $(ref.storage-trigger.name)
  
  # Deployment information
  deployment_region:
    description: "Deployment region"
    value: ${region}
  
  project_id:
    description: "Project ID used for deployment"
    value: ${project_id}
  
  # Testing information
  test_upload_command:
    description: "Command to test the image processing pipeline"
    value: gsutil cp your-test-image.jpg gs://$(ref.original-images-bucket.name)/
  
  test_verification_command:
    description: "Command to verify processed images"
    value: gsutil ls gs://$(ref.resized-images-bucket.name)/

# Metadata for the entire deployment
metadata:
  version: "1.0"
  description: "Infrastructure Manager template for serverless image resizing with Cloud Functions and Storage"
  author: "Generated from GCP Recipe: Automatic Image Resizing"
  documentation: "https://cloud.google.com/functions/docs/calling/storage"
  tags:
    - "serverless"
    - "image-processing"
    - "cloud-functions"
    - "cloud-storage"
    - "eventarc"
    - "automation"
  
  # Resource summary
  resource_summary:
    storage_buckets: 2
    cloud_functions: 1
    eventarc_triggers: 1
    service_accounts: 1
    iam_bindings: 4
  
  # Estimated costs (approximate)
  cost_estimate:
    description: "Estimated monthly cost for moderate usage"
    cloud_functions: "$0.10 - $5.00 (depending on invocations and duration)"
    cloud_storage: "$0.02 - $0.50 per GB stored"
    eventarc: "Free tier covers most usage"
    note: "Actual costs depend on usage patterns and data volumes"
  
  # Security considerations
  security_features:
    - "Uniform bucket-level access enabled"
    - "Public access prevention enforced"
    - "Dedicated service account with minimal permissions"
    - "Function restricted to internal invocation only"
    - "IAM roles follow principle of least privilege"
  
  # Best practices implemented
  best_practices:
    - "Automated lifecycle management for cost optimization"
    - "Proper resource dependencies and ordering"
    - "Comprehensive labeling for resource management"
    - "Environment variables for configuration"
    - "Scalable function configuration"
    - "Error handling and logging enabled"