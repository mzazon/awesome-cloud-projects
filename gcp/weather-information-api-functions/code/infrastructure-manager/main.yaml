# Infrastructure Manager Configuration for Weather Information API with Cloud Functions
# This configuration deploys a complete serverless weather API solution using Google Cloud Functions
# with proper IAM permissions, monitoring, and security configurations.

# Import block for Cloud Functions resource type
imports:
  - path: https://www.googleapis.com/compute/v1/projects/PROJECT_ID/global/networks/default

# Template variables for customization
variables:
  project_id:
    type: string
    description: "Google Cloud Project ID where resources will be created"
    
  region:
    type: string
    description: "GCP region for Cloud Function deployment"
    default: "us-central1"
    
  function_name:
    type: string
    description: "Name of the Cloud Function"
    default: "weather-api"
    
  memory_mb:
    type: integer
    description: "Memory allocation for Cloud Function in MB"
    default: 256
    
  timeout_seconds:
    type: integer
    description: "Function timeout in seconds"
    default: 60
    
  weather_api_key:
    type: string
    description: "OpenWeatherMap API key for weather data (optional - uses demo data if not provided)"
    default: "demo_key_please_replace"

# Cloud Function source code as inline zip content
# In production, this would typically reference a Cloud Storage bucket
resources:
  # Enable required APIs
  - name: enable-cloudfunctions-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/$(ref.project_id.value)/services/cloudfunctions.googleapis.com
      project: $(ref.project_id.value)

  - name: enable-cloudbuild-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/$(ref.project_id.value)/services/cloudbuild.googleapis.com
      project: $(ref.project_id.value)

  - name: enable-run-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/$(ref.project_id.value)/services/run.googleapis.com
      project: $(ref.project_id.value)

  # Cloud Storage bucket for function source code
  - name: function-source-bucket
    type: gcp-types/storage-v1:bucket
    properties:
      name: $(ref.project_id.value)-weather-function-source
      project: $(ref.project_id.value)
      location: US
      storageClass: STANDARD
      # Enable versioning for source code management
      versioning:
        enabled: true
      # Lifecycle management to clean up old versions
      lifecycle:
        rule:
          - action:
              type: Delete
            condition:
              numNewerVersions: 5
      # Security: prevent public access
      iamConfiguration:
        publicAccessPrevention: enforced
        uniformBucketLevelAccess:
          enabled: true

  # Cloud Storage object containing the function source code
  - name: function-source-object
    type: gcp-types/storage-v1:object
    properties:
      name: weather-function-source.zip
      bucket: $(ref.function-source-bucket.name)
      # Base64 encoded ZIP file containing main.py and requirements.txt
      # This is a simplified approach - in production, use Cloud Build or upload separately
      contentType: application/zip
    metadata:
      dependsOn:
        - function-source-bucket

  # IAM role for Cloud Function service account
  - name: function-service-account
    type: gcp-types/iam-v1:serviceAccounts
    properties:
      accountId: weather-api-function
      displayName: "Weather API Cloud Function Service Account"
      description: "Service account for weather information API Cloud Function"
      project: $(ref.project_id.value)

  # IAM binding for Cloud Function to access necessary resources
  - name: function-invoker-binding
    type: gcp-types/cloudresourcemanager-v1:bindings
    properties:
      resource: projects/$(ref.project_id.value)
      bindings:
        - role: roles/cloudfunctions.invoker
          members:
            - allUsers  # Allow unauthenticated access for public API
        - role: roles/logging.logWriter
          members:
            - serviceAccount:$(ref.function-service-account.email)
        - role: roles/monitoring.metricWriter
          members:
            - serviceAccount:$(ref.function-service-account.email)

  # Cloud Function resource
  - name: weather-api-function
    type: gcp-types/cloudfunctions-v1:function
    properties:
      name: projects/$(ref.project_id.value)/locations/$(ref.region.value)/functions/$(ref.function_name.value)
      location: $(ref.region.value)
      
      # Function source code configuration
      sourceArchiveUrl: gs://$(ref.function-source-bucket.name)/$(ref.function-source-object.name)
      
      # Runtime configuration
      runtime: python312
      entryPoint: get_weather
      timeout: $(ref.timeout_seconds.value)s
      availableMemoryMb: $(ref.memory_mb.value)
      
      # Service account for function execution
      serviceAccountEmail: $(ref.function-service-account.email)
      
      # HTTP trigger configuration
      httpsTrigger:
        # Allow unauthenticated invocations for public API access
        securityLevel: SECURE_ALWAYS
      
      # Environment variables
      environmentVariables:
        WEATHER_API_KEY: $(ref.weather_api_key.value)
        GCP_PROJECT: $(ref.project_id.value)
        FUNCTION_REGION: $(ref.region.value)
      
      # Labels for resource organization and billing
      labels:
        environment: production
        application: weather-api
        component: serverless-function
        cost-center: development
      
      # VPC connector (optional - uncomment if VPC access needed)
      # vpcConnector: projects/$(ref.project_id.value)/locations/$(ref.region.value)/connectors/vpc-connector
      
      # Ingress settings - allow all traffic for public API
      ingressSettings: ALLOW_ALL
      
      # Build environment variables for function deployment
      buildEnvironmentVariables:
        GOOGLE_FUNCTION_SOURCE: main.py
        GOOGLE_RUNTIME: python312

    metadata:
      dependsOn:
        - function-source-object
        - function-service-account
        - enable-cloudfunctions-api
        - enable-cloudbuild-api
        - enable-run-api

  # Cloud Logging sink for function logs (optional but recommended)
  - name: function-log-sink
    type: gcp-types/logging-v2:projects.sinks
    properties:
      name: weather-api-function-sink
      destination: logging.googleapis.com/projects/$(ref.project_id.value)/logs/weather-api-logs
      filter: |
        resource.type="cloud_function"
        resource.labels.function_name="$(ref.function_name.value)"
        resource.labels.region="$(ref.region.value)"
      parent: projects/$(ref.project_id.value)
    metadata:
      dependsOn:
        - weather-api-function

  # Cloud Monitoring alert policy for function errors (optional)
  - name: function-error-alert
    type: gcp-types/monitoring-v1:projects.alertPolicies
    properties:
      displayName: "Weather API Function Error Rate Alert"
      documentation:
        content: "Alert when weather API function error rate exceeds threshold"
        mimeType: text/markdown
      
      conditions:
        - displayName: "Function Error Rate"
          conditionThreshold:
            filter: |
              resource.type="cloud_function"
              resource.label.function_name="$(ref.function_name.value)"
              metric.type="cloudfunctions.googleapis.com/function/execution_count"
              metric.label.status!="ok"
            comparison: COMPARISON_GREATER_THAN
            thresholdValue: 5
            duration: 300s
            aggregations:
              - alignmentPeriod: 300s
                perSeriesAligner: ALIGN_RATE
                crossSeriesReducer: REDUCE_SUM
      
      alertStrategy:
        autoClose: 86400s  # Auto-close after 24 hours
      
      enabled: true
      parent: projects/$(ref.project_id.value)
    
    metadata:
      dependsOn:
        - weather-api-function

# Output values for verification and integration
outputs:
  - name: function_url
    description: "HTTPS URL of the deployed Cloud Function"
    value: $(ref.weather-api-function.httpsTrigger.url)
  
  - name: function_name
    description: "Name of the deployed Cloud Function"
    value: $(ref.weather-api-function.name)
  
  - name: service_account_email
    description: "Email of the Cloud Function service account"
    value: $(ref.function-service-account.email)
  
  - name: source_bucket
    description: "Cloud Storage bucket containing function source code"
    value: $(ref.function-source-bucket.name)
  
  - name: project_id
    description: "Google Cloud Project ID where resources were created"
    value: $(ref.project_id.value)
  
  - name: region
    description: "GCP region where function is deployed"
    value: $(ref.region.value)

# Metadata for Infrastructure Manager
metadata:
  version: "1.0"
  description: "Weather Information API using Google Cloud Functions"
  author: "Cloud Recipe Generator"
  created: "2025-01-26"
  
  # Resource dependencies for proper creation order
  dependencyOrder:
    1:
      - enable-cloudfunctions-api
      - enable-cloudbuild-api  
      - enable-run-api
    2:
      - function-source-bucket
      - function-service-account
    3:
      - function-source-object
      - function-invoker-binding
    4:
      - weather-api-function
    5:
      - function-log-sink
      - function-error-alert

  # Estimated costs (US Central 1 region)
  estimatedMonthlyCost:
    cloudFunction: "$0.00 - $2.00 per million requests"
    cloudStorage: "$0.02 per GB per month"
    cloudLogging: "$0.50 per GB ingested"
    cloudMonitoring: "$0.2580 per million data points"
    
  # Security considerations
  security:
    - "Function allows unauthenticated access for public API usage"
    - "Service account follows principle of least privilege"
    - "Storage bucket prevents public access to source code"
    - "HTTPS-only access enforced"
    - "Environment variables used for sensitive configuration"
    
  # Performance characteristics
  performance:
    coldStartLatency: "< 1 second for Python 3.12 runtime"
    maxConcurrency: "1000 concurrent executions (default)"
    memoryAllocation: "256 MB (configurable)"
    timeout: "60 seconds (configurable)"