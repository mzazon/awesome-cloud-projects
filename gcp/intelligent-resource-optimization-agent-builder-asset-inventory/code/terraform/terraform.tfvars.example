# Example Terraform variables file for GCP Intelligent Resource Optimization
# Copy this file to terraform.tfvars and customize the values for your environment

# ==============================================
# REQUIRED VARIABLES
# ==============================================

# Your GCP project ID where resources will be deployed
project_id = "my-optimization-project-123"

# Your GCP organization ID for Cloud Asset Inventory access
# Find this with: gcloud organizations list
organization_id = "123456789012"

# ==============================================
# INFRASTRUCTURE CONFIGURATION
# ==============================================

# GCP region for resource deployment
region = "us-central1"

# GCP zone for resource deployment  
zone = "us-central1-a"

# BigQuery dataset name (will be suffixed with random string)
dataset_name = "asset_optimization"

# Cloud Storage bucket name prefix (will be suffixed with random string)
bucket_name_prefix = "resource-optimizer"

# Environment name for resource tagging
environment = "production"

# ==============================================
# SCHEDULING CONFIGURATION
# ==============================================

# Cron schedule for automated asset exports (daily at 2 AM)
export_schedule = "0 2 * * *"

# Timezone for the scheduler job
schedule_timezone = "America/New_York"

# ==============================================
# ASSET INVENTORY CONFIGURATION
# ==============================================

# List of Google Cloud asset types to include in inventory exports
# Customize this list based on your optimization focus areas
asset_types = [
  "compute.googleapis.com/Instance",
  "compute.googleapis.com/Disk",
  "storage.googleapis.com/Bucket",
  "container.googleapis.com/Cluster",
  "sqladmin.googleapis.com/Instance",
  # Uncomment additional asset types as needed:
  # "bigquery.googleapis.com/Dataset",
  # "bigquery.googleapis.com/Table",
  # "compute.googleapis.com/Image",
  # "compute.googleapis.com/Snapshot",
  # "container.googleapis.com/NodePool",
  # "redis.googleapis.com/Instance",
  # "spanner.googleapis.com/Instance"
]

# ==============================================
# VERTEX AI AGENT CONFIGURATION
# ==============================================

# Vertex AI model for the optimization agent
# Options: "gemini-1.5-pro", "gemini-1.5-flash", "gemini-1.0-pro"
vertex_ai_model = "gemini-1.5-pro"

# Temperature setting for AI responses (0.0 = deterministic, 1.0 = creative)
agent_temperature = 0.2

# Maximum output tokens for AI agent responses
agent_max_tokens = 2000

# ==============================================
# DATA RETENTION CONFIGURATION
# ==============================================

# Number of days to retain BigQuery data
retention_days = 90

# ==============================================
# API MANAGEMENT
# ==============================================

# Whether to automatically enable required GCP APIs
enable_apis = true

# ==============================================
# MONITORING CONFIGURATION
# ==============================================

# List of notification channel IDs for monitoring alerts
# Get these from: gcloud alpha monitoring channels list
monitoring_notification_channels = [
  # "projects/PROJECT_ID/notificationChannels/CHANNEL_ID_1",
  # "projects/PROJECT_ID/notificationChannels/CHANNEL_ID_2"
]

# ==============================================
# RESOURCE LABELING
# ==============================================

# Common labels to apply to all resources
labels = {
  managed-by  = "terraform"
  solution    = "resource-optimization"
  component   = "asset-inventory"
  team        = "platform-engineering"
  cost-center = "engineering"
  # Add your organization-specific labels here
}

# ==============================================
# EXAMPLE CONFIGURATIONS FOR DIFFERENT ENVIRONMENTS
# ==============================================

# Development Environment Example:
# environment = "development"
# export_schedule = "0 6 * * *"  # 6 AM daily
# retention_days = 30
# vertex_ai_model = "gemini-1.5-flash"  # Faster, less expensive
# agent_temperature = 0.1

# Staging Environment Example:
# environment = "staging"
# export_schedule = "0 4 * * *"  # 4 AM daily
# retention_days = 60
# vertex_ai_model = "gemini-1.5-pro"
# agent_temperature = 0.2

# Production Environment Example:
# environment = "production"
# export_schedule = "0 2 * * *"  # 2 AM daily
# retention_days = 90
# vertex_ai_model = "gemini-1.5-pro"
# agent_temperature = 0.2
# monitoring_notification_channels = ["projects/PROJECT/notificationChannels/ID"]

# ==============================================
# HIGH-VOLUME ENVIRONMENT CONSIDERATIONS
# ==============================================

# For organizations with many resources (>10,000 assets):
# export_schedule = "0 1 * * *"  # Earlier export time
# retention_days = 365  # Longer retention for trend analysis
# Consider splitting asset types across multiple exports

# ==============================================
# COMPLIANCE AND GOVERNANCE
# ==============================================

# For regulated environments, consider:
# retention_days = 2555  # 7 years for compliance
# labels = {
#   compliance = "required"
#   data-classification = "internal"
#   backup-required = "true"
# }

# ==============================================
# COST OPTIMIZATION SETTINGS
# ==============================================

# For cost-conscious deployments:
# vertex_ai_model = "gemini-1.5-flash"  # Lower cost model
# agent_max_tokens = 1000  # Reduce token usage
# retention_days = 30  # Shorter retention
# export_schedule = "0 6 * * 1"  # Weekly instead of daily (Mondays at 6 AM)