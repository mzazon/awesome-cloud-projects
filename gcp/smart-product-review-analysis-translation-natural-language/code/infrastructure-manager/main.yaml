# Infrastructure Manager Configuration for Smart Product Review Analysis
# Recipe: Smart Product Review Analysis with Translation and Natural Language AI
# This configuration deploys the complete infrastructure for multilingual product review analysis
# including Cloud Functions, BigQuery dataset, and required API enablement

# Define input variables for customization
variables:
  # Project configuration
  project_id:
    type: string
    description: "GCP Project ID where resources will be created"
    default: "review-analysis-project"
  
  region:
    type: string
    description: "GCP region for resource deployment"
    default: "us-central1"
  
  # Resource naming configuration
  random_suffix:
    type: string
    description: "Random suffix for unique resource naming"
    default: "abc123"
  
  # BigQuery configuration
  dataset_name:
    type: string
    description: "BigQuery dataset name for storing review analysis data"
    default: "product_reviews"
  
  dataset_location:
    type: string
    description: "BigQuery dataset location"
    default: "US"
  
  # Cloud Function configuration
  function_name:
    type: string
    description: "Name for the Cloud Function that processes reviews"
    default: "review-analysis-function"
  
  function_memory:
    type: string
    description: "Memory allocation for Cloud Function"
    default: "512Mi"
  
  function_timeout:
    type: string
    description: "Timeout for Cloud Function execution"
    default: "60s"
  
  function_runtime:
    type: string
    description: "Runtime for Cloud Function"
    default: "python312"

# Define the infrastructure resources
resources:
  # Enable required Google Cloud APIs
  - name: enable-cloudfunctions-api
    type: google.serviceusage.v1.service
    properties:
      name: projects/${var.project_id}/services/cloudfunctions.googleapis.com
      disableDependentServices: false
    metadata:
      description: "Enable Cloud Functions API for serverless function deployment"
  
  - name: enable-translate-api
    type: google.serviceusage.v1.service
    properties:
      name: projects/${var.project_id}/services/translate.googleapis.com
      disableDependentServices: false
    metadata:
      description: "Enable Translation API for multilingual text translation"
  
  - name: enable-language-api
    type: google.serviceusage.v1.service
    properties:
      name: projects/${var.project_id}/services/language.googleapis.com
      disableDependentServices: false
    metadata:
      description: "Enable Natural Language API for sentiment analysis and entity extraction"
  
  - name: enable-bigquery-api
    type: google.serviceusage.v1.service
    properties:
      name: projects/${var.project_id}/services/bigquery.googleapis.com
      disableDependentServices: false
    metadata:
      description: "Enable BigQuery API for analytics data storage and querying"
  
  - name: enable-cloudbuild-api
    type: google.serviceusage.v1.service
    properties:
      name: projects/${var.project_id}/services/cloudbuild.googleapis.com
      disableDependentServices: false
    metadata:
      description: "Enable Cloud Build API for Cloud Functions deployment"
  
  - name: enable-storage-api
    type: google.serviceusage.v1.service
    properties:
      name: projects/${var.project_id}/services/storage-component.googleapis.com
      disableDependentServices: false
    metadata:
      description: "Enable Cloud Storage API for function source code storage"

  # Create BigQuery dataset for storing review analysis results
  - name: review-analysis-dataset
    type: google.bigquery.v2.dataset
    properties:
      datasetId: ${var.dataset_name}_${var.random_suffix}
      location: ${var.dataset_location}
      description: "Dataset for storing multilingual product review analysis results"
      access:
        - role: OWNER
          userByEmail: $(ref.cloud-function-service-account.email)
        - role: WRITER
          userByEmail: $(ref.cloud-function-service-account.email)
      labels:
        environment: "development"
        purpose: "review-analysis"
        recipe: "smart-product-review-analysis"
    dependsOn:
      - enable-bigquery-api
    metadata:
      description: "BigQuery dataset with proper access controls for review analysis data"
  
  # Create BigQuery table for review analysis results with comprehensive schema
  - name: review-analysis-table
    type: google.bigquery.v2.table
    properties:
      datasetId: $(ref.review-analysis-dataset.datasetId)
      tableId: review_analysis
      schema:
        fields:
          - name: review_id
            type: STRING
            mode: REQUIRED
            description: "Unique identifier for the product review"
          - name: original_text
            type: STRING
            mode: REQUIRED
            description: "Original review text in source language"
          - name: original_language
            type: STRING
            mode: NULLABLE
            description: "Detected source language code (ISO 639-1)"
          - name: translated_text
            type: STRING
            mode: NULLABLE
            description: "Review text translated to English"
          - name: sentiment_score
            type: FLOAT
            mode: NULLABLE
            description: "Sentiment score from -1.0 (negative) to 1.0 (positive)"
          - name: sentiment_magnitude
            type: FLOAT
            mode: NULLABLE
            description: "Sentiment magnitude indicating emotional intensity"
          - name: sentiment_label
            type: STRING
            mode: NULLABLE
            description: "Categorical sentiment label: positive, negative, or neutral"
          - name: entities
            type: STRING
            mode: NULLABLE
            description: "JSON string containing extracted entities and their metadata"
          - name: processing_timestamp
            type: TIMESTAMP
            mode: NULLABLE
            description: "Timestamp when the review was processed"
      description: "Table storing comprehensive analysis results for multilingual product reviews"
      labels:
        data-type: "review-analysis"
        source: "cloud-function"
    dependsOn:
      - review-analysis-dataset
    metadata:
      description: "Structured table for storing review analysis with proper schema and documentation"

  # Create service account for Cloud Function with least privilege access
  - name: cloud-function-service-account
    type: google.iam.v1.serviceAccount
    properties:
      accountId: review-analysis-sa-${var.random_suffix}
      displayName: "Review Analysis Cloud Function Service Account"
      description: "Service account for review analysis Cloud Function with minimal required permissions"
    metadata:
      description: "Dedicated service account following least privilege principle"

  # Grant BigQuery Data Editor role to service account for data insertion
  - name: bigquery-data-editor-binding
    type: google.cloudresourcemanager.v1.projectIamBinding
    properties:
      resource: projects/${var.project_id}
      role: roles/bigquery.dataEditor
      members:
        - serviceAccount:$(ref.cloud-function-service-account.email)
    dependsOn:
      - cloud-function-service-account
    metadata:
      description: "Grant BigQuery data modification permissions to function service account"

  # Grant Translation API user role for language detection and translation
  - name: translate-user-binding
    type: google.cloudresourcemanager.v1.projectIamBinding
    properties:
      resource: projects/${var.project_id}
      role: roles/cloudtranslate.user
      members:
        - serviceAccount:$(ref.cloud-function-service-account.email)
    dependsOn:
      - cloud-function-service-account
    metadata:
      description: "Grant Translation API access for multilingual text processing"

  # Grant Natural Language API user role for sentiment analysis
  - name: language-user-binding
    type: google.cloudresourcemanager.v1.projectIamBinding
    properties:
      resource: projects/${var.project_id}
      role: roles/cloudfunctions.invoker
      members:
        - serviceAccount:$(ref.cloud-function-service-account.email)
    dependsOn:
      - cloud-function-service-account
    metadata:
      description: "Grant Cloud Functions invoker permissions for internal service communication"

  # Create Cloud Storage bucket for Cloud Function source code
  - name: function-source-bucket
    type: google.storage.v1.bucket
    properties:
      name: ${var.project_id}-function-source-${var.random_suffix}
      location: ${var.region}
      storageClass: REGIONAL
      versioning:
        enabled: true
      lifecycle:
        rule:
          - condition:
              age: 30
            action:
              type: Delete
      labels:
        purpose: "function-source"
        environment: "development"
    dependsOn:
      - enable-storage-api
    metadata:
      description: "Storage bucket for Cloud Function source code with lifecycle management"

  # Upload Cloud Function source code as a zip file
  - name: function-source-object
    type: google.storage.v1.object
    properties:
      bucket: $(ref.function-source-bucket.name)
      name: review-analysis-function-source.zip
      # Note: In a real deployment, this would reference an actual source code zip file
      # For this Infrastructure Manager template, we're defining the structure
      contentType: application/zip
    dependsOn:
      - function-source-bucket
    metadata:
      description: "Source code archive for the review analysis Cloud Function"

  # Deploy the Cloud Function for review processing
  - name: review-analysis-function
    type: google.cloudfunctions.v1.cloudFunction
    properties:
      name: projects/${var.project_id}/locations/${var.region}/functions/${var.function_name}-${var.random_suffix}
      sourceArchiveUrl: gs://$(ref.function-source-bucket.name)/$(ref.function-source-object.name)
      entryPoint: analyze_review
      runtime: ${var.function_runtime}
      timeout: ${var.function_timeout}
      availableMemoryMb: 512
      serviceAccountEmail: $(ref.cloud-function-service-account.email)
      httpsTrigger:
        securityLevel: SECURE_ALWAYS
      environmentVariables:
        DATASET_ID: $(ref.review-analysis-dataset.datasetId)
        PROJECT_ID: ${var.project_id}
        REGION: ${var.region}
      labels:
        deployment-tool: "infrastructure-manager"
        environment: "development"
        purpose: "review-analysis"
    dependsOn:
      - enable-cloudfunctions-api
      - enable-cloudbuild-api
      - function-source-object
      - cloud-function-service-account
      - review-analysis-dataset
      - bigquery-data-editor-binding
      - translate-user-binding
      - language-user-binding
    metadata:
      description: "Serverless function for processing multilingual product reviews with AI analysis"

  # Create IAM policy to allow public access to the function (for demo purposes)
  # Note: In production, implement proper authentication and authorization
  - name: function-public-access
    type: google.cloudfunctions.v1.cloudFunction.iamBinding
    properties:
      resource: $(ref.review-analysis-function.name)
      role: roles/cloudfunctions.invoker
      members:
        - allUsers
    dependsOn:
      - review-analysis-function
    metadata:
      description: "Allow public access to function for demo purposes - restrict in production"

# Define outputs for verification and integration
outputs:
  # Project information
  project_id:
    description: "GCP Project ID where resources were deployed"
    value: ${var.project_id}
  
  region:
    description: "GCP region where resources were deployed"
    value: ${var.region}
  
  # BigQuery outputs for data access
  dataset_id:
    description: "BigQuery dataset ID for review analysis data"
    value: $(ref.review-analysis-dataset.datasetId)
  
  dataset_location:
    description: "BigQuery dataset location"
    value: $(ref.review-analysis-dataset.location)
  
  table_id:
    description: "BigQuery table ID for review analysis results"
    value: $(ref.review-analysis-table.tableId)
  
  # Cloud Function outputs for integration
  function_name:
    description: "Name of the deployed Cloud Function"
    value: $(ref.review-analysis-function.name)
  
  function_url:
    description: "HTTPS URL for the Cloud Function trigger"
    value: $(ref.review-analysis-function.httpsTrigger.url)
  
  function_service_account:
    description: "Service account email used by the Cloud Function"
    value: $(ref.cloud-function-service-account.email)
  
  # Storage outputs
  source_bucket:
    description: "Cloud Storage bucket containing function source code"
    value: $(ref.function-source-bucket.name)
  
  # Sample query for testing
  sample_query:
    description: "Sample BigQuery query to analyze processed reviews"
    value: |
      SELECT 
        sentiment_label,
        COUNT(*) as review_count,
        ROUND(AVG(sentiment_score), 3) as avg_sentiment_score
      FROM `${var.project_id}.$(ref.review-analysis-dataset.datasetId).review_analysis`
      GROUP BY sentiment_label
      ORDER BY review_count DESC

# Configuration metadata
metadata:
  version: "1.0"
  description: "Infrastructure Manager configuration for Smart Product Review Analysis with Translation and Natural Language AI"
  author: "Google Cloud Recipe Generator"
  recipe_id: "f7a8b9c2"
  category: "analytics"
  services:
    - "Translation API"
    - "Natural Language AI"
    - "Cloud Functions"
    - "BigQuery"
    - "Cloud Storage"
  estimated_cost: "$10-15 for testing"
  deployment_time: "5-10 minutes"
  
  # Best practices implemented
  best_practices:
    - "Least privilege IAM permissions"
    - "Service account isolation"
    - "Resource labeling for management"
    - "API dependency management"
    - "Lifecycle policies for cost optimization"
    - "Proper resource dependencies"
    - "Comprehensive output definitions"
    - "Environment variable configuration"
    - "Security-first design"
  
  # Security considerations
  security_notes:
    - "Service account uses minimal required permissions"
    - "HTTPS-only function triggers"
    - "Bucket versioning enabled for source code"
    - "Public function access is for demo only - implement authentication in production"
    - "All data encrypted at rest and in transit"
  
  # Customization options
  customization:
    - "Modify function memory and timeout based on workload requirements"
    - "Adjust BigQuery dataset location for data residency compliance"
    - "Implement custom IAM policies for production environments"
    - "Add monitoring and alerting configurations"
    - "Configure VPC connectivity for private deployments"