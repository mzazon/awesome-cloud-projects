# Infrastructure Manager configuration for Website Status Monitor with Cloud Functions
# This configuration deploys a serverless website monitoring API using Google Cloud Functions
# that accepts website URLs and returns detailed health information including response time,
# HTTP status codes, and availability metrics.

# Terraform block specifying required providers and versions
terraform:
  required_version: ">= 1.0"
  required_providers:
    google:
      source: "hashicorp/google"
      version: "~> 5.0"
    archive:
      source: "hashicorp/archive"
      version: "~> 2.2"

# Input variables for customization
variables:
  project_id:
    type: string
    description: "Google Cloud Project ID where resources will be created"
  
  region:
    type: string
    description: "Region for deploying Cloud Functions and other resources"
    default: "us-central1"
  
  function_name:
    type: string
    description: "Name of the Cloud Function"
    default: "website-status-monitor"
  
  memory:
    type: number
    description: "Memory allocation for the Cloud Function in MB"
    default: 256
  
  timeout:
    type: number
    description: "Timeout for the Cloud Function in seconds"
    default: 30
  
  source_dir:
    type: string
    description: "Local directory containing the function source code"
    default: "../../function-source"
  
  labels:
    type: map(string)
    description: "Labels to apply to resources for organization and billing"
    default:
      environment: "development"
      application: "website-monitor"
      managed-by: "infrastructure-manager"

# Main configuration block
resources:
  # Enable required Google Cloud APIs
  cloudfunctions_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: cloudfunctions.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false

  cloudbuild_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: cloudbuild.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false

  logging_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: logging.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false

  # Cloud Storage bucket for storing function source code
  function_source_bucket:
    type: google_storage_bucket
    properties:
      name: "${var.project_id}-${var.function_name}-source"
      location: ${var.region}
      project: ${var.project_id}
      labels: ${var.labels}
      
      # Enable uniform bucket-level access for security
      uniform_bucket_level_access: true
      
      # Lifecycle rule to clean up old source code versions
      lifecycle_rule:
        - condition:
            age: 30
          action:
            type: Delete
      
      # Versioning for source code management
      versioning:
        enabled: true

  # Archive the function source code into a ZIP file
  function_source_archive:
    type: archive
    properties:
      type: zip
      source_dir: ${var.source_dir}
      output_path: "${var.function_name}-source.zip"
      excludes:
        - "*.pyc"
        - "__pycache__"
        - ".git"
        - ".gitignore"
        - "README.md"

  # Upload the function source code to Cloud Storage
  function_source_object:
    type: google_storage_bucket_object
    properties:
      name: "${var.function_name}-source-${random_uuid.source_version.result}.zip"
      bucket: ${resource.function_source_bucket.name}
      source: ${resource.function_source_archive.output_path}
      
      # Ensure content updates trigger redeployment
      detect_md5hash: true
    
    depends_on:
      - resource.function_source_bucket
      - resource.function_source_archive

  # Generate a random UUID for source versioning
  source_version:
    type: random_uuid

  # Service account for the Cloud Function with least privilege permissions
  function_service_account:
    type: google_service_account
    properties:
      account_id: "${var.function_name}-sa"
      display_name: "Service Account for ${var.function_name} Cloud Function"
      description: "Service account used by the website status monitor Cloud Function"
      project: ${var.project_id}

  # IAM binding to allow the function to write logs
  function_logging_binding:
    type: google_project_iam_member
    properties:
      project: ${var.project_id}
      role: "roles/logging.logWriter"
      member: "serviceAccount:${resource.function_service_account.email}"
    
    depends_on:
      - resource.function_service_account

  # IAM binding to allow the function to write error reports
  function_error_reporting_binding:
    type: google_project_iam_member
    properties:
      project: ${var.project_id}
      role: "roles/errorreporting.writer"
      member: "serviceAccount:${resource.function_service_account.email}"
    
    depends_on:
      - resource.function_service_account

  # Cloud Function for website status monitoring
  website_status_monitor_function:
    type: google_cloudfunctions_function
    properties:
      name: ${var.function_name}
      project: ${var.project_id}
      region: ${var.region}
      description: "Serverless website status monitoring API that checks website health and performance metrics"
      
      # Runtime configuration
      runtime: "python312"
      available_memory_mb: ${var.memory}
      timeout: ${var.timeout}
      entry_point: "website_status_monitor"
      
      # Source code configuration
      source_archive_bucket: ${resource.function_source_bucket.name}
      source_archive_object: ${resource.function_source_object.name}
      
      # Service account configuration
      service_account_email: ${resource.function_service_account.email}
      
      # HTTP trigger configuration
      trigger:
        http_trigger:
          url: null  # Will be auto-generated
      
      # Environment variables for configuration
      environment_variables:
        FUNCTION_REGION: ${var.region}
        PROJECT_ID: ${var.project_id}
        TIMEOUT_SECONDS: "10"
        MAX_REDIRECTS: "5"
        USER_AGENT: "GCP-Website-Monitor/1.0"
      
      # Labels for resource management
      labels: ${var.labels}
      
      # Security settings
      ingress_settings: "ALLOW_ALL"
      vpc_connector: null  # No VPC connector needed for external monitoring
      
      depends_on:
        - resource.cloudfunctions_api
        - resource.cloudbuild_api
        - resource.logging_api
        - resource.function_source_object
        - resource.function_service_account
        - resource.function_logging_binding
        - resource.function_error_reporting_binding

  # IAM policy to allow unauthenticated access to the function
  function_invoker_policy:
    type: google_cloudfunctions_function_iam_member
    properties:
      project: ${var.project_id}
      region: ${var.region}
      cloud_function: ${resource.website_status_monitor_function.name}
      role: "roles/cloudfunctions.invoker"
      member: "allUsers"
    
    depends_on:
      - resource.website_status_monitor_function

  # Cloud Monitoring alert policy for function errors (optional)
  function_error_alert_policy:
    type: google_monitoring_alert_policy
    properties:
      project: ${var.project_id}
      display_name: "${var.function_name} Error Rate Alert"
      combiner: "OR"
      
      conditions:
        - display_name: "Function error rate too high"
          condition_threshold:
            filter: >
              resource.type="cloud_function"
              resource.label.function_name="${var.function_name}"
              metric.type="cloudfunctions.googleapis.com/function/execution_count"
              metric.label.status!="ok"
            
            comparison: "COMPARISON_GREATER_THAN"
            threshold_value: 5
            duration: "300s"
            
            aggregations:
              - alignment_period: "300s"
                per_series_aligner: "ALIGN_RATE"
                cross_series_reducer: "REDUCE_SUM"
      
      # Notification channels would be configured separately
      notification_channels: []
      
      # Enable the alert policy
      enabled: true
      
      depends_on:
        - resource.website_status_monitor_function

  # Cloud Logging metric for monitoring function performance
  function_response_time_metric:
    type: google_logging_metric
    properties:
      project: ${var.project_id}
      name: "${replace(var.function_name, "-", "_")}_response_time"
      description: "Response time metric for website status monitor function"
      
      # Log filter to capture function execution logs
      filter: >
        resource.type="cloud_function"
        resource.labels.function_name="${var.function_name}"
        jsonPayload.response_time_ms>0
      
      # Extract response time from logs
      metric_descriptor:
        metric_kind: "GAUGE"
        value_type: "DOUBLE"
        unit: "ms"
        
        labels:
          - key: "status_code"
            value_type: "STRING"
            description: "HTTP status code of monitored website"
          
          - key: "target_url"
            value_type: "STRING"
            description: "URL of the monitored website"
      
      # Extract values from log entries
      value_extractor: "EXTRACT(jsonPayload.response_time_ms)"
      
      label_extractors:
        status_code: "EXTRACT(jsonPayload.status_code)"
        target_url: "EXTRACT(jsonPayload.url)"
      
      depends_on:
        - resource.website_status_monitor_function

# Output values for use by other configurations or reference
outputs:
  function_url:
    description: "HTTPS URL of the deployed Cloud Function"
    value: ${resource.website_status_monitor_function.https_trigger_url}
  
  function_name:
    description: "Name of the deployed Cloud Function"
    value: ${resource.website_status_monitor_function.name}
  
  source_bucket:
    description: "Cloud Storage bucket containing function source code"
    value: ${resource.function_source_bucket.name}
  
  service_account_email:
    description: "Email of the service account used by the function"
    value: ${resource.function_service_account.email}
  
  project_id:
    description: "Google Cloud Project ID where resources were deployed"
    value: ${var.project_id}
  
  region:
    description: "Region where the Cloud Function is deployed"
    value: ${var.region}
  
  function_memory:
    description: "Memory allocation for the Cloud Function"
    value: "${var.memory}MB"
  
  function_timeout:
    description: "Timeout setting for the Cloud Function"
    value: "${var.timeout}s"

# Metadata for Infrastructure Manager
metadata:
  name: "website-status-monitor"
  description: "Infrastructure Manager configuration for deploying a serverless website status monitoring API using Cloud Functions"
  version: "1.0"
  
  # Required for Infrastructure Manager deployment
  labels:
    component: "serverless"
    use-case: "monitoring"
    runtime: "python312"
    
  # Dependencies and requirements
  requirements:
    apis:
      - "cloudfunctions.googleapis.com"
      - "cloudbuild.googleapis.com" 
      - "logging.googleapis.com"
      - "monitoring.googleapis.com"
    
    permissions:
      - "roles/cloudfunctions.developer"
      - "roles/storage.admin"
      - "roles/iam.serviceAccountUser"
      - "roles/monitoring.editor"
      - "roles/logging.configWriter"