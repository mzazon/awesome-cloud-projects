# Smart Contract Security Auditing Infrastructure Manager Configuration
# This configuration deploys a complete smart contract security auditing solution
# using Google Cloud Document AI for text extraction and Vertex AI for vulnerability analysis

# Infrastructure Manager Configuration
# Version: 1.0
# Author: Infrastructure Manager Generator
# Last Updated: 2025-01-22

imports: []

variables:
  # Project Configuration
  project_id:
    description: "Google Cloud Project ID for the smart contract security auditing solution"
    type: string
    required: true
  
  # Region and Location Configuration
  region:
    description: "Google Cloud region for deploying resources"
    type: string
    default: "us-central1"
  
  zone:
    description: "Google Cloud zone for regional resources"
    type: string
    default: "us-central1-a"
  
  # Resource Naming Configuration
  bucket_name:
    description: "Name for Cloud Storage bucket storing contract artifacts"
    type: string
    default: "smart-contract-audit-bucket"
  
  function_name:
    description: "Name for the Cloud Function analyzing contracts"
    type: string
    default: "contract-security-analyzer"
  
  processor_display_name:
    description: "Display name for Document AI processor"
    type: string
    default: "Smart Contract Security Parser"
  
  # Security and Configuration Settings
  enable_uniform_bucket_access:
    description: "Enable uniform bucket-level access for Cloud Storage"
    type: bool
    default: true
  
  enable_versioning:
    description: "Enable versioning for Cloud Storage bucket"
    type: bool
    default: true
  
  function_memory:
    description: "Memory allocation for Cloud Function (in MB)"
    type: string
    default: "1024"
  
  function_timeout:
    description: "Timeout for Cloud Function execution (in seconds)"
    type: string
    default: "540"
  
  # Labels and Metadata
  labels:
    description: "Common labels to apply to all resources"
    type: object
    default:
      application: "smart-contract-security"
      environment: "production"
      managed-by: "infrastructure-manager"
      recipe-id: "7a8f9e1d"

resources:
  # Enable required Google Cloud APIs for the solution
  enable_documentai_api:
    type: gcp-types/serviceusage-v1:services
    name: "documentai.googleapis.com"
    properties:
      name: "projects/${var.project_id}/services/documentai.googleapis.com"
    metadata:
      dependsOn: []

  enable_aiplatform_api:
    type: gcp-types/serviceusage-v1:services
    name: "aiplatform.googleapis.com"
    properties:
      name: "projects/${var.project_id}/services/aiplatform.googleapis.com"
    metadata:
      dependsOn: []

  enable_cloudfunctions_api:
    type: gcp-types/serviceusage-v1:services
    name: "cloudfunctions.googleapis.com"
    properties:
      name: "projects/${var.project_id}/services/cloudfunctions.googleapis.com"
    metadata:
      dependsOn: []

  enable_storage_api:
    type: gcp-types/serviceusage-v1:services
    name: "storage.googleapis.com"
    properties:
      name: "projects/${var.project_id}/services/storage.googleapis.com"
    metadata:
      dependsOn: []

  enable_eventarc_api:
    type: gcp-types/serviceusage-v1:services
    name: "eventarc.googleapis.com"
    properties:
      name: "projects/${var.project_id}/services/eventarc.googleapis.com"
    metadata:
      dependsOn: []

  enable_artifactregistry_api:
    type: gcp-types/serviceusage-v1:services
    name: "artifactregistry.googleapis.com"
    properties:
      name: "projects/${var.project_id}/services/artifactregistry.googleapis.com"
    metadata:
      dependsOn: []

  enable_run_api:
    type: gcp-types/serviceusage-v1:services
    name: "run.googleapis.com"
    properties:
      name: "projects/${var.project_id}/services/run.googleapis.com"
    metadata:
      dependsOn: []

  # Cloud Storage bucket for storing smart contract artifacts and audit reports
  contract_storage_bucket:
    type: gcp-types/storage-v1:buckets
    name: "${var.bucket_name}"
    properties:
      name: "${var.bucket_name}"
      project: "${var.project_id}"
      location: "${var.region}"
      storageClass: "STANDARD"
      uniformBucketLevelAccess:
        enabled: "${var.enable_uniform_bucket_access}"
      versioning:
        enabled: "${var.enable_versioning}"
      lifecycle:
        rule:
          - action:
              type: "SetStorageClass"
              storageClass: "NEARLINE"
            condition:
              age: 30
              matchesStorageClass: ["STANDARD"]
          - action:
              type: "Delete"
            condition:
              age: 365
              matchesStorageClass: ["NEARLINE", "COLDLINE"]
      labels: "${var.labels}"
    metadata:
      dependsOn:
        - "enable_storage_api"

  # Document AI processor for extracting text from smart contract files
  documentai_processor:
    type: gcp-types/documentai-v1:projects.locations.processors
    name: "smart-contract-processor"
    properties:
      parent: "projects/${var.project_id}/locations/${var.region}"
      displayName: "${var.processor_display_name}"
      type: "FORM_PARSER_PROCESSOR"
    metadata:
      dependsOn:
        - "enable_documentai_api"

  # Service account for Cloud Function with appropriate permissions
  function_service_account:
    type: gcp-types/iam-v1:projects.serviceAccounts
    name: "contract-analyzer-sa"
    properties:
      accountId: "contract-analyzer-sa"
      displayName: "Smart Contract Security Analyzer Service Account"
      description: "Service account for Cloud Function performing smart contract security analysis"
      project: "${var.project_id}"
    metadata:
      dependsOn: []

  # IAM binding for Cloud Function service account - Storage Object Admin
  function_sa_storage_binding:
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    name: "function-sa-storage-admin"
    properties:
      resource: "projects/${var.project_id}"
      role: "roles/storage.objectAdmin"
      member: "serviceAccount:contract-analyzer-sa@${var.project_id}.iam.gserviceaccount.com"
    metadata:
      dependsOn:
        - "function_service_account"

  # IAM binding for Cloud Function service account - Document AI User
  function_sa_documentai_binding:
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    name: "function-sa-documentai-user"
    properties:
      resource: "projects/${var.project_id}"
      role: "roles/documentai.apiUser"
      member: "serviceAccount:contract-analyzer-sa@${var.project_id}.iam.gserviceaccount.com"
    metadata:
      dependsOn:
        - "function_service_account"

  # IAM binding for Cloud Function service account - Vertex AI User
  function_sa_vertexai_binding:
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    name: "function-sa-vertexai-user"
    properties:
      resource: "projects/${var.project_id}"
      role: "roles/aiplatform.user"
      member: "serviceAccount:contract-analyzer-sa@${var.project_id}.iam.gserviceaccount.com"
    metadata:
      dependsOn:
        - "function_service_account"

  # IAM binding for Cloud Function service account - Logs Writer
  function_sa_logs_binding:
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    name: "function-sa-logs-writer"
    properties:
      resource: "projects/${var.project_id}"
      role: "roles/logging.logWriter"
      member: "serviceAccount:contract-analyzer-sa@${var.project_id}.iam.gserviceaccount.com"
    metadata:
      dependsOn:
        - "function_service_account"

  # Cloud Function (2nd generation) for smart contract security analysis
  contract_analyzer_function:
    type: gcp-types/cloudfunctions-v2:projects.locations.functions
    name: "${var.function_name}"
    properties:
      parent: "projects/${var.project_id}/locations/${var.region}"
      functionId: "${var.function_name}"
      description: "Analyzes smart contracts for security vulnerabilities using Document AI and Vertex AI"
      buildConfig:
        runtime: "python311"
        entryPoint: "analyze_contract_security"
        source:
          storageSource:
            bucket: "${var.bucket_name}"
            object: "function-source.zip"
        environmentVariables:
          PROCESSOR_ID: "$(ref.documentai_processor.name)"
          PROCESSOR_LOCATION: "${var.region}"
          GCP_PROJECT: "${var.project_id}"
      serviceConfig:
        serviceAccountEmail: "contract-analyzer-sa@${var.project_id}.iam.gserviceaccount.com"
        availableMemory: "${var.function_memory}Mi"
        timeoutSeconds: "${var.function_timeout}"
        environmentVariables:
          PROCESSOR_ID: "$(ref.documentai_processor.name)"
          PROCESSOR_LOCATION: "${var.region}"
          GCP_PROJECT: "${var.project_id}"
        ingressSettings: "ALLOW_INTERNAL_ONLY"
        allTrafficOnLatestRevision: true
        maxInstanceCount: 100
        maxInstanceRequestConcurrency: 1
      eventTrigger:
        triggerRegion: "${var.region}"
        eventType: "google.cloud.storage.object.v1.finalized"
        eventFilters:
          - attribute: "bucket"
            value: "${var.bucket_name}"
        serviceAccountEmail: "contract-analyzer-sa@${var.project_id}.iam.gserviceaccount.com"
      labels: "${var.labels}"
    metadata:
      dependsOn:
        - "contract_storage_bucket"
        - "documentai_processor"
        - "function_service_account"
        - "function_sa_storage_binding"
        - "function_sa_documentai_binding"
        - "function_sa_vertexai_binding"
        - "function_sa_logs_binding"
        - "enable_cloudfunctions_api"
        - "enable_eventarc_api"
        - "enable_run_api"

  # Eventarc trigger for Cloud Storage events
  storage_eventarc_trigger:
    type: gcp-types/eventarc-v1:projects.locations.triggers
    name: "contract-upload-trigger"
    properties:
      parent: "projects/${var.project_id}/locations/${var.region}"
      triggerId: "contract-upload-trigger"
      eventFilters:
        - attribute: "type"
          value: "google.cloud.storage.object.v1.finalized"
        - attribute: "bucket"
          value: "${var.bucket_name}"
      destination:
        cloudFunction: "$(ref.contract_analyzer_function.name)"
      serviceAccount: "contract-analyzer-sa@${var.project_id}.iam.gserviceaccount.com"
      labels: "${var.labels}"
    metadata:
      dependsOn:
        - "contract_analyzer_function"
        - "contract_storage_bucket"
        - "function_service_account"

  # Cloud Storage bucket notification configuration
  bucket_notification:
    type: gcp-types/storage-v1:buckets.notificationConfigs
    name: "contract-upload-notification"
    properties:
      bucket: "${var.bucket_name}"
      topic: "projects/${var.project_id}/topics/contract-analysis-topic"
      payloadFormat: "JSON_API_V1"
      eventTypes:
        - "OBJECT_FINALIZE"
      objectNamePrefix: ""
    metadata:
      dependsOn:
        - "contract_storage_bucket"

outputs:
  # Resource identifiers for verification and integration
  bucket_name:
    description: "Name of the Cloud Storage bucket for contract artifacts"
    value: "$(ref.contract_storage_bucket.name)"

  bucket_url:
    description: "URL of the Cloud Storage bucket"
    value: "gs://$(ref.contract_storage_bucket.name)"

  function_name:
    description: "Name of the deployed Cloud Function"
    value: "$(ref.contract_analyzer_function.name)"

  function_url:
    description: "URL of the deployed Cloud Function"
    value: "$(ref.contract_analyzer_function.serviceConfig.uri)"

  processor_name:
    description: "Full name of the Document AI processor"
    value: "$(ref.documentai_processor.name)"

  processor_id:
    description: "ID of the Document AI processor"
    value: "$(ref.documentai_processor.name)"

  service_account_email:
    description: "Email of the service account used by Cloud Function"
    value: "contract-analyzer-sa@${var.project_id}.iam.gserviceaccount.com"

  project_id:
    description: "Google Cloud Project ID"
    value: "${var.project_id}"

  region:
    description: "Deployment region"
    value: "${var.region}"

  # Usage instructions
  usage_instructions:
    description: "Instructions for using the deployed smart contract security auditing system"
    value: |
      Smart Contract Security Auditing System Deployed Successfully!
      
      To use the system:
      1. Upload smart contract files (.sol, .txt, .md, .pdf) to: gs://$(ref.contract_storage_bucket.name)/contracts/
      2. Upload documentation files to: gs://$(ref.contract_storage_bucket.name)/documentation/
      3. Security audit reports will be generated automatically in: gs://$(ref.contract_storage_bucket.name)/audit-reports/
      
      Monitoring:
      - View Cloud Function logs: gcloud logging read "resource.type=cloud_function AND resource.labels.function_name=${var.function_name}"
      - Check Document AI processor: gcloud documentai processors list --location=${var.region}
      
      Cost Optimization:
      - Files automatically transition to Nearline storage after 30 days
      - Old files are deleted after 365 days
      - Cloud Function scales to zero when not in use
      
      Security Features:
      - Uniform bucket-level access enabled
      - Service account with least privilege access
      - Internal-only function ingress
      - Comprehensive audit trail through Cloud Logging

# Configuration metadata for Infrastructure Manager
metadata:
  version: "1.0"
  description: "Complete infrastructure for smart contract security auditing using Document AI and Vertex AI"
  author: "Infrastructure Manager Generator"
  recipe:
    id: "7a8f9e1d"
    title: "Smart Contract Security Auditing with Document AI and Vertex AI"
    category: "security"
    difficulty: 300
    services: ["Document AI", "Vertex AI", "Cloud Functions", "Cloud Storage"]
  cost_estimate:
    description: "Estimated monthly cost for moderate usage"
    components:
      - "Cloud Storage: $1-5/month for contract storage"
      - "Document AI: $1.50 per 1,000 pages processed"
      - "Vertex AI: $0.25 per 1,000 characters for Gemini Pro"
      - "Cloud Functions: $0.40 per million invocations"
      - "Total estimated range: $15-50/month for typical enterprise usage"
  security_considerations:
    - "Service account follows principle of least privilege"
    - "Cloud Function has internal-only ingress settings"
    - "Storage bucket uses uniform bucket-level access"
    - "All resources are tagged with consistent labels"
    - "Audit trails maintained through Cloud Logging"
  compliance_features:
    - "Object versioning enabled for audit trail compliance"
    - "Automated lifecycle management for cost optimization"
    - "Comprehensive logging for security monitoring"
    - "IAM roles follow Google Cloud security best practices"