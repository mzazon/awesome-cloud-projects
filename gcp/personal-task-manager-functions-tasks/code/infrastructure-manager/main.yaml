# Infrastructure Manager configuration for Personal Task Manager with Cloud Functions and Google Tasks
# This configuration deploys a serverless REST API using Google Cloud Functions
# that integrates with Google Tasks API for centralized task management

# Import required Terraform modules and providers
imports:
  - path: https://registry.terraform.io/providers/hashicorp/google/latest
    name: google
  - path: https://registry.terraform.io/providers/hashicorp/google-beta/latest  
    name: google-beta
  - path: https://registry.terraform.io/providers/hashicorp/archive/latest
    name: archive
  - path: https://registry.terraform.io/providers/hashicorp/random/latest
    name: random

# Input variables for customization
variables:
  project_id:
    description: "Google Cloud Project ID"
    type: string
    required: true
  
  region:
    description: "Google Cloud region for resources"
    type: string
    default: "us-central1"
  
  function_name:
    description: "Name of the Cloud Function"
    type: string
    default: "task-manager"
  
  service_account_name:
    description: "Name of the service account"
    type: string
    default: "task-manager-sa"

# Resource definitions
resources:
  # Random suffix for unique resource naming
  random_suffix:
    type: random_id
    properties:
      byte_length: 3
  
  # Enable required Google Cloud APIs
  cloudfunctions_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: cloudfunctions.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false
  
  tasks_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: tasks.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false
  
  cloudbuild_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: cloudbuild.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false
  
  # Service account for Cloud Function to access Google Tasks API
  task_manager_service_account:
    type: google_service_account
    properties:
      project: ${var.project_id}
      account_id: ${var.service_account_name}
      display_name: "Task Manager Service Account"
      description: "Service account for accessing Google Tasks API from Cloud Function"
    depends_on:
      - cloudfunctions_api
      - tasks_api
  
  # Create service account key for authentication
  task_manager_service_account_key:
    type: google_service_account_key
    properties:
      service_account_id: ${task_manager_service_account.name}
      public_key_type: "TYPE_X509_PEM_FILE"
    depends_on:
      - task_manager_service_account
  
  # Cloud Storage bucket for function source code
  function_source_bucket:
    type: google_storage_bucket
    properties:
      project: ${var.project_id}
      name: ${var.project_id}-function-source-${random_suffix.hex}
      location: ${var.region}
      uniform_bucket_level_access: true
      force_destroy: true
      versioning:
        enabled: true
      lifecycle_rule:
        - condition:
            age: 90
          action:
            type: "Delete"
    depends_on:
      - cloudfunctions_api
  
  # Create function source code as a local file
  function_source_code:
    type: local_file
    properties:
      filename: "./main.py"
      content: |
        import json
        import os
        import functions_framework
        from googleapiclient.discovery import build
        from google.oauth2 import service_account
        from flask import jsonify
        
        # Initialize credentials and service
        SCOPES = ['https://www.googleapis.com/auth/tasks']
        
        def get_tasks_service():
            """Initialize Google Tasks API service with credentials."""
            credentials = service_account.Credentials.from_service_account_file(
                'credentials.json',
                scopes=SCOPES
            )
            return build('tasks', 'v1', credentials=credentials)
        
        @functions_framework.http
        def task_manager(request):
            """HTTP Cloud Function for managing Google Tasks."""
            
            # Enable CORS for web clients
            if request.method == 'OPTIONS':
                headers = {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'GET, POST, DELETE',
                    'Access-Control-Allow-Headers': 'Content-Type',
                }
                return ('', 204, headers)
            
            headers = {'Access-Control-Allow-Origin': '*'}
            
            try:
                service = get_tasks_service()
                
                if request.method == 'GET' and request.path == '/tasks':
                    # List all tasks from default task list
                    task_lists = service.tasklists().list().execute()
                    if not task_lists.get('items'):
                        return jsonify({'error': 'No task lists found'}), 404
                    
                    default_list = task_lists['items'][0]['id']
                    tasks = service.tasks().list(tasklist=default_list).execute()
                    return jsonify(tasks.get('items', [])), 200, headers
                
                elif request.method == 'POST' and request.path == '/tasks':
                    # Create a new task
                    request_json = request.get_json(silent=True)
                    if not request_json or 'title' not in request_json:
                        return jsonify({'error': 'Task title is required'}), 400
                    
                    task_lists = service.tasklists().list().execute()
                    if not task_lists.get('items'):
                        return jsonify({'error': 'No task lists found'}), 404
                    
                    default_list = task_lists['items'][0]['id']
                    task = {
                        'title': request_json['title'],
                        'notes': request_json.get('notes', '')
                    }
                    
                    result = service.tasks().insert(
                        tasklist=default_list, 
                        body=task
                    ).execute()
                    return jsonify(result), 201, headers
                
                elif request.method == 'DELETE' and '/tasks/' in request.path:
                    # Delete a specific task
                    task_id = request.path.split('/tasks/')[-1]
                    if not task_id:
                        return jsonify({'error': 'Task ID is required'}), 400
                    
                    task_lists = service.tasklists().list().execute()
                    if not task_lists.get('items'):
                        return jsonify({'error': 'No task lists found'}), 404
                    
                    default_list = task_lists['items'][0]['id']
                    service.tasks().delete(
                        tasklist=default_list, 
                        task=task_id
                    ).execute()
                    return jsonify({'message': 'Task deleted successfully'}), 200, headers
                
                else:
                    return jsonify({'error': 'Endpoint not found'}), 404, headers
                    
            except Exception as e:
                return jsonify({'error': str(e)}), 500, headers
  
  # Create requirements.txt file for Python dependencies
  function_requirements:
    type: local_file
    properties:
      filename: "./requirements.txt"
      content: |
        google-api-python-client==2.150.0
        google-auth==2.35.0
        google-auth-httplib2==0.2.0
        functions-framework==3.8.1
  
  # Create credentials.json file from service account key
  function_credentials:
    type: local_file
    properties:
      filename: "./credentials.json"
      content: ${base64decode(task_manager_service_account_key.private_key)}
    depends_on:
      - task_manager_service_account_key
  
  # Archive function source code and dependencies
  function_source_archive:
    type: archive_file
    properties:
      type: "zip"
      output_path: "./function-source.zip"
      source_dir: "./"
      excludes:
        - "function-source.zip"
        - ".terraform*"
        - "*.tf"
        - "*.yaml"
    depends_on:
      - function_source_code
      - function_requirements
      - function_credentials
  
  # Upload function source to Cloud Storage
  function_source_object:
    type: google_storage_bucket_object
    properties:
      bucket: ${function_source_bucket.name}
      name: "function-source-${random_suffix.hex}.zip"
      source: ${function_source_archive.output_path}
      content_type: "application/zip"
    depends_on:
      - function_source_bucket
      - function_source_archive
  
  # Deploy the Cloud Function
  task_manager_function:
    type: google_cloudfunctions2_function
    properties:
      project: ${var.project_id}
      name: ${var.function_name}
      location: ${var.region}
      description: "Personal Task Manager API using Google Tasks"
      
      build_config:
        runtime: "python312"
        entry_point: "task_manager"
        source:
          storage_source:
            bucket: ${function_source_bucket.name}
            object: ${function_source_object.name}
      
      service_config:
        max_instance_count: 10
        min_instance_count: 0
        available_memory: "256M"
        timeout_seconds: 60
        max_instance_request_concurrency: 80
        available_cpu: "1"
        environment_variables:
          GOOGLE_APPLICATION_CREDENTIALS: "/workspace/credentials.json"
        ingress_settings: "ALLOW_ALL"
        all_traffic_on_latest_revision: true
        service_account_email: ${task_manager_service_account.email}
    
    depends_on:
      - cloudfunctions_api
      - cloudbuild_api
      - task_manager_service_account
      - function_source_object
  
  # Make the function publicly accessible
  function_invoker_iam:
    type: google_cloudfunctions2_function_iam_member
    properties:
      project: ${var.project_id}
      location: ${var.region}
      cloud_function: ${task_manager_function.name}
      role: "roles/cloudfunctions.invoker"
      member: "allUsers"
    depends_on:
      - task_manager_function

# Output values for reference and integration
outputs:
  function_url:
    description: "URL of the deployed Cloud Function"
    value: ${task_manager_function.service_config[0].uri}
  
  service_account_email:
    description: "Email of the service account used by the function"
    value: ${task_manager_service_account.email}
  
  function_name:
    description: "Name of the deployed Cloud Function"
    value: ${task_manager_function.name}
  
  project_id:
    description: "Google Cloud Project ID"
    value: ${var.project_id}
  
  region:
    description: "Deployment region"
    value: ${var.region}
  
  storage_bucket:
    description: "Cloud Storage bucket used for function source"
    value: ${function_source_bucket.name}

# Deployment metadata
metadata:
  version: "1.0"
  description: "Personal Task Manager with Cloud Functions and Google Tasks API"
  author: "Generated from cloud recipe"
  tags:
    - serverless
    - cloud-functions
    - google-tasks-api
    - productivity
    - rest-api