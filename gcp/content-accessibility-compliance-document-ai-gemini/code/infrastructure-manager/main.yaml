# Infrastructure Manager Configuration for Content Accessibility Compliance
# This configuration deploys Document AI, Vertex AI, Cloud Functions, and Cloud Storage
# for automated WCAG 2.1 AA accessibility compliance analysis

# Metadata for Infrastructure Manager deployment
metadata:
  description: "Automated accessibility compliance system using Document AI and Gemini"
  version: "1.1"
  labels:
    environment: "production"
    solution: "accessibility-compliance"
    recipe: "content-accessibility-compliance-document-ai-gemini"

# Input variables for customization
variables:
  project_id:
    type: string
    description: "Google Cloud Project ID"
    validation:
      pattern: "^[a-z][a-z0-9-]*[a-z0-9]$"
  
  region:
    type: string
    description: "Google Cloud region for resource deployment"
    default: "us-central1"
    validation:
      pattern: "^[a-z]+-[a-z0-9]+-[a-z0-9]+$"
  
  zone:
    type: string
    description: "Google Cloud zone for zonal resources"
    default: "us-central1-a"
  
  bucket_name_prefix:
    type: string
    description: "Prefix for Cloud Storage bucket name"
    default: "accessibility-docs"
    validation:
      pattern: "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
  
  function_name:
    type: string
    description: "Name for the Cloud Function"
    default: "accessibility-analyzer"
    validation:
      pattern: "^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"
  
  processor_display_name:
    type: string
    description: "Display name for Document AI processor"
    default: "accessibility-processor"
  
  function_memory:
    type: string
    description: "Memory allocation for Cloud Function"
    default: "1Gi"
    validation:
      pattern: "^[0-9]+(Mi|Gi)$"
  
  function_timeout:
    type: string
    description: "Timeout for Cloud Function execution"
    default: "540s"
    validation:
      pattern: "^[0-9]+s$"
  
  enable_versioning:
    type: boolean
    description: "Enable versioning on Cloud Storage bucket"
    default: true
  
  storage_class:
    type: string
    description: "Storage class for Cloud Storage bucket"
    default: "STANDARD"
    validation:
      pattern: "^(STANDARD|NEARLINE|COLDLINE|ARCHIVE)$"

# Local values for computed names and configurations
locals:
  # Generate unique suffix for resource names
  random_suffix: ${substr(sha256("${var.project_id}-${var.region}"), 0, 6)}
  
  # Computed resource names
  bucket_name: "${var.bucket_name_prefix}-${local.random_suffix}"
  function_full_name: "${var.function_name}-${local.random_suffix}"
  processor_full_name: "${var.processor_display_name}-${local.random_suffix}"
  
  # Service account name for Cloud Function
  function_sa_name: "accessibility-function-sa-${local.random_suffix}"
  
  # Required APIs for the solution
  required_apis:
    - "documentai.googleapis.com"
    - "aiplatform.googleapis.com" 
    - "cloudfunctions.googleapis.com"
    - "storage.googleapis.com"
    - "cloudbuild.googleapis.com"
    - "eventarc.googleapis.com"
    - "run.googleapis.com"
    - "pubsub.googleapis.com"

# Resources configuration
resources:
  # Enable required Google Cloud APIs
  documentai_api:
    type: gcp-types/serviceusage-v1:projects.services
    name: projects/${var.project_id}/services/documentai.googleapis.com
    properties:
      name: projects/${var.project_id}/services/documentai.googleapis.com

  vertex_ai_api:
    type: gcp-types/serviceusage-v1:projects.services
    name: projects/${var.project_id}/services/aiplatform.googleapis.com
    properties:
      name: projects/${var.project_id}/services/aiplatform.googleapis.com

  cloud_functions_api:
    type: gcp-types/serviceusage-v1:projects.services
    name: projects/${var.project_id}/services/cloudfunctions.googleapis.com
    properties:
      name: projects/${var.project_id}/services/cloudfunctions.googleapis.com

  cloud_storage_api:
    type: gcp-types/serviceusage-v1:projects.services
    name: projects/${var.project_id}/services/storage.googleapis.com
    properties:
      name: projects/${var.project_id}/services/storage.googleapis.com

  cloud_build_api:
    type: gcp-types/serviceusage-v1:projects.services
    name: projects/${var.project_id}/services/cloudbuild.googleapis.com
    properties:
      name: projects/${var.project_id}/services/cloudbuild.googleapis.com

  eventarc_api:
    type: gcp-types/serviceusage-v1:projects.services
    name: projects/${var.project_id}/services/eventarc.googleapis.com
    properties:
      name: projects/${var.project_id}/services/eventarc.googleapis.com

  # Cloud Storage bucket for document processing
  accessibility_storage_bucket:
    type: gcp-types/storage-v1:buckets
    name: ${local.bucket_name}
    properties:
      name: ${local.bucket_name}
      location: ${var.region}
      storageClass: ${var.storage_class}
      uniformBucketLevelAccess:
        enabled: true
      versioning:
        enabled: ${var.enable_versioning}
      lifecycle:
        rule:
          - action:
              type: Delete
            condition:
              age: 90
              matchesStorageClass: 
                - STANDARD
          - action:
              type: SetStorageClass
              storageClass: NEARLINE
            condition:
              age: 30
              matchesStorageClass:
                - STANDARD
      labels:
        purpose: "accessibility-compliance"
        component: "document-storage"
        managed-by: "infrastructure-manager"
    metadata:
      dependsOn:
        - cloud_storage_api

  # Service Account for Cloud Function
  function_service_account:
    type: gcp-types/iam-v1:projects.serviceAccounts
    name: ${local.function_sa_name}
    properties:
      accountId: ${local.function_sa_name}
      displayName: "Accessibility Function Service Account"
      description: "Service account for accessibility compliance Cloud Function"
      project: ${var.project_id}

  # IAM binding for Document AI access
  documentai_user_binding:
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    name: documentai-user-${local.random_suffix}
    properties:
      resource: projects/${var.project_id}
      role: roles/documentai.apiUser
      member: serviceAccount:${function_service_account.email}
    metadata:
      dependsOn:
        - function_service_account

  # IAM binding for Vertex AI access
  vertex_ai_user_binding:
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    name: vertex-ai-user-${local.random_suffix}
    properties:
      resource: projects/${var.project_id}
      role: roles/aiplatform.user
      member: serviceAccount:${function_service_account.email}
    metadata:
      dependsOn:
        - function_service_account

  # IAM binding for Storage access
  storage_admin_binding:
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    name: storage-admin-${local.random_suffix}
    properties:
      resource: projects/${var.project_id}
      role: roles/storage.admin
      member: serviceAccount:${function_service_account.email}
    metadata:
      dependsOn:
        - function_service_account

  # IAM binding for Cloud Functions execution
  function_invoker_binding:
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    name: function-invoker-${local.random_suffix}
    properties:
      resource: projects/${var.project_id}
      role: roles/cloudfunctions.invoker
      member: serviceAccount:${function_service_account.email}
    metadata:
      dependsOn:
        - function_service_account

  # Document AI Processor for OCR and layout analysis
  document_ai_processor:
    type: gcp-types/documentai-v1:projects.locations.processors
    name: ${local.processor_full_name}
    properties:
      parent: projects/${var.project_id}/locations/${var.region}
      displayName: ${local.processor_full_name}
      type: OCR_PROCESSOR
      defaultProcessorVersion: ""
    metadata:
      dependsOn:
        - documentai_api

  # Cloud Function source code archive (placeholder)
  function_source_archive:
    type: gcp-types/storage-v1:objects
    name: accessibility-function-source-${local.random_suffix}.zip
    properties:
      bucket: ${accessibility_storage_bucket.name}
      name: function-source/accessibility-function-source.zip
      # Note: In a real deployment, you would upload the actual function source code
      # This is a placeholder that would be replaced with actual source code upload
      metadata:
        description: "Placeholder for Cloud Function source code"
    metadata:
      dependsOn:
        - accessibility_storage_bucket

  # Cloud Function for accessibility analysis
  accessibility_function:
    type: gcp-types/cloudfunctions-v2beta:projects.locations.functions
    name: ${local.function_full_name}
    properties:
      parent: projects/${var.project_id}/locations/${var.region}
      functionId: ${local.function_full_name}
      function:
        displayName: ${local.function_full_name}
        description: "Automated accessibility compliance analysis using Document AI and Gemini"
        buildConfig:
          runtime: python311
          entryPoint: process_accessibility_compliance
          source:
            storageSource:
              bucket: ${accessibility_storage_bucket.name}
              object: function-source/accessibility-function-source.zip
          environmentVariables:
            PROJECT_ID: ${var.project_id}
            REGION: ${var.region}
            PROCESSOR_ID: ${document_ai_processor.name}
            BUCKET_NAME: ${accessibility_storage_bucket.name}
        serviceConfig:
          serviceAccountEmail: ${function_service_account.email}
          environmentVariables:
            PROJECT_ID: ${var.project_id}
            REGION: ${var.region}
            PROCESSOR_ID: ${document_ai_processor.name}
            BUCKET_NAME: ${accessibility_storage_bucket.name}
          availableMemory: ${var.function_memory}
          timeoutSeconds: ${tonumber(replace(var.function_timeout, "s", ""))}
          maxInstanceCount: 10
          minInstanceCount: 0
          ingressSettings: ALLOW_INTERNAL_ONLY
        labels:
          purpose: "accessibility-compliance"
          component: "analysis-function"
          managed-by: "infrastructure-manager"
    metadata:
      dependsOn:
        - cloud_functions_api
        - function_service_account
        - document_ai_processor
        - function_source_archive
        - documentai_user_binding
        - vertex_ai_user_binding
        - storage_admin_binding

  # Eventarc trigger for Cloud Storage events
  storage_trigger:
    type: gcp-types/eventarc-v1:projects.locations.triggers
    name: accessibility-storage-trigger-${local.random_suffix}
    properties:
      parent: projects/${var.project_id}/locations/${var.region}
      triggerId: accessibility-storage-trigger-${local.random_suffix}
      eventFilters:
        - attribute: type
          value: google.cloud.storage.object.v1.finalized
        - attribute: bucket
          value: ${accessibility_storage_bucket.name}
        - attribute: objectNamePrefix
          value: uploads/
      destination:
        cloudFunction: ${accessibility_function.name}
      serviceAccount: ${function_service_account.email}
      labels:
        purpose: "accessibility-compliance"
        component: "storage-trigger"
        managed-by: "infrastructure-manager"
    metadata:
      dependsOn:
        - eventarc_api
        - accessibility_function
        - accessibility_storage_bucket
        - function_service_account

  # Cloud Storage bucket folders (created via objects)
  uploads_folder_marker:
    type: gcp-types/storage-v1:objects
    name: uploads/.gitkeep
    properties:
      bucket: ${accessibility_storage_bucket.name}
      name: uploads/.gitkeep
      metadata:
        description: "Marker file for uploads folder"
    metadata:
      dependsOn:
        - accessibility_storage_bucket

  reports_folder_marker:
    type: gcp-types/storage-v1:objects
    name: reports/.gitkeep
    properties:
      bucket: ${accessibility_storage_bucket.name}
      name: reports/.gitkeep
      metadata:
        description: "Marker file for reports folder"
    metadata:
      dependsOn:
        - accessibility_storage_bucket

  processed_folder_marker:
    type: gcp-types/storage-v1:objects
    name: processed/.gitkeep
    properties:
      bucket: ${accessibility_storage_bucket.name}
      name: processed/.gitkeep
      metadata:
        description: "Marker file for processed folder"
    metadata:
      dependsOn:
        - accessibility_storage_bucket

# Output values for verification and integration
outputs:
  project_id:
    description: "Google Cloud Project ID"
    value: ${var.project_id}

  region:
    description: "Deployment region"
    value: ${var.region}

  storage_bucket_name:
    description: "Cloud Storage bucket name for document processing"
    value: ${accessibility_storage_bucket.name}

  storage_bucket_url:
    description: "Cloud Storage bucket URL"
    value: "gs://${accessibility_storage_bucket.name}"

  uploads_url:
    description: "Upload folder URL for document submission"
    value: "gs://${accessibility_storage_bucket.name}/uploads/"

  reports_url:
    description: "Reports folder URL for accessing results"
    value: "gs://${accessibility_storage_bucket.name}/reports/"

  function_name:
    description: "Cloud Function name for accessibility analysis"
    value: ${accessibility_function.name}

  function_url:
    description: "Cloud Function trigger URL"
    value: ${accessibility_function.serviceConfig.uri}

  document_ai_processor_id:
    description: "Document AI processor ID"
    value: ${document_ai_processor.name}

  service_account_email:
    description: "Service account email for the Cloud Function"
    value: ${function_service_account.email}

  eventarc_trigger_name:
    description: "Eventarc trigger name for storage events"
    value: ${storage_trigger.name}

  # Usage instructions
  usage_instructions:
    description: "Instructions for using the accessibility compliance system"
    value: |
      To use the accessibility compliance system:
      
      1. Upload documents to: gs://${accessibility_storage_bucket.name}/uploads/
      2. Processing will automatically begin when files are uploaded
      3. View results in: gs://${accessibility_storage_bucket.name}/reports/
      4. Processed files are moved to: gs://${accessibility_storage_bucket.name}/processed/
      
      Example upload command:
      gsutil cp your-document.pdf gs://${accessibility_storage_bucket.name}/uploads/
      
      Monitor function logs:
      gcloud functions logs read ${local.function_full_name} --region=${var.region}

  # Cost estimation
  estimated_monthly_cost:
    description: "Estimated monthly cost for processing 100 documents"
    value: |
      Estimated costs (USD per month for ~100 documents):
      - Document AI OCR: $15-30 (based on pages processed)
      - Vertex AI Gemini: $10-20 (based on tokens processed)
      - Cloud Functions: $1-5 (based on execution time)
      - Cloud Storage: $1-3 (based on storage used)
      - Eventarc: $0.40 (per million events)
      
      Total estimated: $27-58 per month
      
      Note: Costs vary based on document size, complexity, and processing frequency.
      Monitor actual usage through Google Cloud Billing console.

# Validation and deployment notes
validation:
  - name: "API enablement"
    description: "Verify all required APIs are enabled"
    command: "gcloud services list --enabled --filter='name:(documentai.googleapis.com OR aiplatform.googleapis.com OR cloudfunctions.googleapis.com)'"
  
  - name: "Storage bucket creation"
    description: "Verify storage bucket exists and is accessible"
    command: "gsutil ls -b gs://${local.bucket_name}"
  
  - name: "Function deployment"
    description: "Verify Cloud Function is deployed and healthy"
    command: "gcloud functions describe ${local.function_full_name} --region=${var.region} --gen2"
  
  - name: "Document AI processor"
    description: "Verify Document AI processor is created and enabled"
    command: "gcloud documentai processors list --location=${var.region}"
  
  - name: "Eventarc trigger"
    description: "Verify storage trigger is active"
    command: "gcloud eventarc triggers list --location=${var.region}"

# Security considerations
security_notes: |
  This infrastructure implements several security best practices:
  
  1. Least Privilege IAM: Service account has minimal required permissions
  2. Private Function: Cloud Function only allows internal traffic
  3. Uniform Bucket Access: Consistent IAM permissions across bucket objects
  4. Encryption: All data encrypted at rest and in transit by default
  5. Lifecycle Management: Automatic cleanup of old documents to minimize exposure
  
  Additional security recommendations:
  - Enable VPC Service Controls for additional network security
  - Implement Cloud KMS for customer-managed encryption keys
  - Set up Cloud Security Command Center for monitoring
  - Configure Cloud Audit Logs for compliance tracking
  - Implement Cloud DLP for sensitive data detection in documents

# Troubleshooting guide
troubleshooting: |
  Common issues and resolutions:
  
  1. Function not triggering:
     - Check Eventarc trigger status: gcloud eventarc triggers list
     - Verify files are uploaded to uploads/ folder specifically
     - Check function logs for errors
  
  2. Document AI processing errors:
     - Verify processor is enabled and in correct region
     - Check file format (PDF recommended)
     - Ensure file size is under 20MB limit
  
  3. Gemini API errors:
     - Verify Vertex AI API is enabled
     - Check service account has aiplatform.user role
     - Monitor API quotas and limits
  
  4. Storage access issues:
     - Verify service account has storage.admin role
     - Check bucket permissions and uniform access settings
     - Ensure bucket exists in correct region
  
  Monitor all components:
  gcloud logging read "resource.type=cloud_function AND resource.labels.function_name=${local.function_full_name}" --limit=50