#!/bin/bash

# =============================================================================
# Automated Threat Response with Unified Security and Functions - Destroy Script
# =============================================================================
# This script safely removes all resources created by the deploy script
# including Cloud Functions, Pub/Sub topics, log sinks, and monitoring
# 
# Prerequisites:
# - Google Cloud CLI installed and configured
# - Same permissions as deploy script
# - Access to deployment-info.txt file (generated by deploy script)
# =============================================================================

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Error handling
error_exit() {
    log_error "$1"
    exit 1
}

# Configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly DEPLOYMENT_INFO_FILE="${SCRIPT_DIR}/deployment-info.txt"

# Global variables for resource names
PROJECT_ID=""
REGION=""
ZONE=""
RANDOM_SUFFIX=""
TOPIC_NAME=""
SUBSCRIPTION_NAME=""
LOG_SINK_NAME=""

# Function to check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check if gcloud is installed
    if ! command -v gcloud &> /dev/null; then
        error_exit "Google Cloud CLI is not installed. Please install it first."
    fi
    
    # Check if user is authenticated
    if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
        error_exit "Not authenticated with Google Cloud. Run 'gcloud auth login' first."
    fi
    
    log_success "Prerequisites check completed"
}

# Function to load deployment information
load_deployment_info() {
    log_info "Loading deployment information..."
    
    if [[ ! -f "${DEPLOYMENT_INFO_FILE}" ]]; then
        log_warning "Deployment info file not found: ${DEPLOYMENT_INFO_FILE}"
        log_warning "Attempting to discover resources using current project..."
        discover_resources
        return
    fi
    
    # Source the deployment info file
    source "${DEPLOYMENT_INFO_FILE}"
    
    # Validate required variables
    if [[ -z "${PROJECT_ID:-}" ]]; then
        error_exit "PROJECT_ID not found in deployment info"
    fi
    
    log_success "Deployment information loaded"
    log_info "Project ID: ${PROJECT_ID}"
    log_info "Region: ${REGION:-unknown}"
    log_info "Random Suffix: ${RANDOM_SUFFIX:-unknown}"
}

# Function to discover resources when deployment info is missing
discover_resources() {
    log_info "Discovering resources..."
    
    # Get current project
    PROJECT_ID=$(gcloud config get-value project 2>/dev/null || echo "")
    if [[ -z "${PROJECT_ID}" ]]; then
        error_exit "No project configured. Run 'gcloud config set project PROJECT_ID' first."
    fi
    
    # Set gcloud project
    gcloud config set project "${PROJECT_ID}"
    
    log_success "Using project: ${PROJECT_ID}"
    log_warning "Some resources may not be found without deployment info file"
}

# Function to confirm destruction
confirm_destruction() {
    echo
    log_warning "This script will permanently delete the following resources:"
    echo "  - Cloud Functions (security-triage, automated-remediation, security-notification)"
    echo "  - Pub/Sub topics and subscriptions"
    echo "  - Cloud Logging sinks"
    echo "  - Custom monitoring metrics"
    echo "  - IAM policy bindings"
    echo
    log_warning "This action CANNOT be undone!"
    echo
    
    if [[ "${FORCE_DESTROY:-}" == "true" ]]; then
        log_warning "Force destroy enabled, skipping confirmation"
        return
    fi
    
    read -p "Are you sure you want to continue? (type 'yes' to confirm): " -r
    if [[ ! $REPLY =~ ^yes$ ]]; then
        log_info "Destruction cancelled by user"
        exit 0
    fi
    
    echo
    log_info "Proceeding with resource destruction..."
}

# Function to delete Cloud Functions
delete_cloud_functions() {
    log_info "Deleting Cloud Functions..."
    
    local functions=(
        "security-triage"
        "automated-remediation" 
        "security-notification"
    )
    
    for func in "${functions[@]}"; do
        log_info "Deleting function: ${func}"
        if gcloud functions describe "${func}" &> /dev/null; then
            gcloud functions delete "${func}" --quiet || log_warning "Failed to delete function ${func}"
            log_success "Function ${func} deleted"
        else
            log_warning "Function ${func} not found (may have been deleted already)"
        fi
    done
    
    log_success "Cloud Functions cleanup completed"
}

# Function to delete Pub/Sub resources
delete_pubsub_resources() {
    log_info "Deleting Pub/Sub resources..."
    
    # Define subscriptions and their topics
    local subscriptions=(
        "${SUBSCRIPTION_NAME:-}"
        "threat-remediation-sub"
        "threat-notification-sub"
    )
    
    local topics=(
        "${TOPIC_NAME:-}"
        "threat-remediation-topic"
        "threat-notification-topic"
    )
    
    # Delete subscriptions first
    log_info "Deleting Pub/Sub subscriptions..."
    for sub in "${subscriptions[@]}"; do
        if [[ -n "${sub}" ]]; then
            log_info "Deleting subscription: ${sub}"
            if gcloud pubsub subscriptions describe "${sub}" &> /dev/null; then
                gcloud pubsub subscriptions delete "${sub}" --quiet || log_warning "Failed to delete subscription ${sub}"
                log_success "Subscription ${sub} deleted"
            else
                log_warning "Subscription ${sub} not found"
            fi
        fi
    done
    
    # Delete topics
    log_info "Deleting Pub/Sub topics..."
    for topic in "${topics[@]}"; do
        if [[ -n "${topic}" ]]; then
            log_info "Deleting topic: ${topic}"
            if gcloud pubsub topics describe "${topic}" &> /dev/null; then
                gcloud pubsub topics delete "${topic}" --quiet || log_warning "Failed to delete topic ${topic}"
                log_success "Topic ${topic} deleted"
            else
                log_warning "Topic ${topic} not found"
            fi
        fi
    done
    
    # If no specific topic names, try to find and delete security-related topics
    if [[ -z "${TOPIC_NAME:-}" ]]; then
        log_info "Searching for security-related topics..."
        local found_topics
        found_topics=$(gcloud pubsub topics list --filter="name ~ threat-response" --format="value(name)" 2>/dev/null || echo "")
        
        for topic_path in ${found_topics}; do
            local topic_name
            topic_name=$(basename "${topic_path}")
            log_info "Found and deleting topic: ${topic_name}"
            gcloud pubsub topics delete "${topic_name}" --quiet || log_warning "Failed to delete discovered topic ${topic_name}"
        done
    fi
    
    log_success "Pub/Sub resources cleanup completed"
}

# Function to delete logging sinks
delete_logging_sinks() {
    log_info "Deleting Cloud Logging sinks..."
    
    if [[ -n "${LOG_SINK_NAME:-}" ]]; then
        log_info "Deleting log sink: ${LOG_SINK_NAME}"
        if gcloud logging sinks describe "${LOG_SINK_NAME}" &> /dev/null; then
            gcloud logging sinks delete "${LOG_SINK_NAME}" --quiet || log_warning "Failed to delete log sink ${LOG_SINK_NAME}"
            log_success "Log sink ${LOG_SINK_NAME} deleted"
        else
            log_warning "Log sink ${LOG_SINK_NAME} not found"
        fi
    else
        # Search for security-related sinks
        log_info "Searching for security-related log sinks..."
        local found_sinks
        found_sinks=$(gcloud logging sinks list --filter="name ~ security-findings" --format="value(name)" 2>/dev/null || echo "")
        
        for sink in ${found_sinks}; do
            log_info "Found and deleting log sink: ${sink}"
            gcloud logging sinks delete "${sink}" --quiet || log_warning "Failed to delete discovered sink ${sink}"
        done
    fi
    
    log_success "Logging sinks cleanup completed"
}

# Function to delete custom monitoring metrics
delete_monitoring_metrics() {
    log_info "Deleting custom monitoring metrics..."
    
    local custom_metric="custom.googleapis.com/security/findings_processed"
    
    log_info "Deleting custom metric: ${custom_metric}"
    if gcloud monitoring metrics descriptors describe "${custom_metric}" &> /dev/null; then
        gcloud monitoring metrics descriptors delete "${custom_metric}" --quiet || log_warning "Failed to delete custom metric"
        log_success "Custom metric deleted"
    else
        log_warning "Custom metric not found (may have been deleted already)"
    fi
    
    log_success "Monitoring metrics cleanup completed"
}

# Function to clean up IAM bindings
cleanup_iam_bindings() {
    log_info "Cleaning up IAM policy bindings..."
    
    # Note: IAM bindings for log sinks are automatically cleaned up when sinks are deleted
    # Additional IAM cleanup would go here if needed
    
    log_success "IAM cleanup completed"
}

# Function to delete deployment info file
cleanup_deployment_info() {
    log_info "Cleaning up deployment information..."
    
    if [[ -f "${DEPLOYMENT_INFO_FILE}" ]]; then
        rm -f "${DEPLOYMENT_INFO_FILE}"
        log_success "Deployment info file deleted"
    else
        log_warning "Deployment info file not found"
    fi
}

# Function to validate destruction
validate_destruction() {
    log_info "Validating resource destruction..."
    
    local validation_errors=0
    
    # Check Cloud Functions
    local remaining_functions
    remaining_functions=$(gcloud functions list --filter="name ~ security" --format="value(name)" 2>/dev/null || echo "")
    if [[ -n "${remaining_functions}" ]]; then
        log_warning "Some Cloud Functions still exist: ${remaining_functions}"
        ((validation_errors++))
    fi
    
    # Check Pub/Sub topics
    local remaining_topics
    remaining_topics=$(gcloud pubsub topics list --filter="name ~ threat" --format="value(name)" 2>/dev/null || echo "")
    if [[ -n "${remaining_topics}" ]]; then
        log_warning "Some Pub/Sub topics still exist: ${remaining_topics}"
        ((validation_errors++))
    fi
    
    # Check log sinks
    local remaining_sinks
    remaining_sinks=$(gcloud logging sinks list --filter="name ~ security" --format="value(name)" 2>/dev/null || echo "")
    if [[ -n "${remaining_sinks}" ]]; then
        log_warning "Some log sinks still exist: ${remaining_sinks}"
        ((validation_errors++))
    fi
    
    if [[ ${validation_errors} -eq 0 ]]; then
        log_success "All resources successfully destroyed"
    else
        log_warning "Some resources may still exist. Please check manually."
        log_info "You can re-run this script to attempt cleanup of remaining resources."
    fi
}

# Function to show cleanup summary
show_cleanup_summary() {
    echo
    log_info "=== CLEANUP SUMMARY ==="
    echo "The following resources have been removed:"
    echo "  ✓ Cloud Functions (security-triage, automated-remediation, security-notification)"
    echo "  ✓ Pub/Sub topics and subscriptions"
    echo "  ✓ Cloud Logging sinks"
    echo "  ✓ Custom monitoring metrics"
    echo "  ✓ IAM policy bindings"
    echo "  ✓ Deployment information files"
    echo
    
    log_info "=== MANUAL VERIFICATION ==="
    echo "You may want to manually verify that the following are cleaned up:"
    echo "1. Check Cloud Console for any remaining functions or topics"
    echo "2. Review Cloud Monitoring for any custom metrics"
    echo "3. Verify Security Command Center settings if modified"
    echo
    
    log_success "Automated threat response system cleanup completed!"
}

# Function to handle graceful interruption
handle_interrupt() {
    log_warning "Destruction interrupted by user"
    log_info "Some resources may have been partially deleted"
    log_info "Re-run this script to complete the cleanup"
    exit 130
}

# Main destruction function
main() {
    # Handle Ctrl+C gracefully
    trap handle_interrupt SIGINT SIGTERM
    
    echo "=== Automated Threat Response Destruction ==="
    echo "This script will safely remove all deployed resources"
    echo
    
    check_prerequisites
    load_deployment_info
    confirm_destruction
    
    # Perform cleanup in reverse order of creation
    delete_cloud_functions
    delete_pubsub_resources
    delete_logging_sinks
    delete_monitoring_metrics
    cleanup_iam_bindings
    cleanup_deployment_info
    
    # Validate cleanup
    validate_destruction
    show_cleanup_summary
}

# Support for command line options
while [[ $# -gt 0 ]]; do
    case $1 in
        --force)
            export FORCE_DESTROY="true"
            log_warning "Force destroy enabled - will not prompt for confirmation"
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --force    Skip confirmation prompts"
            echo "  --help     Show this help message"
            echo ""
            echo "This script removes all resources created by the deploy script."
            echo "It reads deployment information from deployment-info.txt if available."
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Script execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi