# Infrastructure Manager Configuration for Automated Event Creation with Apps Script and Calendar API
# This configuration sets up the necessary Google Cloud resources for serverless event automation
# using Google Apps Script and the Calendar API

# Metadata for this Infrastructure Manager deployment
metadata:
  name: event-automation-infrastructure
  description: "Automated event creation system using Apps Script and Calendar API"
  version: "1.0"
  created_date: "2025-07-12"

# Import required deployment manager templates and modules
imports:
  - path: templates/apps-script-project.jinja
    name: apps-script-template
  - path: templates/sheets-workspace.jinja
    name: sheets-template
  - path: templates/iam-service-account.jinja
    name: iam-template

# Global configuration parameters
config:
  # Project configuration
  project_id: ${PROJECT_ID}
  region: us-central1
  zone: us-central1-a
  
  # Resource naming configuration
  resource_prefix: event-automation
  environment: production
  
  # Apps Script configuration
  apps_script_title: "Event Automation Script"
  apps_script_description: "Automated event creation from Google Sheets to Calendar"
  
  # Google Sheets configuration
  sheet_name: "Event Schedule"
  sheet_headers:
    - "Title"
    - "Date" 
    - "Start Time"
    - "End Time"
    - "Description"
    - "Location"
    - "Attendees"
  
  # Calendar configuration
  calendar_scope: "https://www.googleapis.com/auth/calendar"
  sheets_scope: "https://www.googleapis.com/auth/spreadsheets"
  gmail_scope: "https://www.googleapis.com/auth/gmail.send"

# Resource definitions
resources:
  # Enable required Google Cloud APIs
  - name: enable-apps-script-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${PROJECT_ID}/services/script.googleapis.com
      
  - name: enable-sheets-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${PROJECT_ID}/services/sheets.googleapis.com
      
  - name: enable-calendar-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${PROJECT_ID}/services/calendar-json.googleapis.com
      
  - name: enable-gmail-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${PROJECT_ID}/services/gmail.googleapis.com

  # Service account for Apps Script execution with proper permissions
  - name: apps-script-service-account
    type: gcp-types/iam-v1:projects.serviceAccounts
    properties:
      accountId: $(ref.resource_prefix)-service-account
      serviceAccount:
        displayName: "Event Automation Service Account"
        description: "Service account for automated event creation via Apps Script"
        # Enable domain-wide delegation for workspace integration
        oauth2ClientId: auto-generated
    metadata:
      dependsOn:
        - enable-apps-script-api
        - enable-sheets-api
        - enable-calendar-api

  # IAM policy binding for service account - Apps Script execution permissions
  - name: apps-script-executor-binding
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    properties:
      resource: projects/${PROJECT_ID}
      role: roles/script.developer
      member: serviceAccount:$(ref.apps-script-service-account.email)
    metadata:
      dependsOn:
        - apps-script-service-account

  # IAM policy binding for service account - Sheets access permissions
  - name: sheets-editor-binding
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    properties:
      resource: projects/${PROJECT_ID}
      role: roles/sheets.editor
      member: serviceAccount:$(ref.apps-script-service-account.email)
    metadata:
      dependsOn:
        - apps-script-service-account

  # IAM policy binding for service account - Calendar access permissions
  - name: calendar-editor-binding
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    properties:
      resource: projects/${PROJECT_ID}
      role: roles/calendar.editor
      member: serviceAccount:$(ref.apps-script-service-account.email)
    metadata:
      dependsOn:
        - apps-script-service-account

  # IAM policy binding for service account - Gmail sending permissions
  - name: gmail-sender-binding
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    properties:
      resource: projects/${PROJECT_ID}
      role: roles/gmail.composer
      member: serviceAccount:$(ref.apps-script-service-account.email)
    metadata:
      dependsOn:
        - apps-script-service-account

  # Google Sheets resource for event data storage
  - name: event-schedule-sheet
    type: gcp-types/sheets-v4:spreadsheets
    properties:
      properties:
        title: $(ref.config.sheet_name)
        locale: "en_US"
        autoRecalc: "ON_CHANGE"
        timeZone: "America/New_York"
      sheets:
        - properties:
            title: "Events"
            gridProperties:
              rowCount: 1000
              columnCount: 10
              frozenRowCount: 1
            tabColor:
              red: 0.2
              green: 0.6
              blue: 1.0
      # Initialize with header row
      valueInputOption: RAW
      data:
        - range: "Events!A1:G1"
          majorDimension: ROWS
          values:
            - $(ref.config.sheet_headers)
    metadata:
      dependsOn:
        - enable-sheets-api
        - sheets-editor-binding

  # Apps Script project resource
  - name: event-automation-script-project
    type: gcp-types/script-v1:projects
    properties:
      title: $(ref.config.apps_script_title)
      parentId: ${PROJECT_ID}
      # Apps Script project configuration
      manifest:
        timeZone: "America/New_York"
        dependencies:
          enabledAdvancedServices:
            - userSymbol: "Calendar"
              serviceId: "calendar"
              version: "v3"
            - userSymbol: "Sheets"
              serviceId: "sheets" 
              version: "v4"
            - userSymbol: "Gmail"
              serviceId: "gmail"
              version: "v1"
        oauthScopes:
          - $(ref.config.calendar_scope)
          - $(ref.config.sheets_scope)
          - $(ref.config.gmail_scope)
          - "https://www.googleapis.com/auth/script.external_request"
        # Library dependencies for enhanced functionality
        libraries:
          - userSymbol: "OAuth2"
            libraryId: "1B7FSreBSWUhKWh2k8MIBbGrk3aIoZy7MvD5nqCK-GQb_jUF5cgCPm9VN"
            version: "43"
            developmentMode: false
      # Source code files for Apps Script project
      files:
        - name: "Code"
          type: "SERVER_JS"
          source: |
            /**
             * Event Automation Script - Main Functions
             * Automated event creation from Google Sheets to Calendar
             * 
             * This script provides serverless automation for creating calendar events
             * from structured data in Google Sheets with comprehensive error handling
             * and notification capabilities.
             */
            
            // Configuration constants
            const CONFIG = {
              SHEET_ID: '$(ref.event-schedule-sheet.spreadsheetId)',
              CALENDAR_ID: 'primary',
              EMAIL_NOTIFICATIONS: true,
              DUPLICATE_CHECK: true,
              EXECUTION_DELAY: 500, // milliseconds between API calls
              MAX_RETRIES: 3
            };
            
            /**
             * Main automation function - orchestrates the complete workflow
             * Reads event data from spreadsheet and creates calendar events
             * Provides comprehensive logging and error handling
             */
            function automateEventCreation() {
              console.log('🚀 Starting automated event creation process...');
              
              try {
                // Initialize execution metrics
                const startTime = new Date();
                let successCount = 0;
                let errorCount = 0;
                const processedEvents = [];
                
                // Read event data from spreadsheet
                console.log('📋 Reading event data from spreadsheet...');
                const events = readEventData();
                
                if (events.length === 0) {
                  console.log('📋 No events found to process');
                  return {
                    success: true,
                    message: 'No events to process',
                    processed: 0,
                    errors: 0
                  };
                }
                
                console.log(`📅 Found ${events.length} events to process`);
                
                // Process each event with progress tracking
                events.forEach((eventData, index) => {
                  console.log(`📅 Processing event ${index + 1}/${events.length}: ${eventData.title}`);
                  
                  const result = createCalendarEventWithRetry(eventData);
                  if (result.success) {
                    successCount++;
                    processedEvents.push({
                      title: eventData.title,
                      date: eventData.date,
                      status: 'success',
                      eventId: result.eventId
                    });
                  } else {
                    errorCount++;
                    processedEvents.push({
                      title: eventData.title,
                      date: eventData.date,
                      status: 'error',
                      error: result.error
                    });
                  }
                  
                  // Rate limiting to avoid API quotas
                  if (index < events.length - 1) {
                    Utilities.sleep(CONFIG.EXECUTION_DELAY);
                  }
                });
                
                // Calculate execution metrics
                const executionTime = new Date() - startTime;
                const successRate = Math.round((successCount / events.length) * 100);
                
                console.log(`🎯 Automation complete! Created: ${successCount}, Errors: ${errorCount}`);
                console.log(`⏱️ Execution time: ${executionTime}ms, Success rate: ${successRate}%`);
                
                // Send comprehensive summary email
                if (CONFIG.EMAIL_NOTIFICATIONS && (successCount > 0 || errorCount > 0)) {
                  sendDetailedSummaryEmail(successCount, errorCount, processedEvents, executionTime);
                }
                
                return {
                  success: true,
                  processed: successCount,
                  errors: errorCount,
                  executionTime: executionTime,
                  successRate: successRate
                };
                
              } catch (error) {
                console.error('💥 Fatal error in automation:', error.toString());
                
                // Send error notification email
                if (CONFIG.EMAIL_NOTIFICATIONS) {
                  sendErrorNotificationEmail(error);
                }
                
                throw error;
              }
            }
            
            /**
             * Reads event data from the configured Google Sheet
             * Validates and formats data for calendar event creation
             * @returns {Array} Array of formatted event objects
             */
            function readEventData() {
              try {
                console.log(`📊 Opening spreadsheet: ${CONFIG.SHEET_ID}`);
                const spreadsheet = SpreadsheetApp.openById(CONFIG.SHEET_ID);
                const sheet = spreadsheet.getActiveSheet();
                
                // Validate sheet structure
                const lastRow = sheet.getLastRow();
                const lastCol = sheet.getLastColumn();
                
                if (lastRow <= 1) {
                  console.log('📋 No data rows found in spreadsheet');
                  return [];
                }
                
                if (lastCol < 7) {
                  throw new Error('Spreadsheet must have at least 7 columns (Title, Date, Start Time, End Time, Description, Location, Attendees)');
                }
                
                // Read all data excluding header row
                const dataRange = sheet.getRange(2, 1, lastRow - 1, 7);
                const eventData = dataRange.getValues();
                
                // Filter and validate event data
                const validEvents = eventData
                  .filter(row => row[0] && row[1] && row[2] && row[3]) // Required fields
                  .map((row, index) => {
                    try {
                      return {
                        title: String(row[0]).trim(),
                        date: formatDate(row[1]),
                        startTime: String(row[2]).trim(),
                        endTime: String(row[3]).trim(),
                        description: String(row[4] || '').trim(),
                        location: String(row[5] || '').trim(),
                        attendees: parseAttendees(row[6]),
                        sourceRow: index + 2 // Track source row for debugging
                      };
                    } catch (parseError) {
                      console.error(`❌ Error parsing row ${index + 2}:`, parseError.toString());
                      return null;
                    }
                  })
                  .filter(event => event !== null);
                
                console.log(`✅ Successfully parsed ${validEvents.length} valid events`);
                return validEvents;
                
              } catch (error) {
                console.error('❌ Error reading event data:', error.toString());
                throw new Error(`Failed to read event data: ${error.message}`);
              }
            }
            
            /**
             * Creates a calendar event with retry logic
             * Implements comprehensive error handling and duplicate detection
             * @param {Object} eventData - Formatted event data object
             * @returns {Object} Result object with success status and details
             */
            function createCalendarEventWithRetry(eventData) {
              let lastError = null;
              
              for (let attempt = 1; attempt <= CONFIG.MAX_RETRIES; attempt++) {
                try {
                  console.log(`🔄 Attempt ${attempt}/${CONFIG.MAX_RETRIES} for event: ${eventData.title}`);
                  
                  const result = createCalendarEvent(eventData);
                  if (result.success) {
                    console.log(`✅ Successfully created event on attempt ${attempt}`);
                    return result;
                  }
                  
                  lastError = result.error;
                  
                  // Wait before retry (exponential backoff)
                  if (attempt < CONFIG.MAX_RETRIES) {
                    const delay = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s
                    console.log(`⏳ Waiting ${delay}ms before retry...`);
                    Utilities.sleep(delay);
                  }
                  
                } catch (error) {
                  lastError = error.toString();
                  console.error(`❌ Attempt ${attempt} failed:`, lastError);
                  
                  if (attempt < CONFIG.MAX_RETRIES) {
                    Utilities.sleep(Math.pow(2, attempt) * 1000);
                  }
                }
              }
              
              console.error(`💥 All attempts failed for event: ${eventData.title}`);
              return {
                success: false,
                error: lastError || 'Unknown error after all retries',
                attempts: CONFIG.MAX_RETRIES
              };
            }
            
            /**
             * Creates a single calendar event using the Calendar API
             * Handles date/time parsing, duplicate detection, and attendee management
             * @param {Object} eventData - Event data object
             * @returns {Object} Creation result with success status
             */
            function createCalendarEvent(eventData) {
              try {
                // Get calendar instance
                const calendar = CalendarApp.getDefaultCalendar();
                
                // Parse and validate date/time
                const eventDate = parseEventDate(eventData.date);
                if (!eventDate) {
                  return {
                    success: false,
                    error: `Invalid date format: ${eventData.date}`
                  };
                }
                
                const startDateTime = parseEventDateTime(eventDate, eventData.startTime);
                const endDateTime = parseEventDateTime(eventDate, eventData.endTime);
                
                if (!startDateTime || !endDateTime) {
                  return {
                    success: false,
                    error: `Invalid time format - Start: ${eventData.startTime}, End: ${eventData.endTime}`
                  };
                }
                
                if (startDateTime >= endDateTime) {
                  return {
                    success: false,
                    error: 'End time must be after start time'
                  };
                }
                
                // Duplicate detection
                if (CONFIG.DUPLICATE_CHECK) {
                  const existingEvents = calendar.getEventsForDay(eventDate);
                  const isDuplicate = existingEvents.some(event => 
                    event.getTitle() === eventData.title && 
                    Math.abs(event.getStartTime().getTime() - startDateTime.getTime()) < 60000 // 1 minute tolerance
                  );
                  
                  if (isDuplicate) {
                    console.log(`⚠️ Event "${eventData.title}" already exists, skipping...`);
                    return {
                      success: true,
                      skipped: true,
                      reason: 'Duplicate event detected'
                    };
                  }
                }
                
                // Create calendar event with comprehensive options
                const eventOptions = {
                  description: eventData.description,
                  location: eventData.location,
                };
                
                // Add attendees if specified
                if (eventData.attendees && eventData.attendees.length > 0) {
                  eventOptions.guests = eventData.attendees.join(',');
                  eventOptions.sendInvites = true;
                }
                
                const event = calendar.createEvent(
                  eventData.title,
                  startDateTime,
                  endDateTime,
                  eventOptions
                );
                
                console.log(`✅ Created event: ${eventData.title} on ${eventDate.toDateString()}`);
                console.log(`📅 Event ID: ${event.getId()}`);
                
                return {
                  success: true,
                  eventId: event.getId(),
                  eventUrl: event.getDateCreated() // Calendar event URL
                };
                
              } catch (error) {
                console.error(`❌ Error creating event ${eventData.title}:`, error.toString());
                return {
                  success: false,
                  error: error.toString()
                };
              }
            }
            
            /**
             * Sends detailed summary email with execution results
             * Includes metrics, event listings, and actionable information
             */
            function sendDetailedSummaryEmail(successCount, errorCount, processedEvents, executionTime) {
              try {
                const recipient = Session.getActiveUser().getEmail();
                const timestamp = new Date().toLocaleString();
                const subject = `📅 Event Automation Summary - ${new Date().toDateString()}`;
                
                // Separate successful and failed events
                const successEvents = processedEvents.filter(event => event.status === 'success');
                const errorEvents = processedEvents.filter(event => event.status === 'error');
                const totalEvents = processedEvents.length;
                const successRate = Math.round((successCount / totalEvents) * 100);
                
                const body = `
            Event Creation Automation Summary
            =================================
            
            Execution Details:
            • Timestamp: ${timestamp}
            • Execution Time: ${Math.round(executionTime / 1000)}s
            • Total Events Processed: ${totalEvents}
            • Events Created Successfully: ${successCount}
            • Events with Errors: ${errorCount}
            • Success Rate: ${successRate}%
            • Script Version: v1.0
            
            ${successCount > 0 ? `
            ✅ Successfully Created Events (${successCount}):
            ${successEvents.map(event => `   • ${event.title} (${event.date})`).join('\n')}
            ` : ''}
            
            ${errorCount > 0 ? `
            ❌ Events with Errors (${errorCount}):
            ${errorEvents.map(event => `   • ${event.title} (${event.date}) - ${event.error}`).join('\n')}
            
            Troubleshooting:
            • Check the Apps Script logs for detailed error information
            • Verify event data format in the source spreadsheet
            • Ensure all required fields (Title, Date, Start Time, End Time) are populated
            • Confirm attendee email addresses are valid
            ` : 'All events processed successfully! 🎉'}
            
            Next Steps:
            • Review your Google Calendar for newly created events
            • Update the source spreadsheet with any corrections needed
            • Check Apps Script execution logs: https://script.google.com/
            
            This is an automated message from your Event Creation automation system.
            Spreadsheet ID: ${CONFIG.SHEET_ID}
                `;
                
                GmailApp.sendEmail(recipient, subject, body);
                console.log(`📧 Detailed summary email sent to ${recipient}`);
                
              } catch (error) {
                console.error('📧 Error sending summary email:', error.toString());
              }
            }
            
            /**
             * Sends error notification email for fatal errors
             * Provides debugging information and next steps
             */
            function sendErrorNotificationEmail(error) {
              try {
                const recipient = Session.getActiveUser().getEmail();
                const subject = `🚨 Event Automation Error - ${new Date().toDateString()}`;
                
                const body = `
            Event Automation Error Report
            ============================
            
            A fatal error occurred during event automation execution:
            
            Error Details:
            • Timestamp: ${new Date().toLocaleString()}
            • Error Message: ${error.toString()}
            • Script Function: automateEventCreation()
            
            Immediate Actions:
            1. Check the Apps Script execution logs: https://script.google.com/
            2. Verify the source spreadsheet is accessible: ${CONFIG.SHEET_ID}
            3. Confirm required APIs are enabled (Calendar, Sheets, Gmail)
            4. Review spreadsheet data format and permissions
            
            Common Solutions:
            • Ensure spreadsheet has proper headers and data format
            • Verify service account permissions for API access
            • Check for recent changes to spreadsheet structure
            • Confirm trigger is properly configured
            
            If the issue persists, review the Apps Script logs for detailed debugging information.
            
            This is an automated error notification from your Event Creation system.
                `;
                
                GmailApp.sendEmail(recipient, subject, body);
                console.log(`🚨 Error notification email sent to ${recipient}`);
                
              } catch (emailError) {
                console.error('📧 Failed to send error notification email:', emailError.toString());
              }
            }
            
            // Utility functions for data parsing and formatting
            
            /**
             * Formats date input to proper Date object
             * Handles various date formats from spreadsheet input
             */
            function formatDate(dateInput) {
              if (dateInput instanceof Date) {
                return dateInput.toDateString();
              }
              return String(dateInput);
            }
            
            /**
             * Parses event date string to Date object
             * Supports multiple date formats
             */
            function parseEventDate(dateString) {
              try {
                const date = new Date(dateString);
                return isNaN(date.getTime()) ? null : date;
              } catch (error) {
                return null;
              }
            }
            
            /**
             * Parses event date and time to DateTime object
             * Combines date and time strings into proper DateTime
             */
            function parseEventDateTime(eventDate, timeString) {
              try {
                const dateTimeString = eventDate.toDateString() + ' ' + timeString;
                const dateTime = new Date(dateTimeString);
                return isNaN(dateTime.getTime()) ? null : dateTime;
              } catch (error) {
                return null;
              }
            }
            
            /**
             * Parses attendees string into array of email addresses
             * Handles comma-separated emails with validation
             */
            function parseAttendees(attendeesInput) {
              if (!attendeesInput) {
                return [];
              }
              
              return String(attendeesInput)
                .split(',')
                .map(email => email.trim())
                .filter(email => email.length > 0 && email.includes('@'));
            }
            
            /**
             * Creates time-based trigger for automated execution
             * Sets up daily execution with proper error handling
             */
            function createAutomationTrigger() {
              try {
                // Delete existing triggers to avoid duplicates
                const existingTriggers = ScriptApp.getProjectTriggers();
                existingTriggers.forEach(trigger => {
                  if (trigger.getHandlerFunction() === 'automateEventCreation') {
                    ScriptApp.deleteTrigger(trigger);
                    console.log('🗑️ Removed existing automation trigger');
                  }
                });
                
                // Create new daily trigger at 8 AM
                const trigger = ScriptApp.newTrigger('automateEventCreation')
                  .timeBased()
                  .everyDays(1)
                  .atHour(8)
                  .create();
                
                console.log('⏰ Daily automation trigger created successfully');
                console.log(`Trigger ID: ${trigger.getUniqueId()}`);
                console.log('Events will be processed automatically at 8:00 AM daily');
                
                return {
                  success: true,
                  triggerId: trigger.getUniqueId(),
                  schedule: 'Daily at 8:00 AM'
                };
                
              } catch (error) {
                console.error('⏰ Error creating automation trigger:', error.toString());
                throw new Error(`Failed to create trigger: ${error.message}`);
              }
            }
            
            /**
             * Removes all automation triggers
             * Cleanup function for maintenance
             */
            function removeAutomationTriggers() {
              try {
                const triggers = ScriptApp.getProjectTriggers();
                let removedCount = 0;
                
                triggers.forEach(trigger => {
                  if (trigger.getHandlerFunction() === 'automateEventCreation') {
                    ScriptApp.deleteTrigger(trigger);
                    removedCount++;
                    console.log(`🗑️ Removed trigger: ${trigger.getUniqueId()}`);
                  }
                });
                
                console.log(`✅ Removed ${removedCount} automation triggers`);
                return {
                  success: true,
                  removed: removedCount
                };
                
              } catch (error) {
                console.error('❌ Error removing triggers:', error.toString());
                throw new Error(`Failed to remove triggers: ${error.message}`);
              }
            }
            
            // Testing and validation functions
            
            /**
             * Comprehensive testing function for the automation system
             * Validates all components without creating actual events
             */
            function testAutomationSystem() {
              console.log('🧪 Starting comprehensive automation system test...');
              
              const testResults = {
                spreadsheetAccess: false,
                dataValidation: false,
                calendarAccess: false,
                emailCapability: false,
                overallHealth: false
              };
              
              try {
                // Test 1: Spreadsheet access
                console.log('🧪 Testing spreadsheet access...');
                const spreadsheet = SpreadsheetApp.openById(CONFIG.SHEET_ID);
                const sheet = spreadsheet.getActiveSheet();
                const testData = sheet.getRange(1, 1, 1, 7).getValues();
                testResults.spreadsheetAccess = testData.length > 0;
                console.log(`${testResults.spreadsheetAccess ? '✅' : '❌'} Spreadsheet access test`);
                
                // Test 2: Data validation
                console.log('🧪 Testing data validation...');
                const events = readEventData();
                testResults.dataValidation = Array.isArray(events);
                console.log(`${testResults.dataValidation ? '✅' : '❌'} Data validation test`);
                
                // Test 3: Calendar access
                console.log('🧪 Testing calendar access...');
                const calendar = CalendarApp.getDefaultCalendar();
                const calendarName = calendar.getName();
                testResults.calendarAccess = calendarName && calendarName.length > 0;
                console.log(`${testResults.calendarAccess ? '✅' : '❌'} Calendar access test`);
                
                // Test 4: Email capability
                console.log('🧪 Testing email capability...');
                const userEmail = Session.getActiveUser().getEmail();
                testResults.emailCapability = userEmail && userEmail.includes('@');
                console.log(`${testResults.emailCapability ? '✅' : '❌'} Email capability test`);
                
                // Overall health check
                testResults.overallHealth = Object.values(testResults).every(result => result === true);
                
                console.log('🧪 Test Results Summary:');
                console.log(`   Spreadsheet Access: ${testResults.spreadsheetAccess ? '✅' : '❌'}`);
                console.log(`   Data Validation: ${testResults.dataValidation ? '✅' : '❌'}`);
                console.log(`   Calendar Access: ${testResults.calendarAccess ? '✅' : '❌'}`);
                console.log(`   Email Capability: ${testResults.emailCapability ? '✅' : '❌'}`);
                console.log(`   Overall Health: ${testResults.overallHealth ? '✅ HEALTHY' : '❌ ISSUES DETECTED'}`);
                
                return testResults;
                
              } catch (error) {
                console.error('🧪 Test execution error:', error.toString());
                return testResults;
              }
            }
        - name: "appsscript"
          type: "JSON"
          source: |
            {
              "timeZone": "America/New_York",
              "dependencies": {
                "enabledAdvancedServices": [
                  {
                    "userSymbol": "Calendar",
                    "serviceId": "calendar",
                    "version": "v3"
                  },
                  {
                    "userSymbol": "Sheets",
                    "serviceId": "sheets",
                    "version": "v4"
                  },
                  {
                    "userSymbol": "Gmail",
                    "serviceId": "gmail",
                    "version": "v1"
                  }
                ]
              },
              "oauthScopes": [
                "https://www.googleapis.com/auth/calendar",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/gmail.send",
                "https://www.googleapis.com/auth/script.external_request"
              ],
              "runtimeVersion": "V8"
            }
    metadata:
      dependsOn:
        - enable-apps-script-api
        - apps-script-executor-binding
        - event-schedule-sheet

  # Cloud Scheduler for automated trigger management (optional - enhanced automation)
  - name: event-automation-scheduler
    type: gcp-types/cloudscheduler-v1:projects.locations.jobs
    properties:
      parent: projects/${PROJECT_ID}/locations/$(ref.config.region)
      job:
        name: projects/${PROJECT_ID}/locations/$(ref.config.region)/jobs/event-automation-daily
        description: "Daily trigger for automated event creation"
        schedule: "0 8 * * *" # Daily at 8:00 AM
        timeZone: "America/New_York"
        httpTarget:
          uri: "https://script.googleapis.com/v1/projects/$(ref.event-automation-script-project.scriptId):run"
          httpMethod: POST
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer $(ref.apps-script-service-account.oauth2ClientId)"
          body: |
            {
              "function": "automateEventCreation",
              "parameters": [],
              "devMode": false
            }
        retryConfig:
          retryCount: 3
          maxRetryDuration: "60s"
          minBackoffDuration: "5s"
          maxBackoffDuration: "300s"
    metadata:
      dependsOn:
        - event-automation-script-project
        - apps-script-service-account

  # Cloud Logging sink for Apps Script execution monitoring
  - name: apps-script-logging-sink
    type: gcp-types/logging-v2:projects.sinks
    properties:
      parent: projects/${PROJECT_ID}
      sink:
        name: "event-automation-logs"
        description: "Centralized logging for event automation system"
        destination: "logging.googleapis.com/projects/${PROJECT_ID}/logs/event-automation"
        filter: |
          resource.type="gae_app" OR
          resource.type="cloud_function" OR
          protoPayload.serviceName="script.googleapis.com"
        includeChildren: true
    metadata:
      dependsOn:
        - event-automation-script-project

  # Monitoring alert policy for automation failures
  - name: automation-failure-alert
    type: gcp-types/monitoring-v1:projects.alertPolicies
    properties:
      parent: projects/${PROJECT_ID}
      alertPolicy:
        displayName: "Event Automation Failure Alert"
        documentation:
          content: "Alert triggered when event automation script encounters errors or failures"
          mimeType: "text/markdown"
        conditions:
          - displayName: "Apps Script Execution Errors"
            conditionThreshold:
              filter: |
                resource.type="gae_app"
                log_name="projects/${PROJECT_ID}/logs/event-automation"
                severity>=ERROR
              comparison: COMPARISON_GREATER_THAN
              thresholdValue: 0
              duration: "300s"
              aggregations:
                - alignmentPeriod: "300s"
                  perSeriesAligner: "ALIGN_COUNT"
                  crossSeriesReducer: "REDUCE_SUM"
        notificationChannels: []
        alertStrategy:
          autoClose: "1800s" # 30 minutes
        enabled: true
        combiner: OR
    metadata:
      dependsOn:
        - apps-script-logging-sink

# Output values for integration and reference
outputs:
  # Service account information
  - name: service-account-email
    description: "Service account email for Apps Script execution"
    value: $(ref.apps-script-service-account.email)
    
  - name: service-account-unique-id
    description: "Unique identifier for the service account"
    value: $(ref.apps-script-service-account.uniqueId)

  # Google Sheets information
  - name: spreadsheet-id
    description: "ID of the created Google Sheets document for event data"
    value: $(ref.event-schedule-sheet.spreadsheetId)
    
  - name: spreadsheet-url
    description: "Direct URL to the Google Sheets document"
    value: "https://docs.google.com/spreadsheets/d/$(ref.event-schedule-sheet.spreadsheetId)/edit"

  # Apps Script project information
  - name: apps-script-project-id
    description: "Apps Script project identifier"
    value: $(ref.event-automation-script-project.scriptId)
    
  - name: apps-script-url
    description: "Direct URL to the Apps Script project editor"
    value: "https://script.google.com/d/$(ref.event-automation-script-project.scriptId)/edit"

  # Automation scheduling information
  - name: scheduler-job-name
    description: "Cloud Scheduler job name for automated execution"
    value: $(ref.event-automation-scheduler.name)
    
  - name: execution-schedule
    description: "Configured execution schedule for automation"
    value: "Daily at 8:00 AM (America/New_York)"

  # Monitoring and logging information
  - name: logging-sink-name
    description: "Cloud Logging sink for automation monitoring"
    value: $(ref.apps-script-logging-sink.name)
    
  - name: alert-policy-name
    description: "Monitoring alert policy for failure detection"
    value: $(ref.automation-failure-alert.name)

  # Project configuration summary
  - name: deployment-summary
    description: "Summary of deployed resources and configuration"
    value: |
      Event Automation Infrastructure Deployed Successfully
      
      Key Resources:
      • Apps Script Project: $(ref.event-automation-script-project.scriptId)
      • Google Sheets Document: $(ref.event-schedule-sheet.spreadsheetId)
      • Service Account: $(ref.apps-script-service-account.email)
      • Scheduler Job: $(ref.event-automation-scheduler.name)
      
      Access URLs:
      • Apps Script Editor: https://script.google.com/d/$(ref.event-automation-script-project.scriptId)/edit
      • Event Data Sheet: https://docs.google.com/spreadsheets/d/$(ref.event-schedule-sheet.spreadsheetId)/edit
      
      Automation Schedule: Daily at 8:00 AM (America/New_York)
      
      Next Steps:
      1. Access the Google Sheet to input event data
      2. Test the automation using the Apps Script editor
      3. Monitor execution through Cloud Logging
      4. Customize the schedule in Cloud Scheduler if needed
      
      For detailed usage instructions, refer to the recipe documentation.

# Resource labels for organization and cost tracking
labels:
  environment: production
  project: event-automation
  component: serverless-automation
  cost-center: productivity-tools
  managed-by: infrastructure-manager
  recipe-id: a1f2e3d4
  created-date: "2025-07-12"