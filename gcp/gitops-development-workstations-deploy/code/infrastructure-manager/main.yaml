# Infrastructure Manager Configuration for GitOps Development Workflows
# This configuration deploys a complete GitOps workflow with Cloud Workstations,
# Cloud Deploy, GKE clusters, and supporting infrastructure for CI/CD pipelines.

metadata:
  version: "1.0"
  description: "GitOps Development Workflows with Cloud Workstations and Deploy"
  labels:
    solution: "gitops-workflow"
    environment: "multi-environment"
    complexity: "intermediate"

# Input variables for customization
variables:
  project_id:
    type: string
    description: "Google Cloud Project ID"
    required: true
  
  region:
    type: string
    description: "Primary region for resource deployment"
    default: "us-central1"
  
  zone:
    type: string
    description: "Primary zone for resource deployment"
    default: "us-central1-a"
  
  cluster_name_prefix:
    type: string
    description: "Prefix for GKE cluster names"
    default: "gitops-cluster"
  
  workstation_config_prefix:
    type: string
    description: "Prefix for workstation configuration names"
    default: "dev-config"
  
  app_repo_name:
    type: string
    description: "Name for application repository"
    default: "hello-app"
  
  env_repo_name:
    type: string
    description: "Name for environment repository"
    default: "hello-env"
  
  random_suffix:
    type: string
    description: "Random suffix for unique resource naming"
    default: "abc123"
  
  workstation_machine_type:
    type: string
    description: "Machine type for Cloud Workstations"
    default: "e2-standard-4"
  
  workstation_disk_size:
    type: string
    description: "Persistent disk size for workstations"
    default: "100GB"

# Resource definitions organized by logical groupings

resources:
  # Enable required Google Cloud APIs
  required_apis:
    type: "gcp-types/servicemanagement-v1:servicemanagement.services.enable"
    name: "enable-required-apis"
    properties:
      serviceName: "container.googleapis.com"
    metadata:
      dependsOn: []
  
  cloudbuild_api:
    type: "gcp-types/servicemanagement-v1:servicemanagement.services.enable"
    name: "enable-cloudbuild-api"
    properties:
      serviceName: "cloudbuild.googleapis.com"
    metadata:
      dependsOn: []
  
  sourcerepo_api:
    type: "gcp-types/servicemanagement-v1:servicemanagement.services.enable"
    name: "enable-sourcerepo-api"
    properties:
      serviceName: "sourcerepo.googleapis.com"
    metadata:
      dependsOn: []
  
  artifactregistry_api:
    type: "gcp-types/servicemanagement-v1:servicemanagement.services.enable"
    name: "enable-artifactregistry-api"
    properties:
      serviceName: "artifactregistry.googleapis.com"
    metadata:
      dependsOn: []
  
  workstations_api:
    type: "gcp-types/servicemanagement-v1:servicemanagement.services.enable"
    name: "enable-workstations-api"
    properties:
      serviceName: "workstations.googleapis.com"
    metadata:
      dependsOn: []
  
  clouddeploy_api:
    type: "gcp-types/servicemanagement-v1:servicemanagement.services.enable"
    name: "enable-clouddeploy-api"
    properties:
      serviceName: "clouddeploy.googleapis.com"
    metadata:
      dependsOn: []

  # GKE Clusters for staging and production environments
  gke_staging_cluster:
    type: "gcp-types/container-v1:projects.locations.clusters"
    name: "gke-staging-cluster"
    properties:
      parent: "projects/$(ref.project_id.value)/locations/$(ref.region.value)"
      cluster:
        name: "$(ref.cluster_name_prefix.value)-staging-$(ref.random_suffix.value)"
        description: "GKE Autopilot cluster for staging environment"
        # Enable Autopilot mode for simplified cluster management
        autopilot:
          enabled: true
        # Network configuration
        network: "projects/$(ref.project_id.value)/global/networks/default"
        subnetwork: "projects/$(ref.project_id.value)/regions/$(ref.region.value)/subnetworks/default"
        # Security and monitoring configurations
        monitoringService: "monitoring.googleapis.com/kubernetes"
        loggingService: "logging.googleapis.com/kubernetes"
        # Resource labels for organization and cost tracking
        resourceLabels:
          env: "staging"
          purpose: "gitops"
          solution: "gitops-workflow"
        # Enable workload identity for secure service account binding
        workloadIdentityConfig:
          workloadPool: "$(ref.project_id.value).svc.id.goog"
        # Network policy configuration for security
        networkPolicy:
          enabled: true
        # Release channel for automatic updates
        releaseChannel:
          channel: "STABLE"
    metadata:
      dependsOn:
        - "required_apis"

  gke_production_cluster:
    type: "gcp-types/container-v1:projects.locations.clusters"
    name: "gke-production-cluster"
    properties:
      parent: "projects/$(ref.project_id.value)/locations/$(ref.region.value)"
      cluster:
        name: "$(ref.cluster_name_prefix.value)-prod-$(ref.random_suffix.value)"
        description: "GKE Autopilot cluster for production environment"
        # Enable Autopilot mode for simplified cluster management
        autopilot:
          enabled: true
        # Network configuration
        network: "projects/$(ref.project_id.value)/global/networks/default"
        subnetwork: "projects/$(ref.project_id.value)/regions/$(ref.region.value)/subnetworks/default"
        # Security and monitoring configurations
        monitoringService: "monitoring.googleapis.com/kubernetes"
        loggingService: "logging.googleapis.com/kubernetes"
        # Resource labels for organization and cost tracking
        resourceLabels:
          env: "production"
          purpose: "gitops"
          solution: "gitops-workflow"
        # Enable workload identity for secure service account binding
        workloadIdentityConfig:
          workloadPool: "$(ref.project_id.value).svc.id.goog"
        # Network policy configuration for security
        networkPolicy:
          enabled: true
        # Release channel for automatic updates
        releaseChannel:
          channel: "STABLE"
    metadata:
      dependsOn:
        - "required_apis"

  # Artifact Registry repository for container images
  artifact_registry_repo:
    type: "gcp-types/artifactregistry-v1:projects.locations.repositories"
    name: "artifact-registry-repository"
    properties:
      parent: "projects/$(ref.project_id.value)/locations/$(ref.region.value)"
      repositoryId: "$(ref.app_repo_name.value)-$(ref.random_suffix.value)"
      repository:
        description: "Docker repository for GitOps application images"
        format: "DOCKER"
        # Enable vulnerability scanning for security
        dockerConfig:
          immutableTags: false
        labels:
          purpose: "gitops"
          solution: "gitops-workflow"
    metadata:
      dependsOn:
        - "artifactregistry_api"

  # Cloud Source Repositories for application and environment code
  app_source_repository:
    type: "gcp-types/sourcerepo-v1:projects.repos"
    name: "app-source-repository"
    properties:
      parent: "projects/$(ref.project_id.value)"
      repoId: "$(ref.app_repo_name.value)-$(ref.random_suffix.value)"
      repo:
        description: "Application source code repository"
        # Enable Cloud Pub/Sub notifications for build triggers
        pubsubConfigs:
          - topic: "projects/$(ref.project_id.value)/topics/cloud-builds"
            messageFormat: "JSON"
            serviceAccountEmail: "service-$(ref.project_id.value)@gcp-sa-cloudbuild.iam.gserviceaccount.com"
    metadata:
      dependsOn:
        - "sourcerepo_api"

  env_source_repository:
    type: "gcp-types/sourcerepo-v1:projects.repos"
    name: "env-source-repository"
    properties:
      parent: "projects/$(ref.project_id.value)"
      repoId: "$(ref.env_repo_name.value)-$(ref.random_suffix.value)"
      repo:
        description: "Environment configuration repository"
        # Enable Cloud Pub/Sub notifications for GitOps sync
        pubsubConfigs:
          - topic: "projects/$(ref.project_id.value)/topics/cloud-builds"
            messageFormat: "JSON"
            serviceAccountEmail: "service-$(ref.project_id.value)@gcp-sa-cloudbuild.iam.gserviceaccount.com"
    metadata:
      dependsOn:
        - "sourcerepo_api"

  # Cloud Workstations infrastructure for development environments
  workstation_cluster:
    type: "gcp-types/workstations-v1:projects.locations.workstationClusters"
    name: "workstation-cluster"
    properties:
      parent: "projects/$(ref.project_id.value)/locations/$(ref.region.value)"
      workstationClusterId: "$(ref.workstation_config_prefix.value)-cluster-$(ref.random_suffix.value)"
      workstationCluster:
        displayName: "GitOps Development Workstation Cluster"
        description: "Secure workstation cluster for GitOps development workflows"
        # Network configuration for workstation cluster
        network: "projects/$(ref.project_id.value)/global/networks/default"
        subnetwork: "projects/$(ref.project_id.value)/regions/$(ref.region.value)/subnetworks/default"
        # Enable private Google Access for security
        privateClusterConfig:
          enablePrivateEndpoint: false
          enablePrivateNodes: true
        # Labels for organization
        labels:
          purpose: "development"
          solution: "gitops-workflow"
    metadata:
      dependsOn:
        - "workstations_api"

  workstation_config:
    type: "gcp-types/workstations-v1:projects.locations.workstationClusters.workstationConfigs"
    name: "workstation-configuration"
    properties:
      parent: "$(ref.workstation_cluster.name)"
      workstationConfigId: "$(ref.workstation_config_prefix.value)-$(ref.random_suffix.value)"
      workstationConfig:
        displayName: "GitOps Development Configuration"
        description: "Standardized development environment with VS Code and cloud tools"
        # Machine configuration
        host:
          gceInstance:
            machineType: "$(ref.workstation_machine_type.value)"
            bootDiskSizeGb: 50
            disks:
              - diskType: "pd-standard"
                diskSizeGb: "$(ref.workstation_disk_size.value)"
        # Container image with development tools
        container:
          image: "us-central1-docker.pkg.dev/cloud-workstations-images/predefined/code-oss:latest"
          # Environment variables for development
          env:
            - name: "PROJECT_ID"
              value: "$(ref.project_id.value)"
            - name: "REGION"
              value: "$(ref.region.value)"
        # Idle timeout for cost optimization
        idleTimeout: "3600s"
        # Running timeout for cost control
        runningTimeout: "43200s"  # 12 hours
        # Labels for organization
        labels:
          purpose: "development"
          solution: "gitops-workflow"
    metadata:
      dependsOn:
        - "workstation_cluster"

  # Cloud Build trigger for CI/CD pipeline
  cloud_build_trigger:
    type: "gcp-types/cloudbuild-v1:projects.triggers"
    name: "cloud-build-ci-trigger"
    properties:
      parent: "projects/$(ref.project_id.value)"
      trigger:
        name: "gitops-ci-trigger-$(ref.random_suffix.value)"
        description: "CI pipeline trigger for application repository"
        # Trigger configuration for source repository
        triggerTemplate:
          projectId: "$(ref.project_id.value)"
          repoName: "$(ref.app_repo_name.value)-$(ref.random_suffix.value)"
          branchName: "main"
        # Build configuration inline
        build:
          options:
            logging: "CLOUD_LOGGING_ONLY"
          # Substitutions for dynamic values
          substitutions:
            _REGION: "$(ref.region.value)"
            _APP_REPO: "$(ref.app_repo_name.value)-$(ref.random_suffix.value)"
            _ENV_REPO: "$(ref.env_repo_name.value)-$(ref.random_suffix.value)"
          # Build steps for CI pipeline
          steps:
            # Build container image
            - name: "gcr.io/cloud-builders/docker"
              args:
                - "build"
                - "-t"
                - "$(ref.region.value)-docker.pkg.dev/$(ref.project_id.value)/$(ref.app_repo_name.value)-$(ref.random_suffix.value)/hello-app:${SHORT_SHA}"
                - "."
            # Push container image to Artifact Registry
            - name: "gcr.io/cloud-builders/docker"
              args:
                - "push"
                - "$(ref.region.value)-docker.pkg.dev/$(ref.project_id.value)/$(ref.app_repo_name.value)-$(ref.random_suffix.value)/hello-app:${SHORT_SHA}"
            # Update environment repository with new image
            - name: "gcr.io/cloud-builders/gcloud"
              entrypoint: "bash"
              args:
                - "-c"
                - |
                  gcloud source repos clone ${_ENV_REPO} env-repo
                  cd env-repo
                  git config user.email "cloudbuild@$(ref.project_id.value).iam.gserviceaccount.com"
                  git config user.name "Cloud Build"
                  if [ -f k8s/hello-app-deployment.yaml ]; then
                    sed -i "s|image: .*|image: ${_REGION}-docker.pkg.dev/$(ref.project_id.value)/${_APP_REPO}/hello-app:${SHORT_SHA}|g" k8s/hello-app-deployment.yaml
                    git add .
                    git commit -m "Update image to ${SHORT_SHA}" || echo "No changes to commit"
                    git push origin main || echo "Failed to push changes"
                  else
                    echo "Deployment manifest not found, skipping update"
                  fi
        # Enable trigger
        disabled: false
    metadata:
      dependsOn:
        - "cloudbuild_api"
        - "app_source_repository"
        - "env_source_repository"
        - "artifact_registry_repo"

  # Service account for Cloud Deploy operations
  clouddeploy_service_account:
    type: "gcp-types/iam-v1:projects.serviceAccounts"
    name: "clouddeploy-service-account"
    properties:
      accountId: "clouddeploy-sa-$(ref.random_suffix.value)"
      serviceAccount:
        displayName: "Cloud Deploy Service Account"
        description: "Service account for Cloud Deploy operations"
    metadata:
      dependsOn: []

  # IAM bindings for Cloud Deploy service account
  clouddeploy_sa_gke_binding:
    type: "gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding"
    name: "clouddeploy-gke-binding"
    properties:
      resource: "$(ref.project_id.value)"
      role: "roles/container.developer"
      member: "serviceAccount:$(ref.clouddeploy_service_account.email)"
    metadata:
      dependsOn:
        - "clouddeploy_service_account"

  clouddeploy_sa_deploy_binding:
    type: "gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding"
    name: "clouddeploy-deploy-binding"
    properties:
      resource: "$(ref.project_id.value)"
      role: "roles/clouddeploy.operator"
      member: "serviceAccount:$(ref.clouddeploy_service_account.email)"
    metadata:
      dependsOn:
        - "clouddeploy_service_account"

  # Cloud Deploy delivery pipeline configuration
  clouddeploy_pipeline:
    type: "gcp-types/clouddeploy-v1:projects.locations.deliveryPipelines"
    name: "clouddeploy-delivery-pipeline"
    properties:
      parent: "projects/$(ref.project_id.value)/locations/$(ref.region.value)"
      deliveryPipelineId: "gitops-pipeline-$(ref.random_suffix.value)"
      deliveryPipeline:
        name: "gitops-pipeline-$(ref.random_suffix.value)"
        description: "GitOps delivery pipeline for progressive deployment"
        # Pipeline configuration with staging and production targets
        serialPipeline:
          stages:
            # Staging environment - automatic deployment
            - targetId: "staging-$(ref.random_suffix.value)"
              profiles: []
              strategy:
                standard:
                  verify: false
            # Production environment - manual approval required
            - targetId: "production-$(ref.random_suffix.value)"
              profiles: []
              strategy:
                standard:
                  verify: false
        # Labels for organization
        labels:
          purpose: "gitops"
          solution: "gitops-workflow"
    metadata:
      dependsOn:
        - "clouddeploy_api"
        - "gke_staging_cluster"
        - "gke_production_cluster"

  # Cloud Deploy staging target
  clouddeploy_staging_target:
    type: "gcp-types/clouddeploy-v1:projects.locations.targets"
    name: "clouddeploy-staging-target"
    properties:
      parent: "projects/$(ref.project_id.value)/locations/$(ref.region.value)"
      targetId: "staging-$(ref.random_suffix.value)"
      target:
        name: "staging-$(ref.random_suffix.value)"
        description: "Staging environment for GitOps deployments"
        # GKE cluster configuration
        gke:
          cluster: "projects/$(ref.project_id.value)/locations/$(ref.region.value)/clusters/$(ref.cluster_name_prefix.value)-staging-$(ref.random_suffix.value)"
        # Labels for organization
        labels:
          env: "staging"
          purpose: "gitops"
          solution: "gitops-workflow"
    metadata:
      dependsOn:
        - "clouddeploy_api"
        - "gke_staging_cluster"

  # Cloud Deploy production target
  clouddeploy_production_target:
    type: "gcp-types/clouddeploy-v1:projects.locations.targets"
    name: "clouddeploy-production-target"
    properties:
      parent: "projects/$(ref.project_id.value)/locations/$(ref.region.value)"
      targetId: "production-$(ref.random_suffix.value)"
      target:
        name: "production-$(ref.random_suffix.value)"
        description: "Production environment for GitOps deployments"
        # GKE cluster configuration
        gke:
          cluster: "projects/$(ref.project_id.value)/locations/$(ref.region.value)/clusters/$(ref.cluster_name_prefix.value)-prod-$(ref.random_suffix.value)"
        # Labels for organization
        labels:
          env: "production"
          purpose: "gitops"
          solution: "gitops-workflow"
    metadata:
      dependsOn:
        - "clouddeploy_api"
        - "gke_production_cluster"

# Output values for reference and integration
outputs:
  gke_staging_cluster_name:
    description: "Name of the GKE staging cluster"
    value: "$(ref.gke_staging_cluster.name)"
  
  gke_production_cluster_name:
    description: "Name of the GKE production cluster"
    value: "$(ref.gke_production_cluster.name)"
  
  artifact_registry_repository:
    description: "Artifact Registry repository for container images"
    value: "$(ref.region.value)-docker.pkg.dev/$(ref.project_id.value)/$(ref.artifact_registry_repo.name)"
  
  app_repository_clone_url:
    description: "Clone URL for application source repository"
    value: "https://source.developers.google.com/p/$(ref.project_id.value)/r/$(ref.app_source_repository.name)"
  
  env_repository_clone_url:
    description: "Clone URL for environment source repository"
    value: "https://source.developers.google.com/p/$(ref.project_id.value)/r/$(ref.env_source_repository.name)"
  
  workstation_cluster_name:
    description: "Name of the Cloud Workstations cluster"
    value: "$(ref.workstation_cluster.name)"
  
  workstation_config_name:
    description: "Name of the workstation configuration"
    value: "$(ref.workstation_config.name)"
  
  clouddeploy_pipeline_name:
    description: "Name of the Cloud Deploy delivery pipeline"
    value: "$(ref.clouddeploy_pipeline.name)"
  
  cloud_build_trigger_name:
    description: "Name of the Cloud Build trigger"
    value: "$(ref.cloud_build_trigger.name)"
  
  deployment_region:
    description: "Primary deployment region"
    value: "$(ref.region.value)"
  
  deployment_project:
    description: "Google Cloud project ID"
    value: "$(ref.project_id.value)"

# Schema validation for input parameters
schema:
  title: "GitOps Development Workflows Infrastructure"
  description: "Complete infrastructure for GitOps development with Cloud Workstations and Deploy"
  type: "object"
  properties:
    project_id:
      type: "string"
      pattern: "^[a-z][-a-z0-9]{4,28}[a-z0-9]$"
      description: "Valid Google Cloud project ID"
    region:
      type: "string"
      enum: 
        - "us-central1"
        - "us-east1"
        - "us-west1"
        - "europe-west1"
        - "asia-east1"
      description: "Supported Google Cloud regions"
    workstation_machine_type:
      type: "string"
      enum:
        - "e2-standard-2"
        - "e2-standard-4"
        - "e2-standard-8"
        - "n1-standard-4"
        - "n1-standard-8"
      description: "Supported machine types for workstations"
  required:
    - "project_id"