AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Advanced Request Routing with VPC Lattice and ALB - Complete infrastructure
  for sophisticated layer 7 routing across multiple VPCs using VPC Lattice
  service network with Application Load Balancer targets

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SubnetIds
          - CreateAdditionalVpc
          - AdditionalVpcCidr
      - Label:
          default: "Service Configuration"
        Parameters:
          - ServiceNetworkName
          - LatticeServiceName
          - LoadBalancerName
      - Label:
          default: "Instance Configuration"
        Parameters:
          - InstanceType
          - LatestAmiId
      - Label:
          default: "Security Configuration"
        Parameters:
          - AllowedCidrBlocks
          - EnableIamAuth
    ParameterLabels:
      VpcId:
        default: "Primary VPC ID"
      SubnetIds:
        default: "ALB Subnets"
      CreateAdditionalVpc:
        default: "Create Additional VPC"
      AdditionalVpcCidr:
        default: "Additional VPC CIDR"
      ServiceNetworkName:
        default: "Service Network Name"
      LatticeServiceName:
        default: "Lattice Service Name"
      LoadBalancerName:
        default: "Load Balancer Name"
      InstanceType:
        default: "EC2 Instance Type"
      LatestAmiId:
        default: "Amazon Linux 2023 AMI"
      AllowedCidrBlocks:
        default: "Allowed CIDR Blocks"
      EnableIamAuth:
        default: "Enable IAM Authentication"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the ALB and EC2 instances will be deployed
    
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: At least two subnets in different AZs for ALB deployment
    
  CreateAdditionalVpc:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Whether to create an additional VPC for cross-VPC demonstration
    
  AdditionalVpcCidr:
    Type: String
    Default: '10.1.0.0/16'
    Description: CIDR block for the additional VPC
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    
  ServiceNetworkName:
    Type: String
    Default: 'advanced-routing-network'
    Description: Name for the VPC Lattice service network
    MinLength: 3
    MaxLength: 40
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9\-]*$
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters and hyphens
    
  LatticeServiceName:
    Type: String
    Default: 'api-gateway-service'
    Description: Name for the VPC Lattice service
    MinLength: 3
    MaxLength: 40
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9\-]*$
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters and hyphens
    
  LoadBalancerName:
    Type: String
    Default: 'api-service-alb'
    Description: Name for the Application Load Balancer
    MinLength: 1
    MaxLength: 32
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9\-]*$
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters and hyphens
    
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type for web servers
    
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    Description: Latest Amazon Linux 2023 AMI ID via SSM Parameter
    
  AllowedCidrBlocks:
    Type: CommaDelimitedList
    Default: '10.0.0.0/8,172.16.0.0/12,192.168.0.0/16'
    Description: CIDR blocks allowed to access the ALB
    
  EnableIamAuth:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable IAM authentication for VPC Lattice service

Conditions:
  CreateAdditionalVpcCondition: !Equals [!Ref CreateAdditionalVpc, 'true']
  EnableIamAuthCondition: !Equals [!Ref EnableIamAuth, 'true']

Resources:
  # ============================================================================
  # VPC LATTICE SERVICE NETWORK
  # ============================================================================
  
  LatticeServiceNetwork:
    Type: AWS::VpcLattice::ServiceNetwork
    Properties:
      Name: !Sub '${ServiceNetworkName}-${AWS::StackName}'
      AuthType: !If [EnableIamAuthCondition, 'AWS_IAM', 'NONE']
      Tags:
        - Key: Name
          Value: !Sub '${ServiceNetworkName}-${AWS::StackName}'
        - Key: Purpose
          Value: 'Advanced Request Routing Demo'
        - Key: Stack
          Value: !Ref AWS::StackName

  # ============================================================================
  # ADDITIONAL VPC (OPTIONAL)
  # ============================================================================
  
  AdditionalVpc:
    Type: AWS::EC2::VPC
    Condition: CreateAdditionalVpcCondition
    Properties:
      CidrBlock: !Ref AdditionalVpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'lattice-target-vpc-${AWS::StackName}'
        - Key: Purpose
          Value: 'VPC Lattice Cross-VPC Demo'
        - Key: Stack
          Value: !Ref AWS::StackName

  AdditionalSubnet:
    Type: AWS::EC2::Subnet
    Condition: CreateAdditionalVpcCondition
    Properties:
      VpcId: !Ref AdditionalVpc
      CidrBlock: !Select [0, !Cidr [!Ref AdditionalVpcCidr, 4, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub 'lattice-subnet-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # ============================================================================
  # VPC ASSOCIATIONS WITH SERVICE NETWORK
  # ============================================================================
  
  PrimaryVpcAssociation:
    Type: AWS::VpcLattice::ServiceNetworkVpcAssociation
    Properties:
      ServiceNetworkIdentifier: !Ref LatticeServiceNetwork
      VpcIdentifier: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub 'primary-vpc-association-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  AdditionalVpcAssociation:
    Type: AWS::VpcLattice::ServiceNetworkVpcAssociation
    Condition: CreateAdditionalVpcCondition
    Properties:
      ServiceNetworkIdentifier: !Ref LatticeServiceNetwork
      VpcIdentifier: !Ref AdditionalVpc
      Tags:
        - Key: Name
          Value: !Sub 'additional-vpc-association-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # ============================================================================
  # SECURITY GROUPS
  # ============================================================================
  
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'lattice-alb-sg-${AWS::StackName}'
      GroupDescription: Security group for VPC Lattice ALB targets
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: HTTP from allowed CIDR blocks
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Select [0, !Ref AllowedCidrBlocks]
        - Description: HTTPS from allowed CIDR blocks
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Select [0, !Ref AllowedCidrBlocks]
        - Description: HTTP from VPC Lattice service network
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '10.0.0.0/8'
        - Description: HTTPS from VPC Lattice service network
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '10.0.0.0/8'
      SecurityGroupEgress:
        - Description: All outbound traffic
          IpProtocol: -1
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub 'lattice-alb-sg-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'lattice-instance-sg-${AWS::StackName}'
      GroupDescription: Security group for EC2 instances behind ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: HTTP from ALB security group
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurityGroup
        - Description: HTTPS from ALB security group
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      SecurityGroupEgress:
        - Description: All outbound traffic
          IpProtocol: -1
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub 'lattice-instance-sg-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # ============================================================================
  # IAM ROLE FOR EC2 INSTANCES
  # ============================================================================
  
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'LatticeInstanceRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub 'LatticeInstanceRole-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'LatticeInstanceProfile-${AWS::StackName}'
      Roles:
        - !Ref InstanceRole

  # ============================================================================
  # APPLICATION LOAD BALANCER
  # ============================================================================
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${LoadBalancerName}-${AWS::StackName}'
      Type: application
      Scheme: internal
      IpAddressType: ipv4
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${LoadBalancerName}-${AWS::StackName}'
        - Key: Purpose
          Value: 'VPC Lattice Target ALB'
        - Key: Stack
          Value: !Ref AWS::StackName

  # ============================================================================
  # TARGET GROUPS
  # ============================================================================
  
  ApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'api-tg-${AWS::StackName}'
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub 'api-tg-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # ============================================================================
  # ALB LISTENER
  # ============================================================================
  
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApiTargetGroup

  # ============================================================================
  # EC2 INSTANCES
  # ============================================================================
  
  ApiServiceInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      SubnetId: !Select [0, !Ref SubnetIds]
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -y
          dnf install -y httpd mod_rewrite
          systemctl start httpd
          systemctl enable httpd
          
          # Create different content for routing demonstration
          mkdir -p /var/www/html/api/v1
          echo "<h1>API V1 Service</h1><p>Path: /api/v1/</p><p>Instance: ${!AWS::InstanceId}</p>" > /var/www/html/api/v1/index.html
          echo "<h1>Default Service</h1><p>Default routing target</p><p>Instance: ${!AWS::InstanceId}</p>" > /var/www/html/index.html
          echo "<h1>Beta Service</h1><p>X-Service-Version: beta</p><p>Instance: ${!AWS::InstanceId}</p>" > /var/www/html/beta.html
          
          # Configure virtual hosts for header-based routing
          cat >> /etc/httpd/conf/httpd.conf << 'VHOST'
          <VirtualHost *:80>
              DocumentRoot /var/www/html
              RewriteEngine On
              RewriteCond %{HTTP:X-Service-Version} beta
              RewriteRule ^(.*)$ /beta.html [L]
          </VirtualHost>
          VHOST
          
          # Create health check endpoint
          echo "<h1>Health Check OK</h1>" > /var/www/html/health
          
          systemctl restart httpd
          
          # Signal CloudFormation that instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ApiServiceInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub 'api-service-instance-${AWS::StackName}'
        - Key: Purpose
          Value: 'VPC Lattice Demo Web Server'
        - Key: Stack
          Value: !Ref AWS::StackName
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M

  # Register instance with target group
  InstanceTargetAttachment:
    Type: AWS::ElasticLoadBalancingV2::TargetGroupBinding
    Properties:
      TargetGroupArn: !Ref ApiTargetGroup
      Targets:
        - Id: !Ref ApiServiceInstance
          Port: 80

  # ============================================================================
  # VPC LATTICE SERVICE
  # ============================================================================
  
  LatticeService:
    Type: AWS::VpcLattice::Service
    Properties:
      Name: !Sub '${LatticeServiceName}-${AWS::StackName}'
      AuthType: !If [EnableIamAuthCondition, 'AWS_IAM', 'NONE']
      Tags:
        - Key: Name
          Value: !Sub '${LatticeServiceName}-${AWS::StackName}'
        - Key: Purpose
          Value: 'Advanced Request Routing Service'
        - Key: Stack
          Value: !Ref AWS::StackName

  # Associate service with service network
  ServiceNetworkServiceAssociation:
    Type: AWS::VpcLattice::ServiceNetworkServiceAssociation
    Properties:
      ServiceNetworkIdentifier: !Ref LatticeServiceNetwork
      ServiceIdentifier: !Ref LatticeService
      Tags:
        - Key: Name
          Value: !Sub 'service-association-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # ============================================================================
  # VPC LATTICE TARGET GROUP
  # ============================================================================
  
  LatticeTargetGroup:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Name: !Sub 'alb-targets-${AWS::StackName}'
      Type: ALB
      Config:
        VpcIdentifier: !Ref VpcId
      Targets:
        - Id: !Ref ApplicationLoadBalancer
      Tags:
        - Key: Name
          Value: !Sub 'alb-targets-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # ============================================================================
  # VPC LATTICE LISTENER AND RULES
  # ============================================================================
  
  LatticeListener:
    Type: AWS::VpcLattice::Listener
    Properties:
      ServiceIdentifier: !Ref LatticeService
      Name: http-listener
      Protocol: HTTP
      Port: 80
      DefaultAction:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref LatticeTargetGroup
      Tags:
        - Key: Name
          Value: !Sub 'http-listener-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # Beta service version header rule (highest priority)
  BetaHeaderRule:
    Type: AWS::VpcLattice::Rule
    Properties:
      ServiceIdentifier: !Ref LatticeService
      ListenerIdentifier: !Ref LatticeListener
      Name: beta-header-rule
      Priority: 5
      Match:
        HttpMatch:
          HeaderMatches:
            - Name: X-Service-Version
              Match:
                Exact: beta
      Action:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref LatticeTargetGroup
      Tags:
        - Key: Name
          Value: !Sub 'beta-header-rule-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # API v1 path-based rule
  ApiV1PathRule:
    Type: AWS::VpcLattice::Rule
    Properties:
      ServiceIdentifier: !Ref LatticeService
      ListenerIdentifier: !Ref LatticeListener
      Name: api-v1-path-rule
      Priority: 10
      Match:
        HttpMatch:
          PathMatch:
            Match:
              Prefix: /api/v1
      Action:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref LatticeTargetGroup
      Tags:
        - Key: Name
          Value: !Sub 'api-v1-path-rule-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # POST method rule
  PostMethodRule:
    Type: AWS::VpcLattice::Rule
    Properties:
      ServiceIdentifier: !Ref LatticeService
      ListenerIdentifier: !Ref LatticeListener
      Name: post-method-rule
      Priority: 15
      Match:
        HttpMatch:
          Method: POST
      Action:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref LatticeTargetGroup
      Tags:
        - Key: Name
          Value: !Sub 'post-method-rule-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # Admin endpoint blocking rule
  AdminBlockRule:
    Type: AWS::VpcLattice::Rule
    Properties:
      ServiceIdentifier: !Ref LatticeService
      ListenerIdentifier: !Ref LatticeListener
      Name: admin-block-rule
      Priority: 20
      Match:
        HttpMatch:
          PathMatch:
            Match:
              Exact: /admin
      Action:
        FixedResponse:
          StatusCode: 403
      Tags:
        - Key: Name
          Value: !Sub 'admin-block-rule-${AWS::StackName}'
        - Key: Stack
          Value: !Ref AWS::StackName

  # ============================================================================
  # IAM AUTHENTICATION POLICY (CONDITIONAL)
  # ============================================================================
  
  LatticeAuthPolicy:
    Type: AWS::VpcLattice::AuthPolicy
    Condition: EnableIamAuthCondition
    Properties:
      ResourceIdentifier: !Ref LatticeService
      Policy: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "vpc-lattice-svcs:Invoke",
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalAccount": "${AWS::AccountId}"
                }
              }
            },
            {
              "Effect": "Deny",
              "Principal": "*",
              "Action": "vpc-lattice-svcs:Invoke",
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "vpc-lattice-svcs:RequestPath": "/admin"
                }
              }
            }
          ]
        }

# ============================================================================
# OUTPUTS
# ============================================================================

Outputs:
  ServiceNetworkId:
    Description: VPC Lattice Service Network ID
    Value: !Ref LatticeServiceNetwork
    Export:
      Name: !Sub '${AWS::StackName}-ServiceNetworkId'

  ServiceNetworkArn:
    Description: VPC Lattice Service Network ARN
    Value: !GetAtt LatticeServiceNetwork.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ServiceNetworkArn'

  LatticeServiceId:
    Description: VPC Lattice Service ID
    Value: !Ref LatticeService
    Export:
      Name: !Sub '${AWS::StackName}-LatticeServiceId'

  LatticeServiceArn:
    Description: VPC Lattice Service ARN
    Value: !GetAtt LatticeService.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LatticeServiceArn'

  LatticeServiceDomainName:
    Description: VPC Lattice Service Domain Name
    Value: !GetAtt LatticeService.DnsEntry.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-LatticeServiceDomain'

  ApplicationLoadBalancerArn:
    Description: Application Load Balancer ARN
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-ALBArn'

  ApplicationLoadBalancerDnsName:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALBDnsName'

  TargetGroupArn:
    Description: ALB Target Group ARN
    Value: !Ref ApiTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-TargetGroupArn'

  LatticeTargetGroupId:
    Description: VPC Lattice Target Group ID
    Value: !Ref LatticeTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-LatticeTargetGroupId'

  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref ApiServiceInstance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'

  SecurityGroupId:
    Description: ALB Security Group ID
    Value: !Ref AlbSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'

  AdditionalVpcId:
    Condition: CreateAdditionalVpcCondition
    Description: Additional VPC ID (if created)
    Value: !Ref AdditionalVpc
    Export:
      Name: !Sub '${AWS::StackName}-AdditionalVpcId'

  TestCommands:
    Description: Commands to test the advanced routing functionality
    Value: !Sub |
      # Test default path routing
      curl -v "http://${LatticeService.DnsEntry.DomainName}/"
      
      # Test API v1 path routing
      curl -v "http://${LatticeService.DnsEntry.DomainName}/api/v1/"
      
      # Test beta service version header
      curl -v -H "X-Service-Version: beta" "http://${LatticeService.DnsEntry.DomainName}/"
      
      # Test blocked admin endpoint
      curl -v "http://${LatticeService.DnsEntry.DomainName}/admin"
      
      # Test POST method routing
      curl -v -X POST "http://${LatticeService.DnsEntry.DomainName}/"

  Architecture:
    Description: Deployed architecture summary
    Value: !Sub |
      VPC Lattice Service Network: ${LatticeServiceNetwork}
      VPC Lattice Service: ${LatticeService}
      Application Load Balancer: ${ApplicationLoadBalancer}
      Target Group: ${ApiTargetGroup}
      EC2 Instance: ${ApiServiceInstance}
      ${CreateAdditionalVpcCondition}