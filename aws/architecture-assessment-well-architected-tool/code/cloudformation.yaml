AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Architecture Assessment with AWS Well-Architected Tool
  This template creates resources to support systematic architecture assessments
  using the AWS Well-Architected Tool, including CloudWatch monitoring for
  assessment metrics and governance automation.

# Template Metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Workload Configuration"
        Parameters:
          - WorkloadName
          - WorkloadDescription
          - Environment
          - IndustryType
          - ArchitecturalDesign
      - Label:
          default: "Assessment Configuration"
        Parameters:
          - ReviewOwner
          - LensAlias
          - EnableNotifications
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - CreateDashboard
          - NotificationEmail
          - AssessmentFrequency
      - Label:
          default: "Tagging Configuration"
        Parameters:
          - ProjectName
          - CostCenter
          - Owner
    ParameterLabels:
      WorkloadName:
        default: "Workload Name"
      WorkloadDescription:
        default: "Workload Description"
      Environment:
        default: "Environment Type"
      ReviewOwner:
        default: "Review Owner ARN"
      NotificationEmail:
        default: "Notification Email Address"

# Template Parameters
Parameters:
  WorkloadName:
    Type: String
    Description: "Name of the workload to be assessed"
    Default: "sample-web-application"
    MinLength: 3
    MaxLength: 100
    AllowedPattern: '^[a-zA-Z0-9][a-zA-Z0-9\-_]*[a-zA-Z0-9]$'
    ConstraintDescription: "Must be 3-100 characters, start/end with alphanumeric, contain only letters, numbers, hyphens, and underscores"

  WorkloadDescription:
    Type: String
    Description: "Description of the workload being assessed"
    Default: "Three-tier web application with load balancer, application servers, and database"
    MaxLength: 250

  Environment:
    Type: String
    Description: "Environment type for the workload"
    Default: "PREPRODUCTION"
    AllowedValues:
      - "PRODUCTION"
      - "PREPRODUCTION"

  IndustryType:
    Type: String
    Description: "Industry type for the workload"
    Default: "InfoTech"
    AllowedValues:
      - "Agriculture"
      - "Automobile"
      - "Defense"
      - "Design"
      - "Energy"
      - "FinancialServices"
      - "Government"
      - "Healthcare"
      - "Hospitality"
      - "InfoTech"
      - "Justice"
      - "Manufacturing"
      - "Marketing"
      - "Media"
      - "Mining"
      - "NonProfit"
      - "Oil"
      - "Power"
      - "Professional"
      - "RealEstate"
      - "Retail"
      - "Social"
      - "Telecommunications"
      - "Travel"
      - "Utilities"
      - "Other"

  ArchitecturalDesign:
    Type: String
    Description: "High-level architectural design description"
    Default: "Three-tier web application with load balancer, application servers, and database"
    MaxLength: 2048

  ReviewOwner:
    Type: String
    Description: "ARN of the IAM user or role who will own the assessment (leave empty to use current user)"
    Default: ""

  LensAlias:
    Type: String
    Description: "Well-Architected lens to use for assessment"
    Default: "wellarchitected"
    AllowedValues:
      - "wellarchitected"
      - "serverless"
      - "sap"

  EnableNotifications:
    Type: String
    Description: "Enable SNS notifications for assessment milestones"
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

  CreateDashboard:
    Type: String
    Description: "Create CloudWatch dashboard for assessment metrics"
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

  NotificationEmail:
    Type: String
    Description: "Email address for assessment notifications (required if EnableNotifications is true)"
    Default: ""
    AllowedPattern: '^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: "Must be a valid email address or empty"

  AssessmentFrequency:
    Type: String
    Description: "Frequency for automated assessment reminders"
    Default: "Monthly"
    AllowedValues:
      - "Weekly"
      - "Monthly"
      - "Quarterly"
      - "Annually"

  ProjectName:
    Type: String
    Description: "Project name for resource tagging"
    Default: "WellArchitected-Assessment"
    MinLength: 1
    MaxLength: 50

  CostCenter:
    Type: String
    Description: "Cost center for resource tagging"
    Default: "Architecture"
    MinLength: 1
    MaxLength: 50

  Owner:
    Type: String
    Description: "Owner for resource tagging"
    Default: "Platform-Team"
    MinLength: 1
    MaxLength: 50

# Template Conditions
Conditions:
  ShouldCreateNotifications: !Equals [!Ref EnableNotifications, "true"]
  ShouldCreateDashboard: !Equals [!Ref CreateDashboard, "true"]
  HasNotificationEmail: !Not [!Equals [!Ref NotificationEmail, ""]]
  HasReviewOwner: !Not [!Equals [!Ref ReviewOwner, ""]]
  EnableNotificationsAndEmail: !And 
    - !Condition ShouldCreateNotifications
    - !Condition HasNotificationEmail

# Template Resources
Resources:

  # IAM Role for Well-Architected Tool automation
  WellArchitectedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${WorkloadName}-WellArchitected-Role-${AWS::Region}"
      Description: "IAM role for Well-Architected Tool automation and monitoring"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:userid": !Sub "${AWS::AccountId}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: WellArchitectedAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - wellarchitected:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                Resource: "*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !If
                  - ShouldCreateNotifications
                  - !Ref AssessmentNotificationTopic
                  - !Ref "AWS::NoValue"
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Owner
          Value: !Ref Owner
        - Key: Purpose
          Value: "Well-Architected Assessment Automation"

  # SNS Topic for assessment notifications
  AssessmentNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: ShouldCreateNotifications
    Properties:
      TopicName: !Sub "${WorkloadName}-assessment-notifications"
      DisplayName: "Well-Architected Assessment Notifications"
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Owner
          Value: !Ref Owner
        - Key: Purpose
          Value: "Assessment Notifications"

  # SNS Subscription for email notifications
  AssessmentEmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: EnableNotificationsAndEmail
    Properties:
      Protocol: email
      TopicArn: !Ref AssessmentNotificationTopic
      Endpoint: !Ref NotificationEmail

  # Lambda function to monitor assessment progress
  AssessmentMonitorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${WorkloadName}-assessment-monitor"
      Description: "Lambda function to monitor Well-Architected assessment progress and send notifications"
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt WellArchitectedRole.Arn
      Timeout: 300
      Environment:
        Variables:
          WORKLOAD_NAME: !Ref WorkloadName
          SNS_TOPIC_ARN: !If
            - ShouldCreateNotifications
            - !Ref AssessmentNotificationTopic
            - ""
          LENS_ALIAS: !Ref LensAlias
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime

          def lambda_handler(event, context):
              """
              Monitor Well-Architected assessment progress and publish metrics
              """
              wellarchitected = boto3.client('wellarchitected')
              cloudwatch = boto3.client('cloudwatch')
              sns = boto3.client('sns')
              
              workload_name = os.environ.get('WORKLOAD_NAME')
              sns_topic_arn = os.environ.get('SNS_TOPIC_ARN')
              lens_alias = os.environ.get('LENS_ALIAS', 'wellarchitected')
              
              try:
                  # List workloads matching our name
                  response = wellarchitected.list_workloads(
                      WorkloadNamePrefix=workload_name
                  )
                  
                  metrics_data = []
                  
                  for workload in response.get('WorkloadSummaries', []):
                      workload_id = workload['WorkloadId']
                      
                      # Get workload details
                      workload_detail = wellarchitected.get_workload(
                          WorkloadId=workload_id
                      )
                      
                      risk_counts = workload_detail['Workload'].get('RiskCounts', {})
                      
                      # Publish CloudWatch metrics
                      for risk_level, count in risk_counts.items():
                          metrics_data.append({
                              'MetricName': f'RiskCount_{risk_level}',
                              'Value': count,
                              'Unit': 'Count',
                              'Dimensions': [
                                  {
                                      'Name': 'WorkloadId',
                                      'Value': workload_id
                                  },
                                  {
                                      'Name': 'WorkloadName',
                                      'Value': workload['WorkloadName']
                                  }
                              ]
                          })
                      
                      # Get lens review details
                      try:
                          lens_review = wellarchitected.get_lens_review(
                              WorkloadId=workload_id,
                              LensAlias=lens_alias
                          )
                          
                          # Count answered questions by pillar
                          for pillar in lens_review['LensReview'].get('PillarReviewSummaries', []):
                              pillar_id = pillar['PillarId']
                              pillar_risk_counts = pillar.get('RiskCounts', {})
                              
                              for risk_level, count in pillar_risk_counts.items():
                                  metrics_data.append({
                                      'MetricName': f'PillarRisk_{risk_level}',
                                      'Value': count,
                                      'Unit': 'Count',
                                      'Dimensions': [
                                          {
                                              'Name': 'WorkloadId',
                                              'Value': workload_id
                                          },
                                          {
                                              'Name': 'PillarId',
                                              'Value': pillar_id
                                          }
                                      ]
                                  })
                      except Exception as e:
                          print(f"Error getting lens review: {str(e)}")
                  
                  # Put metrics to CloudWatch
                  if metrics_data:
                      cloudwatch.put_metric_data(
                          Namespace='AWS/WellArchitected',
                          MetricData=metrics_data
                      )
                  
                  # Send notification if high risks detected
                  high_risk_count = sum(
                      metric['Value'] for metric in metrics_data 
                      if metric['MetricName'].endswith('_HIGH_RISK')
                  )
                  
                  if high_risk_count > 0 and sns_topic_arn:
                      message = f"""
                      Well-Architected Assessment Alert
                      
                      Workload: {workload_name}
                      High Risk Issues Detected: {high_risk_count}
                      
                      Please review your Well-Architected assessment and address high-risk items.
                      
                      Timestamp: {datetime.now().isoformat()}
                      """
                      
                      sns.publish(
                          TopicArn=sns_topic_arn,
                          Message=message,
                          Subject=f"Well-Architected Alert: {workload_name}"
                      )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Assessment monitoring completed successfully',
                          'metrics_published': len(metrics_data),
                          'high_risk_count': high_risk_count
                      })
                  }
                  
              except Exception as e:
                  print(f"Error in assessment monitoring: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Owner
          Value: !Ref Owner
        - Key: Purpose
          Value: "Assessment Monitoring"

  # EventBridge rule for scheduled assessment monitoring
  AssessmentScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${WorkloadName}-assessment-schedule"
      Description: "Scheduled trigger for Well-Architected assessment monitoring"
      ScheduleExpression: !Sub
        - "rate(${frequency})"
        - frequency: !FindInMap
          - FrequencyMap
          - !Ref AssessmentFrequency
          - Rate
      State: ENABLED
      Targets:
        - Arn: !GetAtt AssessmentMonitorFunction.Arn
          Id: "AssessmentMonitorTarget"

  # Permission for EventBridge to invoke Lambda
  AssessmentSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AssessmentMonitorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AssessmentScheduleRule.Arn

  # CloudWatch Dashboard for assessment metrics
  AssessmentDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: ShouldCreateDashboard
    Properties:
      DashboardName: !Sub "${WorkloadName}-WellArchitected-Dashboard"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/WellArchitected", "RiskCount_HIGH_RISK", "WorkloadName", "${WorkloadName}" ],
                  [ ".", "RiskCount_MEDIUM_RISK", ".", "." ],
                  [ ".", "RiskCount_NOT_APPLICABLE", ".", "." ],
                  [ ".", "RiskCount_UNANSWERED", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Risk Assessment Overview",
                "period": 300,
                "stat": "Maximum"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/WellArchitected", "PillarRisk_HIGH_RISK", "PillarId", "operationalExcellence" ],
                  [ "...", "security" ],
                  [ "...", "reliability" ],
                  [ "...", "performance" ],
                  [ "...", "costOptimization" ],
                  [ "...", "sustainability" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "High Risk Issues by Pillar",
                "period": 300,
                "stat": "Maximum"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${WorkloadName}-assessment-monitor'\n| fields @timestamp, @message\n| filter @message like /Assessment monitoring/\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Assessment Monitoring Logs",
                "view": "table"
              }
            }
          ]
        }

  # CloudWatch Log Group for Lambda function
  AssessmentMonitorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${WorkloadName}-assessment-monitor"
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Owner
          Value: !Ref Owner

  # CloudWatch Alarm for high risk issues
  HighRiskAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ShouldCreateNotifications
    Properties:
      AlarmName: !Sub "${WorkloadName}-HighRiskIssues"
      AlarmDescription: "Alert when high risk issues are detected in Well-Architected assessment"
      MetricName: RiskCount_HIGH_RISK
      Namespace: AWS/WellArchitected
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: WorkloadName
          Value: !Ref WorkloadName
      AlarmActions:
        - !Ref AssessmentNotificationTopic
      TreatMissingData: notBreaching

# Template Mappings
Mappings:
  FrequencyMap:
    Weekly:
      Rate: "7 days"
    Monthly:
      Rate: "30 days"
    Quarterly:
      Rate: "90 days"
    Annually:
      Rate: "365 days"

# Template Outputs
Outputs:
  WorkloadName:
    Description: "Name of the Well-Architected workload"
    Value: !Ref WorkloadName
    Export:
      Name: !Sub "${AWS::StackName}-WorkloadName"

  WellArchitectedRoleArn:
    Description: "ARN of the IAM role for Well-Architected Tool operations"
    Value: !GetAtt WellArchitectedRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-WellArchitectedRole"

  AssessmentMonitorFunctionArn:
    Description: "ARN of the Lambda function for assessment monitoring"
    Value: !GetAtt AssessmentMonitorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-MonitorFunction"

  NotificationTopicArn:
    Description: "ARN of the SNS topic for assessment notifications"
    Value: !If
      - ShouldCreateNotifications
      - !Ref AssessmentNotificationTopic
      - "Not Created"
    Export:
      Name: !Sub "${AWS::StackName}-NotificationTopic"
    Condition: ShouldCreateNotifications

  DashboardURL:
    Description: "URL to the CloudWatch dashboard for assessment metrics"
    Value: !If
      - ShouldCreateDashboard
      - !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${WorkloadName}-WellArchitected-Dashboard"
      - "Dashboard not created"
    Export:
      Name: !Sub "${AWS::StackName}-DashboardURL"

  WellArchitectedConsoleURL:
    Description: "URL to the AWS Well-Architected Tool console"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/wellarchitected/home?region=${AWS::Region}#/workloads"
    Export:
      Name: !Sub "${AWS::StackName}-ConsoleURL"

  AssessmentInstructions:
    Description: "Instructions for creating and managing Well-Architected assessments"
    Value: !Sub |
      1. Navigate to the Well-Architected Tool console: https://${AWS::Region}.console.aws.amazon.com/wellarchitected/home
      2. Create a new workload with name: ${WorkloadName}
      3. Use the monitoring function and dashboard to track assessment progress
      4. Review notifications for high-risk issues
      5. Schedule regular assessment reviews based on your chosen frequency: ${AssessmentFrequency}

  NextSteps:
    Description: "Recommended next steps after stack deployment"
    Value: |
      1. Create your workload in the Well-Architected Tool console
      2. Begin the assessment by answering questions across all six pillars
      3. Monitor the CloudWatch dashboard for risk metrics
      4. Set up email notifications if not already configured
      5. Schedule regular review cycles with your team
      6. Use the improvement plan to prioritize remediation efforts