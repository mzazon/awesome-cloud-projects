AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Self-Managed Kubernetes Integration with VPC Lattice IP Targets
  Creates a multi-VPC architecture with VPC Lattice service mesh for cross-cluster
  Kubernetes communication using IP targets for direct pod connectivity.
  
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - AvailabilityZone
          - VPCACluster
          - VPCBCluster
          - SubnetACluster
          - SubnetBCluster
      - Label:
          default: "Instance Configuration"
        Parameters:
          - InstanceType
          - EC2KeyPair
          - KubernetesVersion
      - Label:
          default: "VPC Lattice Configuration"
        Parameters:
          - ServiceNetworkName
          - FrontendServiceName
          - BackendServiceName
          - HealthCheckPath
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - EnableAccessLogging
          - CloudWatchDashboardName
      - Label:
          default: "Resource Tagging"
        Parameters:
          - Environment
          - Project
          - Owner
    ParameterLabels:
      AvailabilityZone:
        default: "Availability Zone"
      VPCACluster:
        default: "VPC A CIDR Block"
      VPCBCluster:
        default: "VPC B CIDR Block"
      SubnetACluster:
        default: "Subnet A CIDR Block"
      SubnetBCluster:
        default: "Subnet B CIDR Block"
      InstanceType:
        default: "EC2 Instance Type"
      EC2KeyPair:
        default: "EC2 Key Pair"
      KubernetesVersion:
        default: "Kubernetes Version"
      ServiceNetworkName:
        default: "Service Network Name"
      FrontendServiceName:
        default: "Frontend Service Name"
      BackendServiceName:
        default: "Backend Service Name"
      HealthCheckPath:
        default: "Health Check Path"
      EnableAccessLogging:
        default: "Enable VPC Lattice Access Logging"
      CloudWatchDashboardName:
        default: "CloudWatch Dashboard Name"
      Environment:
        default: "Environment"
      Project:
        default: "Project"
      Owner:
        default: "Owner"

Parameters:
  # Network Configuration
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability zone for subnet placement
    ConstraintDescription: Must be a valid availability zone in the current region

  VPCACluster:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR block for VPC A hosting the frontend Kubernetes cluster
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: Must be a valid IPv4 CIDR block

  VPCBCluster:
    Type: String
    Default: "10.1.0.0/16"
    Description: CIDR block for VPC B hosting the backend Kubernetes cluster
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: Must be a valid IPv4 CIDR block

  SubnetACluster:
    Type: String
    Default: "10.0.1.0/24"
    Description: CIDR block for subnet in VPC A
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: Must be a valid IPv4 CIDR block within VPC A range

  SubnetBCluster:
    Type: String
    Default: "10.1.1.0/24"
    Description: CIDR block for subnet in VPC B
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: Must be a valid IPv4 CIDR block within VPC B range

  # Instance Configuration
  InstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type for Kubernetes control plane nodes
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type suitable for Kubernetes

  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access to Kubernetes nodes
    ConstraintDescription: Must be an existing EC2 Key Pair

  KubernetesVersion:
    Type: String
    Default: "v1.28"
    Description: Kubernetes version to install
    AllowedValues:
      - "v1.26"
      - "v1.27"
      - "v1.28"
      - "v1.29"
    ConstraintDescription: Must be a supported Kubernetes version

  # VPC Lattice Configuration
  ServiceNetworkName:
    Type: String
    Default: "lattice-k8s-mesh"
    Description: Name for the VPC Lattice service network
    MinLength: 3
    MaxLength: 40
    AllowedPattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$'
    ConstraintDescription: Must be 3-40 characters, alphanumeric and hyphens only

  FrontendServiceName:
    Type: String
    Default: "frontend-service"
    Description: Name for the frontend VPC Lattice service
    MinLength: 3
    MaxLength: 40
    AllowedPattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$'
    ConstraintDescription: Must be 3-40 characters, alphanumeric and hyphens only

  BackendServiceName:
    Type: String
    Default: "backend-service"
    Description: Name for the backend VPC Lattice service
    MinLength: 3
    MaxLength: 40
    AllowedPattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$'
    ConstraintDescription: Must be 3-40 characters, alphanumeric and hyphens only

  HealthCheckPath:
    Type: String
    Default: "/health"
    Description: Health check path for VPC Lattice target groups
    AllowedPattern: '^\/.*'
    ConstraintDescription: Must start with forward slash

  # Monitoring Configuration
  EnableAccessLogging:
    Type: String
    Default: "true"
    Description: Enable VPC Lattice access logging to CloudWatch
    AllowedValues:
      - "true"
      - "false"

  CloudWatchDashboardName:
    Type: String
    Default: "VPC-Lattice-K8s-Mesh"
    Description: Name for the CloudWatch dashboard
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z0-9\-_]+$'
    ConstraintDescription: Must be 1-255 characters, alphanumeric, hyphens, and underscores only

  # Resource Tagging
  Environment:
    Type: String
    Default: "dev"
    Description: Environment designation for resource tagging
    AllowedValues:
      - "dev"
      - "test"
      - "staging"
      - "prod"

  Project:
    Type: String
    Default: "k8s-lattice-integration"
    Description: Project name for resource tagging
    MinLength: 1
    MaxLength: 50

  Owner:
    Type: String
    Default: "devops-team"
    Description: Owner designation for resource tagging
    MinLength: 1
    MaxLength: 50

Conditions:
  CreateAccessLogging: !Equals [!Ref EnableAccessLogging, "true"]

Mappings:
  # Amazon Linux 2 AMI mapping for different regions
  RegionMap:
    us-east-1:
      AMI: "ami-0c55b159cbfafe1d0"  # Amazon Linux 2
    us-east-2:
      AMI: "ami-0f19d220602031aed"
    us-west-1:
      AMI: "ami-0dd655843c87b6930"
    us-west-2:
      AMI: "ami-059b454759561d9f4"
    eu-west-1:
      AMI: "ami-0bbc25e23a7640b9b"
    eu-central-1:
      AMI: "ami-0e342d72b12109f91"
    ap-southeast-1:
      AMI: "ami-0c802847a7dd848c0"
    ap-northeast-1:
      AMI: "ami-0f36dcfcc94f6d365"

Resources:
  # ============================================================================
  # VPC A Infrastructure (Frontend Kubernetes Cluster)
  # ============================================================================
  
  VPCA:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCACluster
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc-a"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Purpose
          Value: "Frontend Kubernetes Cluster VPC"

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCA
      CidrBlock: !Ref SubnetACluster
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnet-a"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  InternetGatewayA:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw-a"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  AttachGatewayA:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCA
      InternetGatewayId: !Ref InternetGatewayA

  RouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCA
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rt-a"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  RouteA:
    Type: AWS::EC2::Route
    DependsOn: AttachGatewayA
    Properties:
      RouteTableId: !Ref RouteTableA
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGatewayA

  SubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTableA

  # ============================================================================
  # VPC B Infrastructure (Backend Kubernetes Cluster)
  # ============================================================================
  
  VPCB:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCBCluster
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc-b"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Purpose
          Value: "Backend Kubernetes Cluster VPC"

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCB
      CidrBlock: !Ref SubnetBCluster
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnet-b"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  InternetGatewayB:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw-b"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  AttachGatewayB:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCB
      InternetGatewayId: !Ref InternetGatewayB

  RouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCB
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rt-b"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  RouteB:
    Type: AWS::EC2::Route
    DependsOn: AttachGatewayB
    Properties:
      RouteTableId: !Ref RouteTableB
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGatewayB

  SubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTableB

  # ============================================================================
  # Security Groups for Kubernetes Clusters and VPC Lattice
  # ============================================================================

  SecurityGroupA:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-sg-cluster-a"
      GroupDescription: Security group for Kubernetes cluster A with VPC Lattice integration
      VpcId: !Ref VPCA
      SecurityGroupIngress:
        # SSH access for cluster management
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
          Description: "SSH access for cluster management"
        # Frontend service port for VPC Lattice health checks
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourcePrefixListId: !Sub "pl-${AWS::Region}-vpce-svc"  # VPC Lattice managed prefix list
          Description: "VPC Lattice health checks for frontend service"
        # Kubernetes API server
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          SourceSecurityGroupId: !Ref SecurityGroupA
          Description: "Kubernetes API server"
        # etcd server client API
        - IpProtocol: tcp
          FromPort: 2379
          ToPort: 2380
          SourceSecurityGroupId: !Ref SecurityGroupA
          Description: "etcd server client API"
        # Kubelet API
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10250
          SourceSecurityGroupId: !Ref SecurityGroupA
          Description: "Kubelet API"
        # kube-scheduler
        - IpProtocol: tcp
          FromPort: 10259
          ToPort: 10259
          SourceSecurityGroupId: !Ref SecurityGroupA
          Description: "kube-scheduler"
        # kube-controller-manager
        - IpProtocol: tcp
          FromPort: 10257
          ToPort: 10257
          SourceSecurityGroupId: !Ref SecurityGroupA
          Description: "kube-controller-manager"
        # NodePort Services
        - IpProtocol: tcp
          FromPort: 30000
          ToPort: 32767
          SourceSecurityGroupId: !Ref SecurityGroupA
          Description: "NodePort Services"
      SecurityGroupEgress:
        # Allow all outbound traffic
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
          Description: "All outbound traffic"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sg-cluster-a"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  SecurityGroupB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-sg-cluster-b"
      GroupDescription: Security group for Kubernetes cluster B with VPC Lattice integration
      VpcId: !Ref VPCB
      SecurityGroupIngress:
        # SSH access for cluster management
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
          Description: "SSH access for cluster management"
        # Backend service port for VPC Lattice health checks
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          SourcePrefixListId: !Sub "pl-${AWS::Region}-vpce-svc"  # VPC Lattice managed prefix list
          Description: "VPC Lattice health checks for backend service"
        # Kubernetes API server
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          SourceSecurityGroupId: !Ref SecurityGroupB
          Description: "Kubernetes API server"
        # etcd server client API
        - IpProtocol: tcp
          FromPort: 2379
          ToPort: 2380
          SourceSecurityGroupId: !Ref SecurityGroupB
          Description: "etcd server client API"
        # Kubelet API
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10250
          SourceSecurityGroupId: !Ref SecurityGroupB
          Description: "Kubelet API"
        # kube-scheduler
        - IpProtocol: tcp
          FromPort: 10259
          ToPort: 10259
          SourceSecurityGroupId: !Ref SecurityGroupB
          Description: "kube-scheduler"
        # kube-controller-manager
        - IpProtocol: tcp
          FromPort: 10257
          ToPort: 10257
          SourceSecurityGroupId: !Ref SecurityGroupB
          Description: "kube-controller-manager"
        # NodePort Services
        - IpProtocol: tcp
          FromPort: 30000
          ToPort: 32767
          SourceSecurityGroupId: !Ref SecurityGroupB
          Description: "NodePort Services"
      SecurityGroupEgress:
        # Allow all outbound traffic
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
          Description: "All outbound traffic"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sg-cluster-b"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # ============================================================================
  # IAM Role for EC2 Instances (Kubernetes Nodes)
  # ============================================================================

  KubernetesNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-kubernetes-node-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: VPCLatticeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - vpc-lattice:*
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-kubernetes-node-role"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  KubernetesNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-kubernetes-node-profile"
      Roles:
        - !Ref KubernetesNodeRole

  # ============================================================================
  # EC2 Instances for Kubernetes Control Planes
  # ============================================================================

  EC2InstanceA:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref EC2KeyPair
      IamInstanceProfile: !Ref KubernetesNodeInstanceProfile
      SubnetId: !Ref SubnetA
      SecurityGroupIds:
        - !Ref SecurityGroupA
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user
          
          # Install Kubernetes components using new repository
          cat <<REPO > /etc/yum.repos.d/kubernetes.repo
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/${KubernetesVersion}/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/${KubernetesVersion}/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
          REPO
          
          yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
          systemctl enable kubelet
          
          # Configure container runtime
          cat <<EOF > /etc/docker/daemon.json
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
          EOF
          
          systemctl restart docker
          
          # Install CloudWatch agent
          yum install -y amazon-cloudwatch-agent
          
          # Signal CloudFormation that instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2InstanceA --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-k8s-cluster-a"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Cluster
          Value: "frontend"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

  EC2InstanceB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref EC2KeyPair
      IamInstanceProfile: !Ref KubernetesNodeInstanceProfile
      SubnetId: !Ref SubnetB
      SecurityGroupIds:
        - !Ref SecurityGroupB
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user
          
          # Install Kubernetes components using new repository
          cat <<REPO > /etc/yum.repos.d/kubernetes.repo
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/${KubernetesVersion}/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/${KubernetesVersion}/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
          REPO
          
          yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
          systemctl enable kubelet
          
          # Configure container runtime
          cat <<EOF > /etc/docker/daemon.json
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
          EOF
          
          systemctl restart docker
          
          # Install CloudWatch agent
          yum install -y amazon-cloudwatch-agent
          
          # Signal CloudFormation that instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2InstanceB --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-k8s-cluster-b"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Cluster
          Value: "backend"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

  # ============================================================================
  # VPC Lattice Service Network
  # ============================================================================

  VPCLatticeServiceNetwork:
    Type: AWS::VpcLattice::ServiceNetwork
    Properties:
      Name: !Sub "${ServiceNetworkName}-${AWS::StackName}"
      AuthType: NONE  # For demonstration; use AWS_IAM for production
      Tags:
        - Key: Name
          Value: !Sub "${ServiceNetworkName}-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # VPC associations with the service network
  ServiceNetworkVPCAssociationA:
    Type: AWS::VpcLattice::ServiceNetworkVpcAssociation
    Properties:
      ServiceNetworkIdentifier: !Ref VPCLatticeServiceNetwork
      VpcIdentifier: !Ref VPCA
      SecurityGroupIds:
        - !Ref SecurityGroupA
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sn-vpc-a-assoc"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  ServiceNetworkVPCAssociationB:
    Type: AWS::VpcLattice::ServiceNetworkVpcAssociation
    Properties:
      ServiceNetworkIdentifier: !Ref VPCLatticeServiceNetwork
      VpcIdentifier: !Ref VPCB
      SecurityGroupIds:
        - !Ref SecurityGroupB
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sn-vpc-b-assoc"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # ============================================================================
  # VPC Lattice Target Groups for Pod IP Addresses
  # ============================================================================

  FrontendTargetGroup:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Name: !Sub "frontend-tg-${AWS::StackName}"
      Type: IP
      Protocol: HTTP
      Port: 8080
      VpcIdentifier: !Ref VPCA
      HealthCheckConfig:
        Enabled: true
        HealthCheckIntervalSeconds: 30
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 3
        Protocol: HTTP
        Port: 8080
        Path: !Ref HealthCheckPath
        Matcher:
          HttpCode: "200"
      Tags:
        - Key: Name
          Value: !Sub "frontend-tg-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Service
          Value: "frontend"

  BackendTargetGroup:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Name: !Sub "backend-tg-${AWS::StackName}"
      Type: IP
      Protocol: HTTP
      Port: 9090
      VpcIdentifier: !Ref VPCB
      HealthCheckConfig:
        Enabled: true
        HealthCheckIntervalSeconds: 30
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 3
        Protocol: HTTP
        Port: 9090
        Path: !Ref HealthCheckPath
        Matcher:
          HttpCode: "200"
      Tags:
        - Key: Name
          Value: !Sub "backend-tg-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Service
          Value: "backend"

  # ============================================================================
  # VPC Lattice Services and Listeners
  # ============================================================================

  FrontendService:
    Type: AWS::VpcLattice::Service
    Properties:
      Name: !Sub "${FrontendServiceName}-${AWS::StackName}"
      AuthType: NONE  # For demonstration; use AWS_IAM for production
      Tags:
        - Key: Name
          Value: !Sub "${FrontendServiceName}-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Service
          Value: "frontend"

  BackendService:
    Type: AWS::VpcLattice::Service
    Properties:
      Name: !Sub "${BackendServiceName}-${AWS::StackName}"
      AuthType: NONE  # For demonstration; use AWS_IAM for production
      Tags:
        - Key: Name
          Value: !Sub "${BackendServiceName}-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Service
          Value: "backend"

  FrontendListener:
    Type: AWS::VpcLattice::Listener
    Properties:
      ServiceIdentifier: !Ref FrontendService
      Name: "frontend-listener"
      Protocol: HTTP
      Port: 80
      DefaultAction:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref FrontendTargetGroup
              Weight: 100
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend-listener"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  BackendListener:
    Type: AWS::VpcLattice::Listener
    Properties:
      ServiceIdentifier: !Ref BackendService
      Name: "backend-listener"
      Protocol: HTTP
      Port: 80
      DefaultAction:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref BackendTargetGroup
              Weight: 100
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-backend-listener"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # ============================================================================
  # Service Network Service Associations
  # ============================================================================

  FrontendServiceAssociation:
    Type: AWS::VpcLattice::ServiceNetworkServiceAssociation
    Properties:
      ServiceNetworkIdentifier: !Ref VPCLatticeServiceNetwork
      ServiceIdentifier: !Ref FrontendService
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend-service-assoc"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  BackendServiceAssociation:
    Type: AWS::VpcLattice::ServiceNetworkServiceAssociation
    Properties:
      ServiceNetworkIdentifier: !Ref VPCLatticeServiceNetwork
      ServiceIdentifier: !Ref BackendService
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-backend-service-assoc"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # ============================================================================
  # CloudWatch Monitoring Resources
  # ============================================================================

  VPCLatticeLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateAccessLogging
    Properties:
      LogGroupName: !Sub "/aws/vpc-lattice/${ServiceNetworkName}-${AWS::StackName}"
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc-lattice-logs"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  VPCLatticeAccessLogSubscription:
    Type: AWS::VpcLattice::AccessLogSubscription
    Condition: CreateAccessLogging
    Properties:
      ServiceNetworkIdentifier: !Ref VPCLatticeServiceNetwork
      DestinationArn: !GetAtt VPCLatticeLogGroup.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-access-log-subscription"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${CloudWatchDashboardName}-${AWS::StackName}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/VPCLattice", "ActiveConnectionCount", "ServiceNetwork", "${VPCLatticeServiceNetwork}"],
                  [".", "NewConnectionCount", ".", "."]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "VPC Lattice Service Network Connections",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/VPCLattice", "RequestCount", "Service", "${FrontendService}"],
                  [".", ".", ".", "${BackendService}"]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Service Request Counts",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/VPCLattice", "TargetResponseTime", "TargetGroup", "${FrontendTargetGroup}"],
                  [".", ".", ".", "${BackendTargetGroup}"]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Target Group Response Times",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/VPCLattice", "HealthyTargetCount", "TargetGroup", "${FrontendTargetGroup}"],
                  [".", ".", ".", "${BackendTargetGroup}"]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Healthy Target Counts",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            }
          ]
        }

# ============================================================================
# Outputs
# ============================================================================

Outputs:
  # Network Infrastructure
  VPCAId:
    Description: ID of VPC A hosting the frontend Kubernetes cluster
    Value: !Ref VPCA
    Export:
      Name: !Sub "${AWS::StackName}-vpc-a-id"

  VPCBId:
    Description: ID of VPC B hosting the backend Kubernetes cluster
    Value: !Ref VPCB
    Export:
      Name: !Sub "${AWS::StackName}-vpc-b-id"

  SubnetAId:
    Description: ID of subnet in VPC A
    Value: !Ref SubnetA
    Export:
      Name: !Sub "${AWS::StackName}-subnet-a-id"

  SubnetBId:
    Description: ID of subnet in VPC B
    Value: !Ref SubnetB
    Export:
      Name: !Sub "${AWS::StackName}-subnet-b-id"

  # EC2 Instances
  FrontendInstanceId:
    Description: Instance ID of the frontend Kubernetes control plane
    Value: !Ref EC2InstanceA
    Export:
      Name: !Sub "${AWS::StackName}-frontend-instance-id"

  BackendInstanceId:
    Description: Instance ID of the backend Kubernetes control plane
    Value: !Ref EC2InstanceB
    Export:
      Name: !Sub "${AWS::StackName}-backend-instance-id"

  FrontendInstancePrivateIP:
    Description: Private IP address of the frontend Kubernetes instance
    Value: !GetAtt EC2InstanceA.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-frontend-private-ip"

  BackendInstancePrivateIP:
    Description: Private IP address of the backend Kubernetes instance
    Value: !GetAtt EC2InstanceB.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-backend-private-ip"

  FrontendInstancePublicIP:
    Description: Public IP address of the frontend Kubernetes instance
    Value: !GetAtt EC2InstanceA.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-frontend-public-ip"

  BackendInstancePublicIP:
    Description: Public IP address of the backend Kubernetes instance
    Value: !GetAtt EC2InstanceB.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-backend-public-ip"

  # VPC Lattice Resources
  ServiceNetworkId:
    Description: ID of the VPC Lattice service network
    Value: !Ref VPCLatticeServiceNetwork
    Export:
      Name: !Sub "${AWS::StackName}-service-network-id"

  ServiceNetworkDNS:
    Description: DNS name of the VPC Lattice service network
    Value: !GetAtt VPCLatticeServiceNetwork.DnsEntry.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-service-network-dns"

  FrontendServiceId:
    Description: ID of the frontend VPC Lattice service
    Value: !Ref FrontendService
    Export:
      Name: !Sub "${AWS::StackName}-frontend-service-id"

  BackendServiceId:
    Description: ID of the backend VPC Lattice service
    Value: !Ref BackendService
    Export:
      Name: !Sub "${AWS::StackName}-backend-service-id"

  FrontendServiceDNS:
    Description: DNS name for the frontend service
    Value: !Sub "${FrontendService}.${VPCLatticeServiceNetwork}"
    Export:
      Name: !Sub "${AWS::StackName}-frontend-service-dns"

  BackendServiceDNS:
    Description: DNS name for the backend service
    Value: !Sub "${BackendService}.${VPCLatticeServiceNetwork}"
    Export:
      Name: !Sub "${AWS::StackName}-backend-service-dns"

  FrontendTargetGroupId:
    Description: ID of the frontend target group
    Value: !Ref FrontendTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-frontend-target-group-id"

  BackendTargetGroupId:
    Description: ID of the backend target group
    Value: !Ref BackendTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-backend-target-group-id"

  # Monitoring
  CloudWatchDashboardURL:
    Description: URL to the CloudWatch dashboard for VPC Lattice monitoring
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${CloudWatchDashboardName}-${AWS::StackName}"
    Export:
      Name: !Sub "${AWS::StackName}-dashboard-url"

  VPCLatticeLogGroupName:
    Condition: CreateAccessLogging
    Description: CloudWatch log group name for VPC Lattice access logs
    Value: !Ref VPCLatticeLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-log-group-name"

  # Connection Information
  SSHCommandFrontend:
    Description: SSH command to connect to the frontend Kubernetes instance
    Value: !Sub "ssh -i ${EC2KeyPair}.pem ec2-user@${EC2InstanceA.PublicIp}"

  SSHCommandBackend:
    Description: SSH command to connect to the backend Kubernetes instance
    Value: !Sub "ssh -i ${EC2KeyPair}.pem ec2-user@${EC2InstanceB.PublicIp}"

  # Next Steps
  PostDeploymentInstructions:
    Description: Instructions for completing the Kubernetes and VPC Lattice setup
    Value: !Sub |
      1. SSH to instances and initialize Kubernetes clusters with kubeadm
      2. Register pod IP addresses with VPC Lattice target groups using AWS CLI:
         aws vpc-lattice register-targets --target-group-identifier ${FrontendTargetGroup} --targets id=${EC2InstanceA.PrivateIp},port=8080
         aws vpc-lattice register-targets --target-group-identifier ${BackendTargetGroup} --targets id=${EC2InstanceB.PrivateIp},port=9090
      3. Deploy sample applications that expose health endpoints on ports 8080 and 9090
      4. Test cross-VPC communication via VPC Lattice service mesh
      5. Monitor service mesh performance via CloudWatch dashboard: ${CloudWatchDashboardName}-${AWS::StackName}