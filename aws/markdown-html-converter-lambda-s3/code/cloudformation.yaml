AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless Markdown to HTML converter using Lambda and S3 - processes uploaded .md files and converts them to HTML automatically'

# Template Parameters
Parameters:
  ProjectName:
    Type: String
    Default: 'markdown-html-converter'
    Description: 'Name prefix for all resources (lowercase, hyphens only)'
    AllowedPattern: '^[a-z0-9-]+$'
    ConstraintDescription: 'Must contain only lowercase letters, numbers, and hyphens'
    MinLength: 3
    MaxLength: 30

  Environment:
    Type: String
    Default: 'dev'
    Description: 'Environment name (dev, staging, prod)'
    AllowedValues:
      - dev
      - staging
      - prod
    ConstraintDescription: 'Must be dev, staging, or prod'

  LambdaTimeout:
    Type: Number
    Default: 60
    Description: 'Lambda function timeout in seconds'
    MinValue: 30
    MaxValue: 900
    ConstraintDescription: 'Must be between 30 and 900 seconds'

  LambdaMemorySize:
    Type: Number
    Default: 256
    Description: 'Lambda function memory allocation in MB'
    AllowedValues: [128, 256, 512, 1024, 1536, 2048, 3008]
    ConstraintDescription: 'Must be a valid Lambda memory size'

  EnableVersioning:
    Type: String
    Default: 'true'
    Description: 'Enable S3 bucket versioning for data protection'
    AllowedValues: ['true', 'false']

  NotificationEmail:
    Type: String
    Default: ''
    Description: 'Optional email address for processing notifications (leave empty to skip)'
    AllowedPattern: '^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: 'Must be a valid email address or empty'

# Template Conditions
Conditions:
  EnableS3Versioning: !Equals [!Ref EnableVersioning, 'true']
  CreateNotifications: !Not [!Equals [!Ref NotificationEmail, '']]
  IsProduction: !Equals [!Ref Environment, 'prod']

# Template Resources
Resources:
  # S3 Input Bucket for Markdown files
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-input-${Environment}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: !If [EnableS3Versioning, 'Enabled', 'Suspended']
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: 'DeleteIncompleteMultipartUploads'
            Status: 'Enabled'
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: 'TransitionToIA'
            Status: 'Enabled'
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
          - Id: 'TransitionToGlacier'
            Status: !If [IsProduction, 'Enabled', 'Disabled']
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt MarkdownConverterFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .md
                  - Name: suffix
                    Value: .markdown
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-input-bucket'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Markdown file input storage'

  # S3 Output Bucket for HTML files
  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-output-${Environment}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: !If [EnableS3Versioning, 'Enabled', 'Suspended']
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: 'DeleteIncompleteMultipartUploads'
            Status: 'Enabled'
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          # Optional: Add lifecycle rules for converted HTML files
          - Id: 'TransitionToIA'
            Status: 'Enabled'
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET', 'HEAD']
            AllowedOrigins: ['*']
            ExposedHeaders: ['ETag']
            MaxAge: 3600
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-output-bucket'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Converted HTML file storage'

  # IAM Execution Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Read permissions for input bucket
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub '${InputBucket}/*'
              # Write permissions for output bucket
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub '${OutputBucket}/*'
              # Optional: SNS permissions for notifications
              - !If
                - CreateNotifications
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: !Ref ProcessingNotificationTopic
                - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-lambda-execution-role'
        - Key: Environment
          Value: !Ref Environment

  # Lambda function for Markdown to HTML conversion
  MarkdownConverterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-converter-${Environment}'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      ReservedConcurrencyLimit: !If [IsProduction, 50, 10]
      Environment:
        Variables:
          OUTPUT_BUCKET_NAME: !Ref OutputBucket
          ENVIRONMENT: !Ref Environment
          SNS_TOPIC_ARN: !If [CreateNotifications, !Ref ProcessingNotificationTopic, '']
          LOG_LEVEL: !If [IsProduction, 'INFO', 'DEBUG']
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib.parse
          import os
          import logging
          from datetime import datetime
          
          # Configure logging
          log_level = os.environ.get('LOG_LEVEL', 'INFO')
          logging.getLogger().setLevel(getattr(logging, log_level))
          logger = logging.getLogger(__name__)
          
          # Initialize AWS clients
          s3 = boto3.client('s3')
          sns = boto3.client('sns') if os.environ.get('SNS_TOPIC_ARN') else None
          
          def lambda_handler(event, context):
              """
              AWS Lambda handler for converting Markdown files to HTML
              Triggered by S3 PUT events on markdown files (.md, .markdown)
              """
              try:
                  processed_files = []
                  
                  # Process each S3 event record
                  for record in event['Records']:
                      # Extract S3 event information
                      input_bucket = record['s3']['bucket']['name']
                      input_key = urllib.parse.unquote_plus(
                          record['s3']['object']['key'], encoding='utf-8'
                      )
                      
                      logger.info(f"Processing file: {input_key} from bucket: {input_bucket}")
                      
                      # Validate file extension
                      if not input_key.lower().endswith(('.md', '.markdown')):
                          logger.warning(f"Skipping non-markdown file: {input_key}")
                          continue
                      
                      # Process the markdown file
                      result = process_markdown_file(input_bucket, input_key)
                      processed_files.append(result)
                      
                      logger.info(f"Successfully processed: {input_key} -> {result['output_key']}")
                  
                  # Send notification if configured
                  if sns and processed_files:
                      send_notification(processed_files)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': f'Successfully processed {len(processed_files)} files',
                          'processed_files': processed_files
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error processing files: {str(e)}")
                  # Send error notification if configured
                  if sns:
                      send_error_notification(str(e))
                  raise e
          
          def process_markdown_file(input_bucket, input_key):
              """Process a single markdown file and convert to HTML"""
              
              # Download markdown content from S3
              response = s3.get_object(Bucket=input_bucket, Key=input_key)
              markdown_content = response['Body'].read().decode('utf-8')
              
              # Convert markdown to HTML
              html_content = convert_markdown_to_html(markdown_content, input_key)
              
              # Generate output filename and key
              output_key = input_key.rsplit('.', 1)[0] + '.html'
              output_bucket = os.environ['OUTPUT_BUCKET_NAME']
              
              # Upload HTML content to output bucket
              s3.put_object(
                  Bucket=output_bucket,
                  Key=output_key,
                  Body=html_content,
                  ContentType='text/html',
                  Metadata={
                      'source-file': input_key,
                      'source-bucket': input_bucket,
                      'conversion-timestamp': datetime.utcnow().isoformat(),
                      'converter': 'lambda-markdown2',
                      'environment': os.environ.get('ENVIRONMENT', 'unknown')
                  }
              )
              
              return {
                  'input_key': input_key,
                  'output_key': output_key,
                  'output_bucket': output_bucket,
                  'file_size': len(html_content),
                  'timestamp': datetime.utcnow().isoformat()
              }
          
          def convert_markdown_to_html(markdown_text, filename='document'):
              """Convert markdown text to HTML with enhanced styling"""
              
              try:
                  # Try to import markdown2 (will be available when properly packaged)
                  import markdown2
                  
                  # Configure markdown2 with useful extensions
                  html_content = markdown2.markdown(
                      markdown_text,
                      extras=[
                          'code-friendly',      # Better code block handling
                          'fenced-code-blocks', # Support for ``` code blocks
                          'tables',            # Support for markdown tables
                          'strike',            # Support for ~~strikethrough~~
                          'task-list',         # Support for task lists
                          'wiki-tables',       # Enhanced table support
                          'header-ids'         # Generate header IDs for linking
                      ]
                  )
                  
              except ImportError:
                  logger.warning("markdown2 not available, using basic conversion")
                  # Basic fallback conversion
                  html_content = markdown_text.replace('\n', '<br>\n')
              
              # Generate full HTML document with enhanced styling
              title = filename.rsplit('/', 1)[-1].rsplit('.', 1)[0].replace('-', ' ').title()
              
              full_html = f"""<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>{title}</title>
              <meta name="generator" content="AWS Lambda Markdown Converter">
              <meta name="converted-date" content="{datetime.utcnow().isoformat()}">
              <style>
                  /* Modern, clean styling for converted documents */
                  body {{
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                      max-width: 900px;
                      margin: 0 auto;
                      padding: 40px 20px;
                      line-height: 1.6;
                      color: #333;
                      background-color: #fff;
                  }}
                  
                  h1, h2, h3, h4, h5, h6 {{
                      margin-top: 2em;
                      margin-bottom: 0.5em;
                      font-weight: 600;
                      line-height: 1.25;
                  }}
                  
                  h1 {{ color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }}
                  h2 {{ color: #34495e; border-bottom: 1px solid #ecf0f1; padding-bottom: 5px; }}
                  
                  code {{
                      background-color: #f8f9fa;
                      padding: 2px 6px;
                      border-radius: 4px;
                      font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
                      font-size: 0.875em;
                      color: #e74c3c;
                  }}
                  
                  pre {{
                      background-color: #f8f9fa;
                      padding: 20px;
                      border-radius: 8px;
                      overflow-x: auto;
                      border-left: 4px solid #3498db;
                      margin: 1.5em 0;
                  }}
                  
                  pre code {{
                      background: none;
                      padding: 0;
                      color: #2c3e50;
                  }}
                  
                  table {{
                      border-collapse: collapse;
                      width: 100%;
                      margin: 1.5em 0;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }}
                  
                  th, td {{
                      border: 1px solid #e1e8ed;
                      padding: 12px;
                      text-align: left;
                  }}
                  
                  th {{
                      background-color: #f8f9fa;
                      font-weight: 600;
                      color: #2c3e50;
                  }}
                  
                  tr:nth-child(even) {{
                      background-color: #f8f9fa;
                  }}
                  
                  blockquote {{
                      border-left: 4px solid #3498db;
                      margin: 1.5em 0;
                      padding: 0 20px;
                      color: #7f8c8d;
                      font-style: italic;
                      background-color: #f8f9fa;
                      border-radius: 0 4px 4px 0;
                  }}
                  
                  a {{
                      color: #3498db;
                      text-decoration: none;
                  }}
                  
                  a:hover {{
                      text-decoration: underline;
                  }}
                  
                  ul, ol {{
                      margin: 1em 0;
                      padding-left: 2em;
                  }}
                  
                  li {{
                      margin: 0.5em 0;
                  }}
                  
                  .conversion-info {{
                      background-color: #e8f4f8;
                      padding: 15px;
                      border-radius: 8px;
                      margin-bottom: 30px;
                      font-size: 0.875em;
                      color: #2c3e50;
                      border-left: 4px solid #3498db;
                  }}
                  
                  @media (max-width: 768px) {{
                      body {{
                          padding: 20px 15px;
                      }}
                      
                      table {{
                          font-size: 0.875em;
                      }}
                  }}
              </style>
          </head>
          <body>
              <div class="conversion-info">
                  <strong>📄 Document converted from Markdown</strong><br>
                  Original file: <code>{filename}</code><br>
                  Converted: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC<br>
                  Powered by AWS Lambda
              </div>
              {html_content}
          </body>
          </html>"""
              
              return full_html
          
          def send_notification(processed_files):
              """Send SNS notification about successful processing"""
              try:
                  topic_arn = os.environ.get('SNS_TOPIC_ARN')
                  if not topic_arn:
                      return
                  
                  message = {
                      'status': 'success',
                      'processed_count': len(processed_files),
                      'files': processed_files,
                      'timestamp': datetime.utcnow().isoformat()
                  }
                  
                  sns.publish(
                      TopicArn=topic_arn,
                      Subject=f'✅ Markdown conversion completed - {len(processed_files)} files',
                      Message=json.dumps(message, indent=2)
                  )
                  
                  logger.info(f"Sent success notification for {len(processed_files)} files")
                  
              except Exception as e:
                  logger.error(f"Failed to send notification: {str(e)}")
          
          def send_error_notification(error_message):
              """Send SNS notification about processing errors"""
              try:
                  topic_arn = os.environ.get('SNS_TOPIC_ARN')
                  if not topic_arn:
                      return
                  
                  sns.publish(
                      TopicArn=topic_arn,
                      Subject='❌ Markdown conversion error',
                      Message=f"Error occurred during markdown conversion:\n\n{error_message}\n\nTimestamp: {datetime.utcnow().isoformat()}"
                  )
                  
                  logger.info("Sent error notification")
                  
              except Exception as e:
                  logger.error(f"Failed to send error notification: {str(e)}")
      
      DeadLetterQueue:
        TargetArn: !GetAtt ProcessingDeadLetterQueue.Arn
      
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-markdown-converter'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Markdown to HTML conversion'

  # Lambda permission for S3 to invoke function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MarkdownConverterFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub '${InputBucket}/*'
      SourceAccount: !Ref AWS::AccountId

  # Dead Letter Queue for failed Lambda executions
  ProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-dlq-${Environment}'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 60
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dead-letter-queue'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Failed processing message retention'

  # Optional: SNS Topic for processing notifications
  ProcessingNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: CreateNotifications
    Properties:
      TopicName: !Sub '${ProjectName}-notifications-${Environment}'
      DisplayName: 'Markdown Processing Notifications'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-notification-topic'
        - Key: Environment
          Value: !Ref Environment

  # Email subscription for notifications
  NotificationEmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: CreateNotifications
    Properties:
      Protocol: email
      TopicArn: !Ref ProcessingNotificationTopic
      Endpoint: !Ref NotificationEmail

  # CloudWatch Log Group with retention policy
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${MarkdownConverterFunction}'
      RetentionInDays: !If [IsProduction, 30, 7]
      KmsKeyId: !GetAtt LogsKMSKey.Arn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-lambda-logs'
        - Key: Environment
          Value: !Ref Environment

  # KMS Key for CloudWatch Logs encryption
  LogsKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub 'KMS key for ${ProjectName} CloudWatch Logs encryption'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: !Sub 'logs.${AWS::Region}.amazonaws.com'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
            Condition:
              ArnEquals:
                'kms:EncryptionContext:aws:logs:arn': !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-converter-${Environment}'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-logs-kms-key'
        - Key: Environment
          Value: !Ref Environment

  LogsKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-logs-${Environment}'
      TargetKeyId: !Ref LogsKMSKey

  # CloudWatch Alarms for monitoring
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-lambda-errors-${Environment}'
      AlarmDescription: 'Lambda function error rate monitoring'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref MarkdownConverterFunction
      AlarmActions: !If
        - CreateNotifications
        - [!Ref ProcessingNotificationTopic]
        - []
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-error-alarm'
        - Key: Environment
          Value: !Ref Environment

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-lambda-duration-${Environment}'
      AlarmDescription: 'Lambda function duration monitoring'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: !Ref LambdaTimeout
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref MarkdownConverterFunction
      AlarmActions: !If
        - CreateNotifications
        - [!Ref ProcessingNotificationTopic]
        - []
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-duration-alarm'
        - Key: Environment
          Value: !Ref Environment

# Template Outputs
Outputs:
  InputBucketName:
    Description: 'Name of the S3 bucket for uploading Markdown files'
    Value: !Ref InputBucket
    Export:
      Name: !Sub '${AWS::StackName}-InputBucket'

  OutputBucketName:
    Description: 'Name of the S3 bucket where converted HTML files are stored'
    Value: !Ref OutputBucket
    Export:
      Name: !Sub '${AWS::StackName}-OutputBucket'

  InputBucketArn:
    Description: 'ARN of the input S3 bucket'
    Value: !GetAtt InputBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-InputBucketArn'

  OutputBucketArn:
    Description: 'ARN of the output S3 bucket'
    Value: !GetAtt OutputBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-OutputBucketArn'

  LambdaFunctionName:
    Description: 'Name of the Lambda function processing Markdown files'
    Value: !Ref MarkdownConverterFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt MarkdownConverterFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  ExecutionRoleArn:
    Description: 'ARN of the Lambda execution role'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ExecutionRole'

  NotificationTopicArn:
    Condition: CreateNotifications
    Description: 'ARN of the SNS topic for processing notifications'
    Value: !Ref ProcessingNotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-NotificationTopic'

  DeadLetterQueueArn:
    Description: 'ARN of the dead letter queue for failed processing'
    Value: !GetAtt ProcessingDeadLetterQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueue'

  DeadLetterQueueUrl:
    Description: 'URL of the dead letter queue'
    Value: !Ref ProcessingDeadLetterQueue
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueueUrl'

  LogGroupName:
    Description: 'CloudWatch Log Group name for Lambda function'
    Value: !Ref LambdaLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroup'

  TestCommand:
    Description: 'AWS CLI command to test the converter by uploading a sample file'
    Value: !Sub |
      echo '# Test Document
      This is a **test** markdown file.
      - Item 1
      - Item 2
      
      ```bash
      echo "Hello World"
      ```' > test.md && aws s3 cp test.md s3://${InputBucket}/ && echo "Check s3://${OutputBucket}/ for test.html"

# Metadata for documentation
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
          - Environment
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - LambdaTimeout
          - LambdaMemorySize
      - Label:
          default: "Storage Configuration"
        Parameters:
          - EnableVersioning
      - Label:
          default: "Notifications (Optional)"
        Parameters:
          - NotificationEmail
    ParameterLabels:
      ProjectName:
        default: "Project Name"
      Environment:
        default: "Environment"
      LambdaTimeout:
        default: "Lambda Timeout (seconds)"
      LambdaMemorySize:
        default: "Lambda Memory (MB)"
      EnableVersioning:
        default: "Enable S3 Versioning"
      NotificationEmail:
        default: "Notification Email"

  AWS::CloudFormation::Designer:
    ApplicationDescription: "Serverless Markdown to HTML converter using AWS Lambda and S3"
    ApplicationName: "Markdown HTML Converter"
    Version: "1.0"