# ============================================================================
# TERRAFORM VARIABLES EXAMPLE FILE
# ============================================================================
# This file provides example variable configurations for the Simple Image
# Metadata Extractor infrastructure. Copy this file to terraform.tfvars
# and customize the values for your specific deployment requirements.
#
# Usage:
#   cp terraform.tfvars.example terraform.tfvars
#   # Edit terraform.tfvars with your specific values
#   terraform plan
#   terraform apply
# ============================================================================

# ============================================================================
# CORE CONFIGURATION
# ============================================================================

# AWS region for resource deployment
aws_region = "us-east-1"

# Project name used for resource naming and tagging
project_name = "image-metadata-extractor"

# Environment name (dev, staging, prod)
environment = "dev"

# ============================================================================
# LAMBDA FUNCTION CONFIGURATION
# ============================================================================

# Lambda function timeout in seconds (1-900)
lambda_timeout = 30

# Lambda function memory size in MB (128-10240)
lambda_memory_size = 256

# Lambda function runtime
lambda_runtime = "python3.12"

# Lambda function architecture (x86_64 or arm64)
# arm64 provides up to 20% better price-performance
lambda_architecture = "x86_64"

# Lambda function log level
lambda_log_level = "INFO"

# Additional environment variables for the Lambda function
lambda_environment_variables = {
  MAX_IMAGE_SIZE_MB = "10"
  PROCESSING_MODE   = "standard"
}

# ============================================================================
# S3 BUCKET CONFIGURATION
# ============================================================================

# Force destroy S3 bucket even if it contains objects (useful for testing)
s3_bucket_force_destroy = true

# Enable S3 bucket versioning for data protection
s3_versioning_enabled = true

# Supported image file extensions that trigger processing
supported_image_formats = ["jpg", "jpeg", "png", "gif", "webp", "tiff", "bmp"]

# Enable S3 lifecycle policy for cost optimization
enable_lifecycle_policy = false

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# Enable KMS encryption for S3 bucket and CloudWatch logs
enable_kms_encryption = true

# Enable AWS X-Ray tracing for Lambda function performance monitoring
enable_xray_tracing = false

# Data classification level for compliance
data_classification = "internal"

# Enforce SSL-only requests to S3 bucket
enforce_ssl_requests_only = true

# ============================================================================
# MONITORING AND ALERTING
# ============================================================================

# Enable CloudWatch alarms for Lambda function monitoring
enable_monitoring = false

# SNS topic ARN for CloudWatch alarm notifications (optional)
# sns_alarm_topic_arn = "arn:aws:sns:us-east-1:123456789012:alerts"

# CloudWatch logs retention period in days
log_retention_days = 14

# ============================================================================
# ERROR HANDLING
# ============================================================================

# Enable Dead Letter Queue for failed Lambda invocations
enable_dlq = false

# Message retention period for Dead Letter Queue in seconds (14 days)
dlq_message_retention_seconds = 1209600

# ============================================================================
# RESOURCE NAMING
# ============================================================================

# Add random suffix to resource names for uniqueness (recommended for testing)
use_random_suffix = true

# Length of random suffix for resource names
random_suffix_length = 6

# ============================================================================
# ADVANCED CONFIGURATION
# ============================================================================

# Additional tags to apply to all resources
tags = {
  Owner       = "DevOps"
  CostCenter  = "Engineering"
  Compliance  = "Required"
}

# Reserved concurrency limit for Lambda function (optional)
# lambda_reserved_concurrency = 10

# Enable provisioned concurrency for Lambda function (reduces cold starts)
enable_provisioned_concurrency = false

# Amount of provisioned concurrency to configure
provisioned_concurrency_amount = 1

# ============================================================================
# PERFORMANCE TUNING
# ============================================================================

# Lambda function ephemeral storage size in MB (for large image processing)
lambda_ephemeral_storage_size = 512

# Maximum allowed image size in MB for processing
max_image_size_mb = 10

# ============================================================================
# COST OPTIMIZATION
# ============================================================================

# Enable detailed cost allocation tags for billing analysis
enable_cost_allocation_tags = true

# Enable S3 Intelligent Tiering for automatic cost optimization
s3_intelligent_tiering = false

# ============================================================================
# DEVELOPMENT AND TESTING
# ============================================================================

# Enable debug logging for development and troubleshooting
enable_debug_logging = false

# Create additional resources for testing (test SNS topic, etc.)
create_test_resources = false

# ============================================================================
# NETWORKING (OPTIONAL VPC CONFIGURATION)
# ============================================================================

# List of subnet IDs for Lambda VPC configuration (optional)
# Uncomment and provide subnet IDs if you want Lambda to run in a VPC
# lambda_subnet_ids = ["subnet-12345678", "subnet-87654321"]

# List of security group IDs for Lambda VPC configuration (optional)
# lambda_security_group_ids = ["sg-12345678"]

# ============================================================================
# EXAMPLE CONFIGURATIONS FOR DIFFERENT ENVIRONMENTS
# ============================================================================

# Development Environment Example:
# environment = "dev"
# lambda_memory_size = 256
# lambda_timeout = 30
# enable_kms_encryption = false
# enable_monitoring = false
# s3_bucket_force_destroy = true
# log_retention_days = 7

# Staging Environment Example:
# environment = "staging"
# lambda_memory_size = 512
# lambda_timeout = 60
# enable_kms_encryption = true
# enable_monitoring = true
# s3_bucket_force_destroy = false
# log_retention_days = 30

# Production Environment Example:
# environment = "prod"
# lambda_memory_size = 1024
# lambda_timeout = 120
# enable_kms_encryption = true
# enable_monitoring = true
# enable_dlq = true
# s3_bucket_force_destroy = false
# log_retention_days = 90
# lambda_architecture = "arm64"  # Better price-performance
# enable_provisioned_concurrency = true

# ============================================================================
# CONFIGURATION VALIDATION NOTES
# ============================================================================

# Important Notes:
# 
# 1. AWS Region: Ensure the specified region supports all services used
# 2. Lambda Memory: Higher memory = faster processing but higher cost
# 3. Lambda Architecture: arm64 provides better price-performance for most workloads
# 4. KMS Encryption: Adds security but slight performance overhead
# 5. Monitoring: Essential for production, optional for development
# 6. Random Suffix: Recommended for testing to avoid naming conflicts
# 7. VPC Configuration: Only needed if Lambda requires access to VPC resources
# 8. Cost Optimization: Enable lifecycle policies and intelligent tiering for production

# Configuration Validation:
# - All numeric values have validation rules defined in variables.tf
# - String values are validated against allowed lists where applicable
# - Boolean flags can be safely toggled without breaking the infrastructure
# - Optional configurations can be omitted and will use sensible defaults