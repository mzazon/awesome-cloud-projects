AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Simple Random Data API with Lambda and API Gateway
  Creates a serverless REST API that generates random quotes, numbers, and colors
  Recipe ID: a1f3d9e7

# Template Metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "API Configuration"
        Parameters:
          - ApiName
          - StageName
          - EnableLogging
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - FunctionName
          - MemorySize
          - Timeout
      - Label:
          default: "Resource Naming"
        Parameters:
          - ResourcePrefix
    ParameterLabels:
      ApiName:
        default: "API Gateway Name"
      StageName:
        default: "Deployment Stage"
      FunctionName:
        default: "Lambda Function Name"
      ResourcePrefix:
        default: "Resource Name Prefix"

# Input Parameters
Parameters:
  ResourcePrefix:
    Type: String
    Default: "random-data-api"
    Description: "Prefix for all resource names to ensure uniqueness"
    AllowedPattern: "^[a-z0-9-]*$"
    ConstraintDescription: "Must contain only lowercase letters, numbers, and hyphens"
    MaxLength: 20
    MinLength: 3

  ApiName:
    Type: String
    Default: "RandomDataAPI"
    Description: "Name for the API Gateway REST API"
    MaxLength: 50
    MinLength: 3

  StageName:
    Type: String
    Default: "dev"
    Description: "API Gateway deployment stage name"
    AllowedValues:
      - dev
      - test
      - staging
      - prod
    ConstraintDescription: "Must be one of: dev, test, staging, prod"

  FunctionName:
    Type: String
    Default: "RandomDataFunction"
    Description: "Name for the Lambda function"
    MaxLength: 50
    MinLength: 3

  MemorySize:
    Type: Number
    Default: 128
    Description: "Lambda function memory allocation in MB"
    AllowedValues: [128, 256, 512, 1024, 2048, 3008]
    ConstraintDescription: "Must be a valid Lambda memory size"

  Timeout:
    Type: Number
    Default: 30
    Description: "Lambda function timeout in seconds"
    MinValue: 3
    MaxValue: 900

  EnableLogging:
    Type: String
    Default: "true"
    Description: "Enable CloudWatch logging for API Gateway"
    AllowedValues: ["true", "false"]

# Conditions for optional resources
Conditions:
  ShouldEnableLogging: !Equals [!Ref EnableLogging, "true"]
  IsProductionStage: !Equals [!Ref StageName, "prod"]

# AWS Resources
Resources:
  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}-lambda-role-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-lambda-execution-role"
        - Key: Purpose
          Value: "Random Data API Lambda execution"
        - Key: Environment
          Value: !Ref StageName

  # Lambda Function for Random Data Generation
  RandomDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ResourcePrefix}-${FunctionName}"
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Description: "Generates random quotes, numbers, and colors for API responses"
      Environment:
        Variables:
          STAGE: !Ref StageName
      Code:
        ZipFile: |
          import json
          import random
          import logging
          import os
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              """
              AWS Lambda handler for random data API
              Returns random quotes, numbers, or colors based on query parameter
              """
              
              try:
                  # Log the incoming request
                  logger.info(f"Received event: {json.dumps(event)}")
                  
                  # Parse query parameters
                  query_params = event.get('queryStringParameters') or {}
                  data_type = query_params.get('type', 'quote').lower()
                  
                  # Random data collections
                  quotes = [
                      "The only way to do great work is to love what you do. - Steve Jobs",
                      "Innovation distinguishes between a leader and a follower. - Steve Jobs",
                      "Life is what happens to you while you're busy making other plans. - John Lennon",
                      "The future belongs to those who believe in the beauty of their dreams. - Eleanor Roosevelt",
                      "Success is not final, failure is not fatal: it is the courage to continue that counts. - Winston Churchill",
                      "The way to get started is to quit talking and begin doing. - Walt Disney",
                      "Don't let yesterday take up too much of today. - Will Rogers",
                      "You learn more from failure than from success. Don't let it stop you. - Unknown",
                      "If you are working on something that you really care about, you don't have to be pushed. - Steve Jobs",
                      "Experience is a hard teacher because she gives the test first, the lesson afterwards. - Vernon Law"
                  ]
                  
                  colors = [
                      {"name": "Ocean Blue", "hex": "#006994", "rgb": "rgb(0, 105, 148)"},
                      {"name": "Sunset Orange", "hex": "#FF6B35", "rgb": "rgb(255, 107, 53)"},
                      {"name": "Forest Green", "hex": "#2E8B57", "rgb": "rgb(46, 139, 87)"},
                      {"name": "Purple Haze", "hex": "#9370DB", "rgb": "rgb(147, 112, 219)"},
                      {"name": "Golden Yellow", "hex": "#FFD700", "rgb": "rgb(255, 215, 0)"},
                      {"name": "Crimson Red", "hex": "#DC143C", "rgb": "rgb(220, 20, 60)"},
                      {"name": "Sky Blue", "hex": "#87CEEB", "rgb": "rgb(135, 206, 235)"},
                      {"name": "Mint Green", "hex": "#98FB98", "rgb": "rgb(152, 251, 152)"},
                      {"name": "Coral Pink", "hex": "#FF7F50", "rgb": "rgb(255, 127, 80)"},
                      {"name": "Lavender", "hex": "#E6E6FA", "rgb": "rgb(230, 230, 250)"}
                  ]
                  
                  # Generate response based on type
                  if data_type == 'quote':
                      data = random.choice(quotes)
                  elif data_type == 'number':
                      data = random.randint(1, 1000)
                  elif data_type == 'color':
                      data = random.choice(colors)
                  else:
                      # Default to quote for unknown types
                      data = random.choice(quotes)
                      data_type = 'quote'
                  
                  # Create response
                  response_body = {
                      'type': data_type,
                      'data': data,
                      'timestamp': context.aws_request_id,
                      'message': f'Random {data_type} generated successfully',
                      'stage': os.environ.get('STAGE', 'unknown')
                  }
                  
                  # Return successful response with CORS headers
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Methods': 'GET, OPTIONS',
                          'Access-Control-Allow-Headers': 'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'
                      },
                      'body': json.dumps(response_body)
                  }
                  
              except Exception as e:
                  logger.error(f"Error processing request: {str(e)}")
                  
                  # Return error response
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'error': 'Internal server error',
                          'message': 'Failed to generate random data',
                          'requestId': context.aws_request_id
                      })
                  }
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-random-data-function"
        - Key: Purpose
          Value: "Random data generation API"
        - Key: Environment
          Value: !Ref StageName

  # CloudWatch Log Group for Lambda Function
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ResourcePrefix}-${FunctionName}"
      RetentionInDays: !If [IsProductionStage, 30, 7]
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-lambda-logs"
        - Key: Purpose
          Value: "Lambda function logging"
        - Key: Environment
          Value: !Ref StageName

  # API Gateway REST API
  RandomDataApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${ResourcePrefix}-${ApiName}"
      Description: "REST API for generating random data using Lambda"
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - application/json
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-api"
        - Key: Purpose
          Value: "Random data REST API"
        - Key: Environment
          Value: !Ref StageName

  # API Gateway Resource (/random)
  RandomResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RandomDataApi
      ParentId: !GetAtt RandomDataApi.RootResourceId
      PathPart: random

  # API Gateway Method (GET /random)
  RandomGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RandomDataApi
      ResourceId: !Ref RandomResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.type: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionArn}/invocations
          - FunctionArn: !GetAtt RandomDataFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: Empty

  # OPTIONS Method for CORS Support
  RandomOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RandomDataApi
      ResourceId: !Ref RandomResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: Empty

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RandomDataFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "${RandomDataApi}/*/GET/random"

  # Lambda Permission for OPTIONS Method
  LambdaApiGatewayPermissionOptions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RandomDataFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "${RandomDataApi}/*/OPTIONS/random"

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RandomGetMethod
      - RandomOptionsMethod
    Properties:
      RestApiId: !Ref RandomDataApi
      Description: !Sub "Deployment for ${StageName} stage"
      StageName: !Ref StageName
      StageDescription:
        Description: !Sub "${StageName} stage for Random Data API"
        LoggingLevel: !If [ShouldEnableLogging, INFO, "OFF"]
        DataTraceEnabled: !If [ShouldEnableLogging, true, false]
        MetricsEnabled: true
        ThrottlingRateLimit: 100
        ThrottlingBurstLimit: 200
        Variables:
          environment: !Ref StageName
        Tags:
          - Key: Name
            Value: !Sub "${ResourcePrefix}-api-stage"
          - Key: Purpose
            Value: "API deployment stage"
          - Key: Environment
            Value: !Ref StageName

  # CloudWatch Log Group for API Gateway (conditional)
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: ShouldEnableLogging
    Properties:
      LogGroupName: !Sub "API-Gateway-Execution-Logs_${RandomDataApi}/${StageName}"
      RetentionInDays: !If [IsProductionStage, 30, 7]
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-api-logs"
        - Key: Purpose
          Value: "API Gateway execution logging"
        - Key: Environment
          Value: !Ref StageName

  # IAM Role for API Gateway Logging (conditional)
  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Condition: ShouldEnableLogging
    Properties:
      RoleName: !Sub "${ResourcePrefix}-api-logging-role-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Tags:
        - Key: Name
          Value: !Sub "${ResourcePrefix}-api-logging-role"
        - Key: Purpose
          Value: "API Gateway CloudWatch logging"
        - Key: Environment
          Value: !Ref StageName

  # API Gateway Account Settings (conditional)
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Condition: ShouldEnableLogging
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

# Stack Outputs
Outputs:
  ApiUrl:
    Description: "URL of the Random Data API"
    Value: !Sub "https://${RandomDataApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/random"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  ApiId:
    Description: "API Gateway REST API ID"
    Value: !Ref RandomDataApi
    Export:
      Name: !Sub "${AWS::StackName}-ApiId"

  FunctionName:
    Description: "Lambda function name"
    Value: !Ref RandomDataFunction
    Export:
      Name: !Sub "${AWS::StackName}-FunctionName"

  FunctionArn:
    Description: "Lambda function ARN"
    Value: !GetAtt RandomDataFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-FunctionArn"

  LambdaRoleArn:
    Description: "Lambda execution role ARN"
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaRoleArn"

  ApiStage:
    Description: "API Gateway deployment stage"
    Value: !Ref StageName
    Export:
      Name: !Sub "${AWS::StackName}-ApiStage"

  TestCommands:
    Description: "Example commands to test the API"
    Value: !Sub |
      # Test random quote (default)
      curl -X GET "https://${RandomDataApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/random"
      
      # Test random number
      curl -X GET "https://${RandomDataApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/random?type=number"
      
      # Test random color
      curl -X GET "https://${RandomDataApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/random?type=color"

  EstimatedMonthlyCost:
    Description: "Estimated monthly cost (USD) for typical usage"
    Value: !Sub |
      API Gateway: $0.00 (1M requests free tier)
      Lambda: $0.00 (1M requests + 400K GB-seconds free tier)
      CloudWatch Logs: ~$0.50-2.00 (depending on log retention and volume)
      Total: ~$0.50-2.00/month for moderate usage